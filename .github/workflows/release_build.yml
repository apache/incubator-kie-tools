name: "Release :: Build"

on:
  workflow_call:
    inputs:
      dry_run:
        type: boolean
        required: true
      base_ref:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: "0.0.0"
      upload_asset_url:
        type: string
        required: false
        default: ""
      runners:
        type: string
        required: false
        default: '{"dmn_dev_deployment_base_image":"false","kie_sandbox_image":"false","kie_sandbox_extended_services_image":"false","cors_proxy_image":"false","online_editor":"false","chrome_extensions":"false","vscode_extensions_dev":"false","vscode_extensions_prod":"false","npm_packages":"false","standalone_editors_cdn":"false","extended_services":"false","serverless_logic_web_tools":"false","serverless_logic_web_tools_swf_builder_image":"false","serverless_logic_web_tools_base_builder_image":"false","serverless_logic_web_tools_swf_dev_mode_image":"false","dashbuilder_viewer_image":"false","kn_plugin_workflow":"false"}'
    secrets:
      kie_tools_bot_token:
        required: false
      gh_token:
        required: false
      quay_registry_password:
        required: false
      google_developer_console_client_id:
        required: false
      google_developer_console_client_secret:
        required: false
      google_developer_console_refresh_token:
        required: false
      chrome_extension_id:
        required: false
      swf_chrome_extension_id:
        required: false
      kiegroup_npm_token:
        required: false
      openshift_server:
        required: false
      openshift_token:
        required: false

env:
  KIE_TOOLS_BUILD__runLinters: "false"
  KIE_TOOLS_BUILD__runTests: "false"
  KIE_TOOLS_BUILD__runEndToEndTests: "false"
  KIE_TOOLS_BUILD__buildContainerImages: "true"
  OPENSHIFT_NAMESPACE: "kie-sandbox"
  OPENSHIFT_PART_OF: "kie-sandbox-app"

jobs:
  extract_runners:
    runs-on: ubuntu-latest

    outputs:
      dmn_dev_deployment_base_image: ${{ steps.set_runners.outputs.dmn_dev_deployment_base_image }}
      kie_sandbox_image: ${{ steps.set_runners.outputs.kie_sandbox_image }}
      kie_sandbox_extended_services_image: ${{ steps.set_runners.outputs.kie_sandbox_extended_services_image }}
      cors_proxy_image: ${{ steps.set_runners.outputs.cors_proxy_image }}
      online_editor: ${{ steps.set_runners.outputs.online_editor }}
      chrome_extensions: ${{ steps.set_runners.outputs.chrome_extensions }}
      vscode_extensions_dev: ${{ steps.set_runners.outputs.vscode_extensions_dev }}
      vscode_extensions_prod: ${{ steps.set_runners.outputs.vscode_extensions_prod }}
      npm_packages: ${{ steps.set_runners.outputs.npm_packages }}
      standalone_editors_cdn: ${{ steps.set_runners.outputs.standalone_editors_cdn }}
      extended_services: ${{ steps.set_runners.outputs.extended_services }}
      serverless_logic_web_tools: ${{ steps.set_runners.outputs.serverless_logic_web_tools }}
      serverless_logic_web_tools_swf_builder_image: ${{ steps.set_runners.outputs.serverless_logic_web_tools_swf_builder_image }}
      serverless_logic_web_tools_base_builder_image: ${{ steps.set_runners.outputs.serverless_logic_web_tools_base_builder_image }}
      serverless_logic_web_tools_swf_dev_mode_image: ${{ steps.set_runners.outputs.serverless_logic_web_tools_swf_dev_mode_image }}
      dashbuilder_viewer_image: ${{ steps.set_runners.outputs.dashbuilder_viewer_image }}
      kn_plugin_workflow: ${{ steps.set_runners.outputs.kn_plugin_workflow }}

    steps:
      - name: "Set Runners"
        id: set_runners
        shell: bash
        run: |
          echo "dmn_dev_deployment_base_image=${{ fromJSON(inputs.runners).dmn_dev_deployment_base_image }}" >> $GITHUB_OUTPUT
          echo "kie_sandbox_image=${{ fromJSON(inputs.runners).kie_sandbox_image }}" >> $GITHUB_OUTPUT
          echo "kie_sandbox_extended_services_image=${{ fromJSON(inputs.runners).kie_sandbox_extended_services_image }}" >> $GITHUB_OUTPUT
          echo "cors_proxy_image=${{ fromJSON(inputs.runners).cors_proxy_image }}" >> $GITHUB_OUTPUT
          echo "online_editor=${{ fromJSON(inputs.runners).online_editor }}" >> $GITHUB_OUTPUT
          echo "chrome_extensions=${{ fromJSON(inputs.runners).chrome_extensions }}" >> $GITHUB_OUTPUT
          echo "vscode_extensions_dev=${{ fromJSON(inputs.runners).vscode_extensions_dev }}" >> $GITHUB_OUTPUT
          echo "vscode_extensions_prod=${{ fromJSON(inputs.runners).vscode_extensions_prod }}" >> $GITHUB_OUTPUT
          echo "npm_packages=${{ fromJSON(inputs.runners).npm_packages }}" >> $GITHUB_OUTPUT
          echo "standalone_editors_cdn=${{ fromJSON(inputs.runners).standalone_editors_cdn }}" >> $GITHUB_OUTPUT
          echo "extended_services=${{ fromJSON(inputs.runners).extended_services }}" >> $GITHUB_OUTPUT
          echo "serverless_logic_web_tools=${{ fromJSON(inputs.runners).serverless_logic_web_tools }}" >> $GITHUB_OUTPUT
          echo "serverless_logic_web_tools_swf_builder_image=${{ fromJSON(inputs.runners).serverless_logic_web_tools_swf_builder_image }}" >> $GITHUB_OUTPUT
          echo "serverless_logic_web_tools_base_builder_image=${{ fromJSON(inputs.runners).serverless_logic_web_tools_base_builder_image }}" >> $GITHUB_OUTPUT
          echo "serverless_logic_web_tools_swf_dev_mode_image=${{ fromJSON(inputs.runners).serverless_logic_web_tools_swf_dev_mode_image }}" >> $GITHUB_OUTPUT
          echo "dashbuilder_viewer_image=${{ fromJSON(inputs.runners).dashbuilder_viewer_image }}" >> $GITHUB_OUTPUT
          echo "kn_plugin_workflow=${{ fromJSON(inputs.runners).kn_plugin_workflow }}" >> $GITHUB_OUTPUT

      - name: "Print Runners"
        shell: bash
        run: |
          echo "dmn_dev_deployment_base_image: ${{ steps.set_runners.outputs.dmn_dev_deployment_base_image }}"
          echo "kie_sandbox_image: ${{ steps.set_runners.outputs.kie_sandbox_image }}"
          echo "kie_sandbox_extended_services_image: ${{ steps.set_runners.outputs.kie_sandbox_extended_services_image }}"
          echo "cors_proxy_image: ${{ steps.set_runners.outputs.cors_proxy_image }}"
          echo "online_editor: ${{ steps.set_runners.outputs.online_editor }}"
          echo "chrome_extensions: ${{ steps.set_runners.outputs.chrome_extensions }}"
          echo "vscode_extensions_dev: ${{ steps.set_runners.outputs.vscode_extensions_dev }}"
          echo "vscode_extensions_prod: ${{ steps.set_runners.outputs.vscode_extensions_prod }}"
          echo "npm_packages: ${{ steps.set_runners.outputs.npm_packages }}"
          echo "standalone_editors_cdn: ${{ steps.set_runners.outputs.standalone_editors_cdn }}"
          echo "extended_services: ${{ steps.set_runners.outputs.extended_services }}"
          echo "serverless_logic_web_tools: ${{ steps.set_runners.outputs.serverless_logic_web_tools }}"
          echo "serverless_logic_web_tools_swf_builder_image: ${{ steps.set_runners.outputs.serverless_logic_web_tools_swf_builder_image }}"
          echo "serverless_logic_web_tools_base_builder_image: ${{ steps.set_runners.outputs.serverless_logic_web_tools_base_builder_image }}"
          echo "serverless_logic_web_tools_swf_dev_mode_image: ${{ steps.set_runners.outputs.serverless_logic_web_tools_swf_dev_mode_image }}"
          echo "dashbuilder_viewer_image: ${{ steps.set_runners.outputs.dashbuilder_viewer_image }}"
          echo "kn_plugin_workflow: ${{ steps.set_runners.outputs.kn_plugin_workflow }}"

  dmn_dev_deployment_base_image:
    env:
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry: "quay.io"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__account: "kie-tools"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__name: "dmn-dev-deployment-base-image"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags: "latest ${{ inputs.tag }}"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageRegistry: "quay.io"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageAccount: "kie-tools"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageName: "dmn-dev-deployment-base-image"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageTag: "${{ inputs.tag }}"

    if: ${{ needs.extract_runners.outputs.dmn_dev_deployment_base_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Cache Maven packages"
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-dmn-dev-deployment-base-image-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-dmn-dev-deployment-base-image-m2

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/dmn-dev-deployment-base-image...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Push dmn-dev-deployment-base-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__name }}"
          tags: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags }}"
          registry: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry }}/${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__account }}"
          username: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__account }}"
          password: "${{ secrets.quay_registry_password }}"

  kie_sandbox_image:
    env:
      OPENSHIFT_APP_NAME: "kie-sandbox"
      KIE_SANDBOX__imageRegistry: "quay.io"
      KIE_SANDBOX__imageAccount: "kie-tools"
      KIE_SANDBOX__imageName: "kie-sandbox-image"
      KIE_SANDBOX__imageBuildTags: "latest ${{ inputs.tag }}"
      ONLINE_EDITOR__buildInfo: "${{ inputs.tag }}"
      ONLINE_EDITOR__extendedServicesDownloadUrlLinux: "https://github.com/kiegroup/kie-tools/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz"
      ONLINE_EDITOR__extendedServicesDownloadUrlMacOs: "https://github.com/kiegroup/kie-tools/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg"
      ONLINE_EDITOR__extendedServicesDownloadUrlWindows: "https://github.com/kiegroup/kie-tools/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
      ONLINE_EDITOR__extendedServicesCompatibleVersion: "${{ inputs.tag }}"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageRegistry: "quay.io"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageAccount: "kie-tools"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageName: "dmn-dev-deployment-base-image"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageTag: "${{ inputs.tag }}"
      ONLINE_EDITOR__gtmId: "GTM-PQGMKNW"

    outputs:
      kie_sandbox_url: ${{ steps.deploy_kie_sandbox_image.outputs.route_url }}

    if: ${{ needs.extract_runners.outputs.kie_sandbox_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners, dmn_dev_deployment_base_image, kie_sandbox_extended_services_image, cors_proxy_image]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/kie-sandbox-image...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Load docker built images to podman local registry"
        if: ${{ !inputs.dry_run }}
        run: docker images --format docker-daemon:{{.Repository}}:{{.Tag}} | grep -e '${{ env.KIE_SANDBOX__imageName }}' | grep -v '<none>' | xargs podman pull

      - name: "Push kie-sandbox-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX__imageName }}"
          tags: "${{ env.KIE_SANDBOX__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}"
          username: "${{ env.KIE_SANDBOX__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "Prepare environment variables for OpenShift deployment"
        if: ${{ !inputs.dry_run }}
        shell: bash
        run: |
          echo "KIE_SANDBOX_EXTENDED_SERVICES_URL=${{ needs.kie_sandbox_extended_services_image.outputs.kie_sandbox_extended_services_url }}" >> deployment.env
          echo "KIE_SANDBOX_CORS_PROXY_URL=${{ needs.cors_proxy_image.outputs.cors_proxy_url }}" >> deployment.env

      - name: "Deploy kie-sandbox-image to OpenShift"
        id: deploy_kie_sandbox_image
        if: ${{ !inputs.dry_run }}
        uses: ./.github/actions/deploy-openshift
        with:
          image_tag: ${{ inputs.tag }}
          image_url: "${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}/${{ env.KIE_SANDBOX__imageName }}:${{ inputs.tag }}"
          app_name: ${{ env.OPENSHIFT_APP_NAME }}
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_envvars_file_path: ./deployment.env
          deployment_icon: "js"

  kie_sandbox_extended_services_image:
    env:
      OPENSHIFT_APP_NAME: "kie-sandbox-extended-services"
      KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry: "quay.io"
      KIE_SANDBOX_EXTENDED_SERVICES__imageAccount: "kie-tools"
      KIE_SANDBOX_EXTENDED_SERVICES__imageName: "kie-sandbox-extended-services-image"
      KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags: "latest ${{ inputs.tag }}"

    outputs:
      kie_sandbox_extended_services_url: ${{ steps.deploy_kie_sandbox_extended_services_image.outputs.route_url }}

    if: ${{ needs.extract_runners.outputs.kie_sandbox_extended_services_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/kie-sandbox-extended-services-image...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Load docker built images to podman local registry"
        if: ${{ !inputs.dry_run }}
        run: docker images --format docker-daemon:{{.Repository}}:{{.Tag}} | grep -e '${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}' | grep -v '<none>' | xargs podman pull

      - name: "Push kie-sandbox-extended-services-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}"
          tags: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          username: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "Deploy kie-sandbox-extended-services-image to OpenShift"
        id: deploy_kie_sandbox_extended_services_image
        if: ${{ !inputs.dry_run }}
        uses: ./.github/actions/deploy-openshift
        with:
          image_tag: ${{ inputs.tag }}
          image_url: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}:${{ inputs.tag }}"
          app_name: ${{ env.OPENSHIFT_APP_NAME }}
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_icon: "golang"

  cors_proxy_image:
    env:
      OPENSHIFT_APP_NAME: "cors-proxy"
      CORS_PROXY_IMAGE__imageRegistry: "quay.io"
      CORS_PROXY_IMAGE__imageAccount: "kie-tools"
      CORS_PROXY_IMAGE__imageName: "cors-proxy-image"
      CORS_PROXY_IMAGE__imageBuildTags: "latest ${{ inputs.tag }}"

    outputs:
      cors_proxy_url: ${{ steps.deploy_cors_proxy_image.outputs.route_url }}

    if: ${{ needs.extract_runners.outputs.cors_proxy_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/cors-proxy-image...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Load docker built images to podman local registry"
        if: ${{ !inputs.dry_run }}
        run: docker images --format docker-daemon:{{.Repository}}:{{.Tag}} | grep -e '${{ env.CORS_PROXY_IMAGE__imageName }}' | grep -v '<none>' | xargs podman pull

      - name: "Push cors-proxy-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.CORS_PROXY_IMAGE__imageName }}"
          tags: "${{ env.CORS_PROXY_IMAGE__imageBuildTags }}"
          registry: "${{ env.CORS_PROXY_IMAGE__imageRegistry }}/${{ env.CORS_PROXY_IMAGE__imageAccount }}"
          username: "${{ env.CORS_PROXY_IMAGE__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "Deploy cors-proxy-image to OpenShift"
        id: deploy_cors_proxy_image
        if: ${{ !inputs.dry_run }}
        uses: ./.github/actions/deploy-openshift
        with:
          image_tag: ${{ inputs.tag }}
          image_url: "${{ env.CORS_PROXY_IMAGE__imageRegistry }}/${{ env.CORS_PROXY_IMAGE__imageAccount }}/${{ env.CORS_PROXY_IMAGE__imageName }}:${{ inputs.tag }}"
          app_name: ${{ env.OPENSHIFT_APP_NAME }}
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_icon: "nodejs"

  online_editor:
    env:
      ONLINE_EDITOR__buildInfo: "${{ inputs.tag }}"
      ONLINE_EDITOR__extendedServicesDownloadUrlLinux: "https://github.com/kiegroup/kie-tools/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz"
      ONLINE_EDITOR__extendedServicesDownloadUrlMacOs: "https://github.com/kiegroup/kie-tools/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg"
      ONLINE_EDITOR__extendedServicesDownloadUrlWindows: "https://github.com/kiegroup/kie-tools/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
      ONLINE_EDITOR__extendedServicesCompatibleVersion: "${{ inputs.tag }}"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageRegistry: "quay.io"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageAccount: "kie-tools"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageName: "dmn-dev-deployment-base-image"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageTag: "${{ inputs.tag }}"
      ONLINE_EDITOR__gtmId: "GTM-PQGMKNW"
      ONLINE_EDITOR__corsProxyUrl: "https://cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry: "quay.io"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__account: "kie-tools"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__name: "dmn-dev-deployment-base-image"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags: "latest ${{ inputs.tag }}"

    if: ${{ always() && needs.extract_runners.outputs.online_editor == 'true' && (needs.extended_services.result == 'success' || needs.extended_services.result == 'skipped') && (needs.dmn_dev_deployment_base_image.result == 'success' || needs.dmn_dev_deployment_base_image.result == 'skipped') }}
    runs-on: ubuntu-latest
    needs: [extract_runners, dmn_dev_deployment_base_image, extended_services]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3
        with:
          path: kie-tools

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./kie-tools/.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}
          path: kie-tools

      - name: "Checkout kogito-online"
        if: ${{ !inputs.dry_run }}
        uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/kogito-online
          fetch-depth: 0
          token: ${{ secrets.kie_tools_bot_token }}
          repository: kiegroup/kogito-online
          ref: gh-pages

      - name: "Cache Maven packages"
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-release-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-release-m2

      - name: "Setup environment"
        id: setup_env
        uses: ./kie-tools/.github/actions/setup-env
        with:
          working_dir: kie-tools

      - name: "Bootstrap"
        id: bootstrap
        uses: ./kie-tools/.github/actions/bootstrap
        with:
          working_dir: kie-tools
          pnpm_filter_string: -F @kie-tools/online-editor...

      - name: "Build"
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Deploy to GitHub Pages (kogito-online)"
        if: ${{ !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online
        shell: bash
        env:
          EDITORS_DIR: ./editors/${{ inputs.tag }}
        run: |
          echo "Reset deployment dir"
          shopt -s extglob
          rm -rf -- !("dev"|"editors"|"standalone"|"chrome-extension"|"swf-chrome-extension"|".nojekyll"|"CNAME"|"0.23.0")

          echo "Copy Editor resources"
          rm -rf $EDITORS_DIR
          mkdir -p $EDITORS_DIR
          cp -RL ${{ github.workspace }}/kie-tools/packages/stunner-editors/dist/dmn $EDITORS_DIR
          cp -RL ${{ github.workspace }}/kie-tools/packages/stunner-editors/dist/bpmn $EDITORS_DIR
          cp -RL ${{ github.workspace }}//kie-tools/packages/stunner-editors/dist/scesim $EDITORS_DIR
          rm -rf ./editors/latest
          ln -s ${{ inputs.tag }} ./editors/latest

          echo "Copy Online Editor resources"
          rm -rf ./gwt-editors
          cp -r ${{ github.workspace }}/kie-tools/packages/online-editor/dist/* .
          rm -rf ./gwt-editors
          ln -s $EDITORS_DIR gwt-editors

          echo "Commit changes and push"
          git add .
          git commit -m "Deploy ${{ inputs.tag }} (Editors + Online Editor)"
          git push origin gh-pages

  chrome_extensions:
    env:
      CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
      CHROME_EXTENSION__routerRelativePath: "kogito-online/chrome-extension/${{ inputs.tag }}"
      CHROME_EXTENSION__manifestFile: "manifest.prod.json"
      CHROME_EXTENSION__onlineEditorUrl: "https://kiegroup.github.io/kogito-online"
      SWF_CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
      SWF_CHROME_EXTENSION__routerRelativePath: "kogito-online/swf-chrome-extension/${{ inputs.tag }}"
      SWF_CHROME_EXTENSION__manifestFile: "manifest.prod.json"
    if: ${{ always() && needs.extract_runners.outputs.chrome_extensions == 'true' && (needs.extended_services.result == 'success' || needs.extended_services.result == 'skipped') && (needs.dmn_dev_deployment_base_image.result == 'success' || needs.dmn_dev_deployment_base_image.result == 'skipped') && (needs.online_editor.result == 'success' || needs.online_editor.result == 'skipped') }}
    runs-on: ubuntu-latest
    needs: [extract_runners, dmn_dev_deployment_base_image, extended_services, online_editor]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3
        with:
          path: kie-tools

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./kie-tools/.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}
          path: kie-tools

      - name: "Checkout kogito-online"
        if: ${{ !inputs.dry_run }}
        uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/kogito-online
          fetch-depth: 0
          token: ${{ secrets.kie_tools_bot_token }}
          repository: kiegroup/kogito-online
          ref: gh-pages

      - name: "Setup environment"
        id: setup_env
        uses: ./kie-tools/.github/actions/setup-env
        with:
          working_dir: kie-tools

      - name: "Bootstrap"
        id: bootstrap
        uses: ./kie-tools/.github/actions/bootstrap
        with:
          working_dir: kie-tools
          pnpm_filter_string: -F chrome-extension-pack-kogito-kie-editors... -F chrome-extension-serverless-workflow-editor...

      - name: "Build Chrome Extensions"
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Upload Chrome Extension for Kogito KIE Editors"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ inputs.tag }}.zip
          asset_name: chrome_extension_kogito_kie_editors_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "Deploy Chrome Extension for KIE Editors to GitHub Pages (kogito-online)"
        if: ${{ !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online
        shell: bash
        env:
          EDITORS_DIR: ./editors/${{ inputs.tag }}
          CHROME_EXTENSION_DIR: ./chrome-extension/${{ inputs.tag }}
        run: |
          echo "Copy Chrome Extension resources"
          rm -rf $CHROME_EXTENSION_DIR
          mkdir -p $CHROME_EXTENSION_DIR
          cp -r ${{ github.workspace }}/kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/{fonts,*-envelope.*} $CHROME_EXTENSION_DIR
          ln -s ../../$EDITORS_DIR/bpmn $CHROME_EXTENSION_DIR/bpmn
          ln -s ../../$EDITORS_DIR/dmn $CHROME_EXTENSION_DIR/dmn
          ln -s ../../$EDITORS_DIR/scesim $CHROME_EXTENSION_DIR/scesim

          echo "Commit changes and push"
          git add .
          git commit -m "Deploy ${{ inputs.tag }} (Chrome Extension for Kogito KIE Editors)"
          git push origin gh-pages

      - name: "Upload Chrome Extension for KIE Editors to the Chrome Store"
        if: ${{ !inputs.dry_run }}
        id: update_extension_kogito_kie_editors
        run: |
          access_token=$(curl -X POST -fsS "https://oauth2.googleapis.com/token" -d "client_id=${{ secrets.google_developer_console_client_id }}&client_secret=${{ secrets.google_developer_console_client_secret }}&refresh_token=${{ secrets.google_developer_console_refresh_token }}&grant_type=refresh_token" | jq -r '.access_token')
          uploadResponse=$(curl -X PUT -sS "https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{ secrets.chrome_extension_id }}" -H "Authorization:Bearer ${access_token}" -H "x-goog-api-version:2" -T ${{ github.workspace }}/kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ inputs.tag }}.zip)
          echo "$uploadResponse"
          echo "upload_status=$(echo "$uploadResponse" | jq -r '.uploadState')" >> $GITHUB_OUTPUT

      - name: "Check Upload - Chrome Extension for KIE Editors"
        if: ${{ !inputs.dry_run }}
        run: |
          [ "${{ steps.update_extension_kogito_kie_editors.outputs.upload_status }}" == 'SUCCESS' ]

      - name: "Publish Chrome Extension for KIE Editors for users"
        if: ${{ !inputs.dry_run }}
        id: publish_extension_kogito_kie_editors
        run: |
          access_token=$(curl -X POST -fsS "https://oauth2.googleapis.com/token" -d "client_id=${{ secrets.google_developer_console_client_id }}&client_secret=${{ secrets.google_developer_console_client_secret }}&refresh_token=${{ secrets.google_developer_console_refresh_token }}&grant_type=refresh_token" | jq -r '.access_token')
          publishResponse=$(curl -X POST -sS "https://www.googleapis.com/chromewebstore/v1.1/items/${{ secrets.chrome_extension_id }}/publish" -H "Authorization:Bearer ${access_token}" -H "x-goog-api-version:2" -H "Content-Length:0")
          echo "$publishResponse"
          echo "publish_status=$(echo "$publishResponse" | jq -r '.status | .[0]')" >> $GITHUB_OUTPUT

      - name: "Check Publish - Chrome Extension for KIE Editors"
        if: ${{ !inputs.dry_run }}
        run: |
          [ "${{ steps.publish_extension_kogito_kie_editors.outputs.publish_status }}" == 'OK' ] || [ "${{ steps.publish_extension_kogito_kie_editors.outputs.publish_status }}" == 'PUBLISHED_WITH_FRICTION_WARNING' ]

      - name: "Upload Chrome Extension for Serverless Workflow Editor"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/chrome_extension_serverless_workflow_editor_${{ inputs.tag }}.zip
          asset_name: chrome_extension_serverless_workflow_editor_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "Deploy Chrome Extension for Serverless Workflow Editor to GitHub Pages (kogito-online)"
        if: ${{ !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online
        shell: bash
        env:
          DEPLOYMENT_DIR: ./swf-chrome-extension/${{ inputs.tag }}
        run: |
          echo "Copy Chrome Extension resources"
          rm -rf $DEPLOYMENT_DIR
          mkdir -p $DEPLOYMENT_DIR
          cp -r ${{ github.workspace }}/kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/{fonts,diagram,*-envelope.*,*.bundle.js,*.worker.js} $DEPLOYMENT_DIR

          echo "Commit changes and push"
          git add .
          git commit -m "Deploy ${{ inputs.tag }} (Chrome Extension for Serverless Workflow Editor)"
          git push origin gh-pages

      - name: "Upload Chrome Extension for Serverless Workflow Editor to the Chrome Store"
        if: ${{ !inputs.dry_run }}
        id: update_extension_serverless_workflow_editor
        run: |
          access_token=$(curl -X POST -fsS "https://oauth2.googleapis.com/token" -d "client_id=${{ secrets.google_developer_console_client_id }}&client_secret=${{ secrets.google_developer_console_client_secret }}&refresh_token=${{ secrets.google_developer_console_refresh_token }}&grant_type=refresh_token" | jq -r '.access_token')
          uploadResponse=$(curl -X PUT -sS "https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{ secrets.swf_chrome_extension_id }}" -H "Authorization:Bearer ${access_token}" -H "x-goog-api-version:2" -T ${{ github.workspace }}/kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/chrome_extension_serverless_workflow_editor_${{ inputs.tag }}.zip)
          echo "$uploadResponse"
          echo "upload_status=$(echo "$uploadResponse" | jq -r '.uploadState')" >> $GITHUB_OUTPUT

      - name: "Check Upload - Chrome Extension for Serverless Workflow Editor"
        if: ${{ !inputs.dry_run }}
        run: |
          [ "${{ steps.update_extension_serverless_workflow_editor.outputs.upload_status }}" == 'SUCCESS' ]

      - name: "Publish Chrome Extension for Serverless Workflow Editor for users"
        if: ${{ !inputs.dry_run }}
        id: publish_extension_serverless_workflow_editor
        run: |
          access_token=$(curl -X POST -fsS "https://oauth2.googleapis.com/token" -d "client_id=${{ secrets.google_developer_console_client_id }}&client_secret=${{ secrets.google_developer_console_client_secret }}&refresh_token=${{ secrets.google_developer_console_refresh_token }}&grant_type=refresh_token" | jq -r '.access_token')
          publishResponse=$(curl -X POST -sS "https://www.googleapis.com/chromewebstore/v1.1/items/${{ secrets.swf_chrome_extension_id }}/publish" -H "Authorization:Bearer ${access_token}" -H "x-goog-api-version:2" -H "Content-Length:0")
          echo "$publishResponse"
          echo "publish_status=$(echo "$publishResponse" | jq -r '.status | .[0]')" >> $GITHUB_OUTPUT

      - name: "Check Publish - Chrome Extension for Serverless Workflow Editor"
        if: ${{ !inputs.dry_run }}
        run: |
          [ "${{ steps.publish_extension_serverless_workflow_editor.outputs.publish_status }}" == 'OK' ] || [ "${{ steps.publish_extension_serverless_workflow_editor.outputs.publish_status }}" == 'PUBLISHED_WITH_FRICTION_WARNING' ]

  vscode_extensions_dev:
    if: ${{ needs.extract_runners.outputs.vscode_extensions_dev == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F kie-editors-dev-vscode-extension...

      - name: "Build"
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Upload VS Code Extension (dev) (Ubuntu only)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/kie-editors-dev-vscode-extension/dist/kie_editors_dev_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_dev_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

  vscode_extensions_prod:
    if: ${{ needs.extract_runners.outputs.vscode_extensions_prod == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: >-
            -F bpmn-vscode-extension...
            -F dmn-vscode-extension...
            -F pmml-vscode-extension...
            -F vscode-extension-kogito-bundle...
            -F swf-vscode-extension...
            -F vscode-extension-kie-ba-bundle...
            -F vscode-extension-dashbuilder-editor...

      - name: "Build"
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Upload VS Code Extension - BPMN Editor (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/bpmn-vscode-extension/dist/bpmn_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: bpmn_vscode_extension_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - DMN Editor (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/dmn-vscode-extension/dist/dmn_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: dmn_vscode_extension_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - PMML Editor (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/pmml-vscode-extension/dist/pmml_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: pmml_vscode_extension_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - Kogito Bundle (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-kogito-bundle/dist/vscode_extension_kogito_bundle_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_kogito_bundle_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - KIE Business Automation Bundle (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-kie-ba-bundle/dist/vscode_extension_kie_ba_bundle_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_kie_ba_bundle_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - Serverless Workflow Editor - KIE (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/serverless-workflow-vscode-extension/dist/serverless_workflow_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: serverless_workflow_vscode_extension_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - Dashbuilder Editor (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-dashbuilder-editor/dist/vscode_extension_dashbuilder_editor_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_dashbuilder_editor_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

  npm_packages:
    if: ${{ needs.extract_runners.outputs.npm_packages == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Create pnpm filter for building"
        id: create_pnpm_filter_string_for_building
        run: |
          export PNPM_FILTER_STRING_FOR_BUILDING=$(pnpm -r exec 'bash' '-c' 'PKG_NAME=$(jq -r ".name" package.json) PKG_IS_PVT=$(jq -r ".private" package.json); if [ "$PKG_IS_PVT" != "true" ]; then echo "-F $PKG_NAME..."; fi')
          echo $PNPM_FILTER_STRING_FOR_BUILDING
          echo 'filter<<EOF' >> $GITHUB_OUTPUT
          echo $PNPM_FILTER_STRING_FOR_BUILDING >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: ${{ steps.create_pnpm_filter_string_for_building.outputs.filter }}

      - name: "Build"
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Publish packages to the NPM registry"
        if: ${{ !inputs.dry_run }}
        env:
          NPM_TOKEN: ${{ secrets.kiegroup_npm_token }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          export PNPM_FILTER_STRING_FOR_PUBLISHING=$(pnpm -r exec 'bash' '-c' 'PKG_NAME=$(jq -r ".name" package.json) PKG_IS_PVT=$(jq -r ".private" package.json); if [ "$PKG_IS_PVT" != "true" ]; then echo "-F $PKG_NAME"; fi')
          echo $PNPM_FILTER_STRING_FOR_PUBLISHING
          pnpm $PNPM_FILTER_STRING_FOR_PUBLISHING exec 'bash' '-c' 'PKG_NAME=$(jq -r ".name" package.json); NPM_PKG_INFO=$(npm view $PKG_NAME@${{ inputs.tag }} name || echo ""); if [ -z $NPM_PKG_INFO ]; then pnpm publish --no-git-checks --access public; fi'

  standalone_editors_cdn:
    if: ${{ always() && needs.extract_runners.outputs.standalone_editors_cdn == 'true' && (needs.extended_services.result == 'success' || needs.extended_services.result == 'skipped') && (needs.dmn_dev_deployment_base_image.result == 'success' || needs.dmn_dev_deployment_base_image.result == 'skipped') && (needs.online_editor.result == 'success' || needs.online_editor.result == 'skipped') && (needs.chrome_extensions.result == 'success' || needs.chrome_extensions.result == 'skipped') }}
    runs-on: ubuntu-latest
    needs: [extract_runners, dmn_dev_deployment_base_image, extended_services, online_editor, chrome_extensions]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3
        with:
          path: kie-tools

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./kie-tools/.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}
          path: kie-tools

      - name: "Checkout kogito-online"
        if: ${{ !inputs.dry_run }}
        uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/kogito-online
          fetch-depth: 0
          token: ${{ secrets.kie_tools_bot_token }}
          repository: kiegroup/kogito-online
          ref: gh-pages

      - name: "Setup environment"
        id: setup_env
        uses: ./kie-tools/.github/actions/setup-env
        with:
          working_dir: kie-tools

      - name: "Bootstrap"
        id: bootstrap
        uses: ./kie-tools/.github/actions/bootstrap
        with:
          working_dir: kie-tools
          pnpm_filter_string: >-
            -F @kie-tools/kie-editors-standalone...
            -F @kie-tools/serverless-workflow-standalone-editor...

      - name: "Build"
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Deploy to GitHub Pages (kogito-online)"
        if: ${{ !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online
        shell: bash
        env:
          STANDALONE_EDITORS_DIR: ./standalone/${{ inputs.tag }}
        run: |
          echo "Copy standalone resources"
          rm -rf $STANDALONE_EDITORS_DIR
          mkdir $STANDALONE_EDITORS_DIR $STANDALONE_EDITORS_DIR/bpmn $STANDALONE_EDITORS_DIR/dmn $STANDALONE_EDITORS_DIR/swf
          cp ${{ github.workspace }}/kie-tools/packages/kie-editors-standalone/dist/bpmn/index.js $STANDALONE_EDITORS_DIR/bpmn/
          cp ${{ github.workspace }}/kie-tools/packages/kie-editors-standalone/dist/dmn/index.js $STANDALONE_EDITORS_DIR/dmn/
          cp ${{ github.workspace }}/kie-tools/packages/serverless-workflow-standalone-editor/dist/swf/index.js $STANDALONE_EDITORS_DIR/swf/
          rm -f ./standalone/bpmn/index.js
          rm -f ./standalone/dmn/index.js
          rm -f ./standalone/swf/index.js
          ln -s ../${{ inputs.tag }}/bpmn/index.js ./standalone/bpmn/index.js
          ln -s ../${{ inputs.tag }}/dmn/index.js ./standalone/dmn/index.js
          ln -s ../${{ inputs.tag }}/swf/index.js ./standalone/swf/index.js

          echo "Commit changes and push"
          git add .
          git commit -m "Deploy ${{ inputs.tag }} (Standalone Editors)"
          git push origin gh-pages

  extended_services:
    env:
      EXTENDED_SERVICES__kieSandboxUrl: "https://kiegroup.github.io/kogito-online"

    if: ${{ needs.extract_runners.outputs.extended_services == 'true' }}
    runs-on: ${{ matrix.os }}
    needs: [extract_runners]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Support longpaths (Windows only)"
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/extended-services...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Upload Extended Services for Linux (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/extended-services/dist/linux/kie_sandbox_extended_services.tar.gz
          asset_name: kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: "Upload Extended Services for macOS (macOS only)"
        if: ${{ runner.os == 'macOS' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/extended-services/dist/darwin/Kogito.dmg
          asset_name: kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg
          asset_content_type: application/octet-stream

      - name: "Upload Extended Services for Windows (Windows only)"
        if: ${{ runner.os == 'Windows' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "./packages/extended-services/dist/win32/kie_sandbox_extended_services.exe"
          asset_name: "kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
          asset_content_type: application/octet-stream

  kn_plugin_workflow:
    if: ${{ needs.extract_runners.outputs.kn_plugin_workflow == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/kn-plugin-workflow...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Upload Knative CLI Workflow Plugin for Linux"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/kn-plugin-workflow/dist/kn-workflow-linux-amd64
          asset_name: kn-workflow-linux-amd64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "Upload Knative CLI Workflow Plugin for macOS"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/kn-plugin-workflow/dist/kn-workflow-darwin-amd64
          asset_name: kn-workflow-darwin-amd64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "Upload Knative CLI Workflow Plugin for macOS M1"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/kn-plugin-workflow/dist/kn-workflow-darwin-arm64
          asset_name: kn-workflow-darwin-arm64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "Upload Knative CLI Workflow Plugin for Windows"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "./packages/kn-plugin-workflow/dist/kn-workflow-windows-amd64.exe"
          asset_name: "kn-workflow-windows-amd64-${{ inputs.tag }}.exe"
          asset_content_type: application/octet-stream

  serverless_logic_web_tools_swf_builder_image:
    env:
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName: "serverless-logic-web-tools-swf-builder-image"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags: "latest ${{ inputs.tag }}"

    if: ${{ needs.extract_runners.outputs.serverless_logic_web_tools_swf_builder_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Cache Maven packages"
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-serverless-logic-web-tools-swf-builder-image-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-serverless-logic-web-tools-swf-builder-image-m2

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/serverless-logic-web-tools-swf-builder-image...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Push serverless-logic-web-tools-swf-builder-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

  serverless_logic_web_tools_swf_dev_mode_image:
    env:
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName: "serverless-logic-web-tools-swf-dev-mode-image"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags: "latest ${{ inputs.tag }}"

    if: ${{ needs.extract_runners.outputs.serverless_logic_web_tools_swf_dev_mode_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Cache Maven packages"
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-serverless-logic-web-tools-swf-dev-mode-image-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-serverless-logic-web-tools-swf-dev-mode-image-m2

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/serverless-logic-web-tools-swf-dev-mode-image...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Push serverless-logic-web-tools-swf-dev-mode-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

  serverless_logic_web_tools_base_builder_image:
    env:
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName: "serverless-logic-web-tools-base-builder-image"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags: "latest ${{ inputs.tag }}"

    if: ${{ needs.extract_runners.outputs.serverless_logic_web_tools_base_builder_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/serverless-logic-web-tools-base-builder-image...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Push serverless-logic-web-tools-base-builder-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

  dashbuilder_viewer_image:
    env:
      DASHBUILDER__viewerImageRegistry: "quay.io"
      DASHBUILDER__viewerImageAccount: "kie-tools"
      DASHBUILDER__viewerImageName: "dashbuilder-viewer-image"
      DASHBUILDER__viewerImageBuildTags: "latest ${{ inputs.tag }}"

    if: ${{ needs.extract_runners.outputs.dashbuilder_viewer_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}

      - name: "Setup environment"
        id: setup_env
        uses: ./.github/actions/setup-env

      - name: "Bootstrap"
        id: bootstrap
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F @kie-tools/dashbuilder-viewer-image...

      - name: "Build"
        shell: bash
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Push dashbuilder-viewer-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DASHBUILDER__viewerImageName }}"
          tags: "${{ env.DASHBUILDER__viewerImageBuildTags }}"
          registry: "${{ env.DASHBUILDER__viewerImageRegistry }}/${{ env.DASHBUILDER__viewerImageAccount }}"
          username: "${{ env.DASHBUILDER__viewerImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

  serverless_logic_web_tools:
    env:
      SERVERLESS_LOGIC_WEB_TOOLS__version: "${{ inputs.tag }}"
      SERVERLESS_LOGIC_WEB_TOOLS__samplesRepositoryRef: "${{ inputs.tag }}"
      SERVERLESS_LOGIC_WEB_TOOLS__buildInfo: ""
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName: "serverless-logic-web-tools-swf-builder-image"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageTag: "${{ inputs.tag }}"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName: "serverless-logic-web-tools-base-builder-image"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageTag: "${{ inputs.tag }}"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName: "serverless-logic-web-tools-swf-dev-mode-image"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageTag: "${{ inputs.tag }}"
      DASHBUILDER__viewerImageRegistry: "quay.io"
      DASHBUILDER__viewerImageAccount: "kie-tools"
      DASHBUILDER__viewerImageName: "dashbuilder-viewer-image"
      SERVERLESS_LOGIC_WEB_TOOLS__dashbuilderViewerImageTag: "${{ inputs.tag }}"
      SERVERLESS_LOGIC_WEB_TOOLS__corsProxyUrl: "https://cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"

    if: ${{ always() && needs.extract_runners.outputs.serverless_logic_web_tools == 'true' && (needs.serverless_logic_web_tools_swf_builder_image.result == 'success' || needs.serverless_logic_web_tools_swf_builder_image.result == 'skipped') && (needs.serverless_logic_web_tools_base_builder_image.result == 'success' || needs.serverless_logic_web_tools_base_builder_image.result == 'skipped') && (needs.serverless_logic_web_tools_swf_dev_mode_image.result == 'success' || needs.serverless_logic_web_tools_swf_dev_mode_image.result == 'skipped') && (needs.dashbuilder_viewer_image.result == 'success' || needs.dashbuilder_viewer_image.result == 'skipped') }}
    runs-on: ubuntu-latest
    needs:
      [
        extract_runners,
        serverless_logic_web_tools_swf_builder_image,
        serverless_logic_web_tools_base_builder_image,
        serverless_logic_web_tools_swf_dev_mode_image,
        dashbuilder_viewer_image,
      ]
    steps:
      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3
        with:
          path: kie-tools

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./kie-tools/.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}
          path: kie-tools

      - name: "Checkout serverless-logic-sandbox-deployment"
        if: ${{ !inputs.dry_run }}
        uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/serverless-logic-sandbox-deployment
          fetch-depth: 0
          token: ${{ secrets.kie_tools_bot_token }}
          repository: kiegroup/serverless-logic-sandbox-deployment
          ref: gh-pages

      - name: "Cache Maven packages"
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-serverless-logic-web-tools-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-serverless-logic-web-tools-m2

      - name: "Setup environment"
        id: setup_env
        uses: ./kie-tools/.github/actions/setup-env
        with:
          working_dir: kie-tools

      - name: "Bootstrap"
        id: bootstrap
        uses: ./kie-tools/.github/actions/bootstrap
        with:
          working_dir: kie-tools
          pnpm_filter_string: -F @kie-tools/serverless-logic-web-tools...

      - name: "Build"
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod

      - name: "Deploy to GitHub Pages (serverless-logic-sandbox-deployment)"
        if: ${{ !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/serverless-logic-sandbox-deployment
        shell: bash
        run: |
          echo "Reset deployment dir"
          shopt -s extglob
          rm -rf -- !("dev"|"staging"|".nojekyll"|"CNAME"|"0.25.0"|"schemas")
          echo "Copy resources"
          cp -r ${{ github.workspace }}/kie-tools/packages/serverless-logic-web-tools/dist/* .
          echo "Commit changes and push"
          git add .
          git commit -m "Deploy ${{ inputs.tag }}"
          git push origin gh-pages
