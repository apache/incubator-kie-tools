name: "Release :: Build"

on:
  workflow_call:
    inputs:
      dry_run:
        type: boolean
        required: true
      base_ref:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: "0.0.0"
      download_asset_url:
        type: string
        required: false
        default: ""
      upload_asset_url:
        type: string
        required: false
        default: ""
      runners:
        type: string
        required: false
        default: '{"dmn_dev_sandbox_image":"false","kie_sandbox_image":"false","kie_sandbox_extended_services_image":"false","online_editor":"false","chrome_extension":"false","vscode_extensions_dev":"false","vscode_extensions_prod":"false","desktop":"false","npm_packages":"false","standalone_editors_cdn":"false","extended_services":"false","dashbuilder":"false","dashbuilder_images":"false"}'
    secrets:
      kogito_tooling_bot_token:
        required: false
      gh_token:
        required: false
      quay_registry_password:
        required: false
      google_developer_console_client_id:
        required: false
      google_developer_console_client_secret:
        required: false
      google_developer_console_refresh_token:
        required: false
      chrome_extension_id:
        required: false
      kiegroup_npm_token:
        required: false

env:
  KOGITO_TOOLING_BUILD_lint: "false"
  KOGITO_TOOLING_BUILD_test: "false"
  KOGITO_TOOLING_BUILD_testIT: "false"
  KOGITO_TOOLING_BUILD_docker: "true"

jobs:
  extract_runners:
    runs-on: ubuntu-latest

    outputs:
      dmn_dev_sandbox_image: ${{ steps.set_runners.outputs.dmn_dev_sandbox_image }}
      kie_sandbox_image: ${{ steps.set_runners.outputs.kie_sandbox_image }}
      kie_sandbox_extended_services_image: ${{ steps.set_runners.outputs.kie_sandbox_extended_services_image }}
      online_editor: ${{ steps.set_runners.outputs.online_editor }}
      chrome_extension: ${{ steps.set_runners.outputs.chrome_extension }}
      vscode_extensions_dev: ${{ steps.set_runners.outputs.vscode_extensions_dev }}
      vscode_extensions_prod: ${{ steps.set_runners.outputs.vscode_extensions_prod }}
      desktop: ${{ steps.set_runners.outputs.desktop }}
      npm_packages: ${{ steps.set_runners.outputs.npm_packages }}
      standalone_editors_cdn: ${{ steps.set_runners.outputs.standalone_editors_cdn }}
      extended_services: ${{ steps.set_runners.outputs.extended_services }}
      dashbuilder: ${{ steps.set_runners.outputs.dashbuilder }}
      dashbuilder_images: ${{ steps.set_runners.outputs.dashbuilder_images }}

    steps:
      - name: "Set Runners"
        id: set_runners
        shell: bash
        run: |
          echo "::set-output name=dmn_dev_sandbox_image::${{ fromJSON(inputs.runners).dmn_dev_sandbox_image }}"
          echo "::set-output name=kie_sandbox_image::${{ fromJSON(inputs.runners).kie_sandbox_image }}"
          echo "::set-output name=kie_sandbox_extended_services_image::${{ fromJSON(inputs.runners).kie_sandbox_extended_services_image }}"
          echo "::set-output name=online_editor::${{ fromJSON(inputs.runners).online_editor }}"
          echo "::set-output name=chrome_extension::${{ fromJSON(inputs.runners).chrome_extension }}"
          echo "::set-output name=vscode_extensions_dev::${{ fromJSON(inputs.runners).vscode_extensions_dev }}"
          echo "::set-output name=vscode_extensions_prod::${{ fromJSON(inputs.runners).vscode_extensions_prod }}"
          echo "::set-output name=desktop::${{ fromJSON(inputs.runners).desktop }}"
          echo "::set-output name=npm_packages::${{ fromJSON(inputs.runners).npm_packages }}"
          echo "::set-output name=standalone_editors_cdn::${{ fromJSON(inputs.runners).standalone_editors_cdn }}"
          echo "::set-output name=extended_services::${{ fromJSON(inputs.runners).extended_services }}"
          echo "::set-output name=dashbuilder::${{ fromJSON(inputs.runners).dashbuilder }}"
          echo "::set-output name=dashbuilder_images::${{ fromJSON(inputs.runners).dashbuilder_images }}"

      - name: "Print Runners"
        shell: bash
        run: |
          echo "dmn_dev_sandbox_image: ${{ steps.set_runners.outputs.dmn_dev_sandbox_image }}"
          echo "kie_sandbox_image: ${{ steps.set_runners.outputs.kie_sandbox_image }}"
          echo "kie_sandbox_extended_services_image: ${{ steps.set_runners.outputs.kie_sandbox_extended_services_image }}"
          echo "online_editor: ${{ steps.set_runners.outputs.online_editor }}"
          echo "chrome_extension: ${{ steps.set_runners.outputs.chrome_extension }}"
          echo "vscode_extensions_dev: ${{ steps.set_runners.outputs.vscode_extensions_dev }}"
          echo "vscode_extensions_prod: ${{ steps.set_runners.outputs.vscode_extensions_prod }}"
          echo "desktop: ${{ steps.set_runners.outputs.desktop }}"
          echo "npm_packages: ${{ steps.set_runners.outputs.npm_packages }}"
          echo "standalone_editors_cdn: ${{ steps.set_runners.outputs.standalone_editors_cdn }}"
          echo "extended_services: ${{ steps.set_runners.outputs.extended_services }}"
          echo "dashbuilder: ${{ steps.set_runners.outputs.dashbuilder }}"
          echo "dashbuilder_images: ${{ steps.set_runners.outputs.dashbuilder_images }}"

  dmn_dev_sandbox_image:
    env:
      DMN_DEV_SANDBOX__baseImageRegistry: "quay.io"
      DMN_DEV_SANDBOX__baseImageAccount: "kogito_tooling_bot"
      DMN_DEV_SANDBOX__baseImageName: "dmn-dev-sandbox-deployment-base-image"
      DMN_DEV_SANDBOX__baseImageTag: "${{ inputs.tag }}"
      DMN_DEV_SANDBOX__baseImageBuildTags: "latest ${{ inputs.tag }}"
      DMN_DEV_SANDBOX__onlineEditorUrl: "https://kiegroup.github.io/kogito-online"
      DMN_DEV_SANDBOX__gtmId: "GTM-PMJ42HB"

    if: ${{ always() && needs.extract_runners.outputs.dmn_dev_sandbox_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout kogito-tooling"
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base_ref }}
          path: ${{ github.workspace }}/kogito-tooling
          fetch-depth: 0

      - name: "Setup kogito-tooling-bot"
        uses: ./kogito-tooling/.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./kogito-tooling/.github/actions/merge-pr-changes
        with:
          path: kogito-tooling

      - name: "Cache Maven packages"
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-dmn-dev-sandbox-deployment-base-image-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-dmn-dev-sandbox-deployment-base-image-m2

      - name: "Setup environment"
        uses: ./kogito-tooling/.github/actions/setup-env
        with:
          path: kogito-tooling
          os: ubuntu-latest

      - name: "Build"
        working-directory: ${{ github.workspace }}/kogito-tooling
        run: |
          lerna run build:prod --scope=@kogito-tooling/dmn-dev-sandbox-deployment-base-image --include-dependencies --stream

      - name: "Push dmn-dev-sandbox-deployment-base-image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DMN_DEV_SANDBOX__baseImageName }}"
          tags: "${{ env.DMN_DEV_SANDBOX__baseImageBuildTags }}"
          registry: "${{ env.DMN_DEV_SANDBOX__baseImageRegistry }}/${{ env.DMN_DEV_SANDBOX__baseImageAccount }}"
          username: "${{ env.DMN_DEV_SANDBOX__baseImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

  kie_sandbox_image:
    env:
      KIE_SANDBOX__imageRegistry: "quay.io"
      KIE_SANDBOX__imageAccount: "kogito_tooling_bot"
      KIE_SANDBOX__imageName: "kie-sandbox-image"
      KIE_SANDBOX__imageBuildTags: "latest ${{ inputs.tag }}"

    if: ${{ needs.extract_runners.outputs.kie_sandbox_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout kogito-tooling"
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base_ref }}
          path: ${{ github.workspace }}/kogito-tooling
          fetch-depth: 0

      - name: "Setup kogito-tooling-bot"
        uses: ./kogito-tooling/.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./kogito-tooling/.github/actions/merge-pr-changes
        with:
          path: kogito-tooling

      - name: "Setup environment"
        uses: ./kogito-tooling/.github/actions/setup-env
        with:
          path: kogito-tooling
          os: ubuntu-latest

      - name: "Build"
        working-directory: ${{ github.workspace }}/kogito-tooling
        run: |
          lerna run build:prod --scope=@kogito-tooling/kie-sandbox-image --include-dependencies --stream

      - name: "Push kie_sandbox_image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX__imageName }}"
          tags: "${{ env.KIE_SANDBOX__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}"
          username: "${{ env.KIE_SANDBOX__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

  kie_sandbox_extended_services_image:
    env:
      KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry: "quay.io"
      KIE_SANDBOX_EXTENDED_SERVICES__imageAccount: "kogito_tooling_bot"
      KIE_SANDBOX_EXTENDED_SERVICES__imageName: "kie-sandbox-extended-services-image"
      KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags: "latest ${{ inputs.tag }}"

    if: ${{ needs.extract_runners.outputs.kie_sandbox_extended_services_image == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout kogito-tooling"
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base_ref }}
          path: ${{ github.workspace }}/kogito-tooling
          fetch-depth: 0

      - name: "Setup kogito-tooling-bot"
        uses: ./kogito-tooling/.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./kogito-tooling/.github/actions/merge-pr-changes
        with:
          path: kogito-tooling

      - name: "Setup environment"
        uses: ./kogito-tooling/.github/actions/setup-env
        with:
          path: kogito-tooling
          os: ubuntu-latest

      - name: "Build"
        working-directory: ${{ github.workspace }}/kogito-tooling
        run: |
          lerna run build:prod --scope=@kogito-tooling/kie-sandbox-extended-services-image --include-dependencies --stream

      - name: "Push kie_sandbox_extended_services_image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}"
          tags: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          username: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

  online_editor:
    env:
      ONLINE_EDITOR__buildInfo: ""
      ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlLinux: "https://github.com/kiegroup/kogito-tooling/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz"
      ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlMacOs: "https://github.com/kiegroup/kogito-tooling/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg"
      ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlWindows: "https://github.com/kiegroup/kogito-tooling/releases/download/${{ inputs.tag }}/kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
      ONLINE_EDITOR__kieSandboxExtendedServicesCompatibleVersion: "${{ inputs.tag }}"
      ONLINE_EDITOR__gtmId: "GTM-PQGMKNW"
      DMN_DEV_SANDBOX__baseImageRegistry: "quay.io"
      DMN_DEV_SANDBOX__baseImageAccount: "kogito_tooling_bot"
      DMN_DEV_SANDBOX__baseImageName: "dmn-dev-sandbox-deployment-base-image"
      DMN_DEV_SANDBOX__baseImageTag: "${{ inputs.tag }}"
      DMN_DEV_SANDBOX__baseImageBuildTags: "latest ${{ inputs.tag }}"
      DMN_DEV_SANDBOX__onlineEditorUrl: "https://kiegroup.github.io/kogito-online"
      DMN_DEV_SANDBOX__gtmId: "GTM-PMJ42HB"

    if: ${{ always() && needs.extract_runners.outputs.online_editor == 'true' && (needs.extended_services.result == 'success' || needs.extended_services.result == 'skipped') && (needs.dmn_dev_sandbox_image.result == 'success' || needs.dmn_dev_sandbox_image.result == 'skipped') }}
    runs-on: ubuntu-latest
    needs: [extract_runners, dmn_dev_sandbox_image, extended_services]
    steps:
      - name: "Checkout kogito-tooling"
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base_ref }}
          path: ${{ github.workspace }}/kogito-tooling
          fetch-depth: 0

      - name: "Setup kogito-tooling-bot"
        uses: ./kogito-tooling/.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./kogito-tooling/.github/actions/merge-pr-changes
        with:
          path: kogito-tooling

      - name: "Checkout kogito-online"
        if: ${{ !inputs.dry_run }}
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/kogito-online
          fetch-depth: 0
          token: ${{ secrets.kogito_tooling_bot_token }}
          repository: kiegroup/kogito-online
          ref: gh-pages

      - name: "Cache Maven packages"
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-release-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-release-m2

      - name: "Setup environment"
        uses: ./kogito-tooling/.github/actions/setup-env
        with:
          path: kogito-tooling
          os: ubuntu-latest

      - name: "Build"
        working-directory: ${{ github.workspace }}/kogito-tooling
        run: |
          lerna run build:prod --scope=@kogito-tooling/online-editor --include-dependencies --stream

      - name: "Deploy to GitHub Pages (kogito-online)"
        if: ${{ !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online
        shell: bash
        env:
          EDITORS_DIR: ./editors/${{ inputs.tag }}
        run: |
          echo "Reset deployment dir"
          shopt -s extglob
          rm -rf -- !("dev"|"editors"|"standalone"|"chrome-extension"|".nojekyll"|"CNAME")

          echo "Copy Editor resources"
          rm -rf $EDITORS_DIR
          mkdir -p $EDITORS_DIR
          cp -r ${{ github.workspace }}/kogito-tooling/packages/stunner-editors/dist/dmn $EDITORS_DIR
          cp -r ${{ github.workspace }}/kogito-tooling/packages/stunner-editors/dist/bpmn $EDITORS_DIR
          cp -r ${{ github.workspace }}//kogito-tooling/packages/stunner-editors/dist/scesim $EDITORS_DIR
          rm -rf ./editors/latest
          ln -s ${{ inputs.tag }} ./editors/latest

          echo "Copy Online Editor resources"
          rm -rf ./gwt-editors
          cp -r ${{ github.workspace }}/kogito-tooling/packages/online-editor/dist/* .
          rm -rf ./gwt-editors
          ln -s $EDITORS_DIR gwt-editors

          echo "Commit changes and push"
          git add .
          git commit -m "Deploy ${{ inputs.tag }} (Editors + Online Editor)"
          git push origin gh-pages

  chrome_extension:
    env:
      CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
      CHROME_EXTENSION__routerRelativePath: "kogito-online/chrome-extension/${{ inputs.tag }}"
      CHROME_EXTENSION__onlineEditorUrl: "https://kiegroup.github.io/kogito-online"
      CHROME_EXTENSION__manifestFile: "manifest.prod.json"

    if: ${{ always() && needs.extract_runners.outputs.chrome_extension == 'true' && (needs.online_editor.result == 'success' || needs.online_editor.result == 'skipped') }}
    runs-on: ubuntu-latest
    needs: [extract_runners, online_editor]
    steps:
      - name: "Checkout kogito-tooling"
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base_ref }}
          path: ${{ github.workspace }}/kogito-tooling
          fetch-depth: 0

      - name: "Setup kogito-tooling-bot"
        uses: ./kogito-tooling/.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./kogito-tooling/.github/actions/merge-pr-changes
        with:
          path: kogito-tooling

      - name: "Checkout kogito-online"
        if: ${{ !inputs.dry_run }}
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/kogito-online
          fetch-depth: 0
          token: ${{ secrets.kogito_tooling_bot_token }}
          repository: kiegroup/kogito-online
          ref: gh-pages

      - name: "Setup environment"
        uses: ./kogito-tooling/.github/actions/setup-env
        with:
          path: kogito-tooling
          os: ubuntu-latest

      - name: "Build"
        working-directory: ${{ github.workspace }}/kogito-tooling
        run: |
          lerna run build:prod --scope=chrome-extension-pack-kogito-kie-editors --include-dependencies --stream

      - name: "Upload Chrome Extension"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kogito-tooling/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ inputs.tag }}.zip
          asset_name: chrome_extension_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "Deploy to GitHub Pages (kogito-online)"
        if: ${{ !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online
        shell: bash
        env:
          EDITORS_DIR: ./editors/${{ inputs.tag }}
          CHROME_EXTENSION_DIR: ./chrome-extension/${{ inputs.tag }}
        run: |
          echo "Copy Chrome Extension resources"
          rm -rf $CHROME_EXTENSION_DIR
          mkdir -p $CHROME_EXTENSION_DIR
          cp -r ${{ github.workspace }}/kogito-tooling/packages/chrome-extension-pack-kogito-kie-editors/dist/{fonts,*-envelope.*} $CHROME_EXTENSION_DIR
          ln -s ../../$EDITORS_DIR/bpmn $CHROME_EXTENSION_DIR/bpmn
          ln -s ../../$EDITORS_DIR/dmn $CHROME_EXTENSION_DIR/dmn
          ln -s ../../$EDITORS_DIR/scesim $CHROME_EXTENSION_DIR/scesim

          echo "Commit changes and push"
          git add .
          git commit -m "Deploy ${{ inputs.tag }} (Chrome Extension)"
          git push origin gh-pages

      - name: "Upload Chrome Extension to the Chrome Store"
        if: ${{ !inputs.dry_run }}
        id: update_extension
        run: |
          access_token=$(curl -X POST -fsS "https://oauth2.googleapis.com/token" -d "client_id=${{ secrets.google_developer_console_client_id }}&client_secret=${{ secrets.google_developer_console_client_secret }}&refresh_token=${{ secrets.google_developer_console_refresh_token }}&grant_type=refresh_token" | jq -r '.access_token')
          uploadResponse=$(curl -X PUT -sS "https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{ secrets.chrome_extension_id }}" -H "Authorization:Bearer ${access_token}" -H "x-goog-api-version:2" -T ${{ github.workspace }}/kogito-tooling/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ inputs.tag }}.zip)
          echo "$uploadResponse"
          echo ::set-output name=upload_status::$(echo "$uploadResponse" | jq -r '.uploadState')

      - name: "Check Upload"
        if: ${{ !inputs.dry_run }}
        run: |
          [ "${{ steps.update_extension.outputs.upload_status }}" == 'SUCCESS' ]

      - name: "Publish Chrome Extension for users"
        if: ${{ !inputs.dry_run }}
        id: publish_extension
        run: |
          access_token=$(curl -X POST -fsS "https://oauth2.googleapis.com/token" -d "client_id=${{ secrets.google_developer_console_client_id }}&client_secret=${{ secrets.google_developer_console_client_secret }}&refresh_token=${{ secrets.google_developer_console_refresh_token }}&grant_type=refresh_token" | jq -r '.access_token')
          publishResponse=$(curl -X POST -sS "https://www.googleapis.com/chromewebstore/v1.1/items/${{ secrets.chrome_extension_id }}/publish" -H "Authorization:Bearer ${access_token}" -H "x-goog-api-version:2" -H "Content-Length:0")
          echo "$publishResponse"
          echo ::set-output name=publish_status::$(echo "$publishResponse" | jq -r '.status | .[0]')

      - name: "Check Publish"
        if: ${{ !inputs.dry_run }}
        run: |
          [ "${{ steps.publish_extension.outputs.publish_status }}" == 'OK' ] || [ "${{ steps.publish_extension.outputs.publish_status }}" == 'PUBLISHED_WITH_FRICTION_WARNING' ]

  vscode_extensions_dev:
    if: ${{ needs.extract_runners.outputs.vscode_extensions_dev == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ inputs.base_ref }}

      - name: "Setup kogito-tooling-bot"
        uses: ./.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./.github/actions/merge-pr-changes

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ubuntu-latest

      - name: "Build"
        run: |
          lerna run build:prod --scope=vscode-extension-pack-kogito-kie-editors --scope=vscode-extension-backend --include-dependencies --stream

      - name: "Upload VS Code Extension (dev) (Ubuntu only)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-pack-kogito-kie-editors/dist/vscode_extension_kogito_kie_editors_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_dev_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension Backend (dev) (Ubuntu only)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-backend/dist/vscode-extension-backend_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_backend_dev_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

  vscode_extensions_prod:
    if: ${{ needs.extract_runners.outputs.vscode_extensions_prod == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ inputs.base_ref }}

      - name: "Setup kogito-tooling-bot"
        uses: ./.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./.github/actions/merge-pr-changes

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ubuntu-latest

      - name: "Build"
        run: |
          lerna run build:prod --include-dependencies --stream \
            --scope=vscode-extension-bpmn-editor \
            --scope=vscode-extension-dmn-editor \
            --scope=vscode-extension-pmml-editor \
            --scope=vscode-extension-kogito-bundle \
            --scope=vscode-extension-red-hat-business-automation-bundle

      - name: "Upload VS Code Extension - BPMN Editor (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-bpmn-editor/dist/vscode_extension_bpmn_editor_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_bpmn_editor_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - DMN Editor (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-dmn-editor/dist/vscode_extension_dmn_editor_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_dmn_editor_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - PMML Editor (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-pmml-editor/dist/vscode_extension_pmml_editor_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_pmml_editor_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - Kogito Bundle (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-kogito-bundle/dist/vscode_extension_kogito_bundle_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_kogito_bundle_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "Upload VS Code Extension - Red Hat Business Automation Bundle (prod)"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/vscode-extension-red-hat-business-automation-bundle/dist/vscode_extension_red_hat_business_automation_bundle_${{ inputs.tag }}.vsix
          asset_name: vscode_extension_red_hat_business_automation_bundle_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

  desktop:
    if: ${{ needs.extract_runners.outputs.desktop == 'true' }}
    runs-on: ${{ matrix.os }}
    needs: [extract_runners]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Support longpaths (Windows only)"
        if: matrix.os == 'windows-latest'
        run: git config --system core.longpaths true

      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ inputs.base_ref }}

      - name: "Setup kogito-tooling-bot"
        uses: ./.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./.github/actions/merge-pr-changes

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ${{ matrix.os }}

      - name: "Build"
        shell: bash
        run: |
          lerna run build:prod --scope=@kogito-tooling/desktop --include-dependencies --stream

      - name: "Upload Desktop App for Linux (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/desktop/out/Business Modeler Preview-linux-x64.tar.gz
          asset_name: business_modeler_preview_linux_${{ inputs.tag }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: "Upload Desktop App for macOS (macOS only)"
        if: ${{ matrix.os == 'macos-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/desktop/out/Business Modeler Preview-darwin-x64.zip
          asset_name: business_modeler_preview_macos_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "Compress Desktop App (Windows only)"
        if: matrix.os == 'windows-latest'
        run: "Compress-Archive -Path \"packages\\desktop\\out\\Business Modeler Preview-win32-x64\" -DestinationPath \"packages\\desktop\\out\\Business Modeler Preview-win32-x64.zip\""

      - name: "Upload Desktop App for Windows (Windows only)"
        if: ${{ matrix.os == 'windows-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "./packages/desktop/out/Business Modeler Preview-win32-x64.zip"
          asset_name: "business_modeler_preview_windows_${{ inputs.tag }}.zip"
          asset_content_type: application/zip

  npm_packages:
    if: ${{ needs.extract_runners.outputs.npm_packages == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ inputs.base_ref }}

      - name: "Setup kogito-tooling-bot"
        uses: ./.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./.github/actions/merge-pr-changes

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ubuntu-latest

      - name: "Build"
        run: |
          lerna run build:prod --stream --no-private --include-dependencies --concurrency 1

      - name: "Publish packages to the NPM registry"
        if: ${{ !inputs.dry_run }}
        env:
          NPM_TOKEN: ${{ secrets.kiegroup_npm_token }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          lerna exec 'PKG_NAME=$(jq -r ".name" package.json); NPM_PKG_INFO=$(npm view $PKG_NAME@${{ inputs.tag }} name || echo ""); if [ -z $NPM_PKG_INFO ]; then npm publish --access public; fi' --stream --no-private

  standalone_editors_cdn:
    if: ${{ always() && needs.extract_runners.outputs.standalone_editors_cdn == 'true' && (needs.chrome_extension.result == 'success' || needs.chrome_extension.result == 'skipped') }}
    runs-on: ubuntu-latest
    needs: [extract_runners, chrome_extension]
    steps:
      - name: "Checkout kogito-tooling"
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base_ref }}
          path: ${{ github.workspace }}/kogito-tooling
          fetch-depth: 0

      - name: "Setup kogito-tooling-bot"
        uses: ./kogito-tooling/.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./kogito-tooling/.github/actions/merge-pr-changes
        with:
          path: kogito-tooling

      - name: "Checkout kogito-online"
        if: ${{ !inputs.dry_run }}
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/kogito-online
          fetch-depth: 0
          token: ${{ secrets.kogito_tooling_bot_token }}
          repository: kiegroup/kogito-online
          ref: gh-pages

      - name: "Setup environment"
        uses: ./kogito-tooling/.github/actions/setup-env
        with:
          path: kogito-tooling
          os: ubuntu-latest

      - name: "Build"
        working-directory: ${{ github.workspace }}/kogito-tooling
        run: |
          lerna run build:prod --scope=@kogito-tooling/kie-editors-standalone --include-dependencies --stream

      - name: "Deploy to GitHub Pages (kogito-online)"
        if: ${{ !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online
        shell: bash
        env:
          STANDALONE_EDITORS_DIR: ./standalone/${{ inputs.tag }}
        run: |
          echo "Copy Chrome Extension resources"
          rm -rf $STANDALONE_EDITORS_DIR
          mkdir $STANDALONE_EDITORS_DIR
          cp ${{ github.workspace }}/kogito-tooling/packages/kie-editors-standalone/dist/bpmn/index.js $STANDALONE_EDITORS_DIR/bpmn
          cp ${{ github.workspace }}/kogito-tooling/packages/kie-editors-standalone/dist/dmn/index.js $STANDALONE_EDITORS_DIR/dmn

          echo "Commit changes and push"
          git add .
          git commit -m "Deploy ${{ inputs.tag }} (Standalone Editors)"
          git push origin gh-pages

  extended_services:
    if: ${{ needs.extract_runners.outputs.extended_services == 'true' }}
    runs-on: ${{ matrix.os }}
    needs: [extract_runners]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Support longpaths (Windows only)"
        if: matrix.os == 'windows-latest'
        run: git config --system core.longpaths true

      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ inputs.base_ref }}

      - name: "Setup kogito-tooling-bot"
        uses: ./.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./.github/actions/merge-pr-changes

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ${{ matrix.os }}

      - name: "Build"
        shell: bash
        run: |
          lerna run build:prod --scope=@kogito-tooling/extended-services --include-dependencies --stream

      - name: "Upload Extended Services for Linux (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/extended-services/dist/linux/kie_sandbox_extended_services.tar.gz
          asset_name: kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: "Upload Extended Services for macOS (macOS only)"
        if: ${{ matrix.os == 'macos-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/extended-services/dist/darwin/Kogito.dmg
          asset_name: kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg
          asset_content_type: application/octet-stream

      - name: "Upload Extended Services for Windows (Windows only)"
        if: ${{ matrix.os == 'windows-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "./packages/extended-services/dist/win32/kie_sandbox_extended_services.exe"
          asset_name: "kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
          asset_content_type: application/octet-stream

  dashbuilder:
    if: ${{ needs.extract_runners.outputs.dashbuilder == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ inputs.base_ref }}

      - name: "Setup kogito-tooling-bot"
        uses: ./.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./.github/actions/merge-pr-changes

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ubuntu-latest

      - name: "Build"
        shell: bash
        run: |
          lerna run build:prod --scope=@kogito-tooling/dashbuilder --include-dependencies --stream

      - name: "Upload DashBuilder Assets"
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ./packages/dashbuilder/dist/dashbuilder_dist.zip
          asset_name: dashbuilder_dist_${{ inputs.tag }}.zip
          asset_content_type: application/zip

  dashbuilder_images:
    env:
      DASHBUILDER__baseImageRegistry: "quay.io"
      DASHBUILDER__baseImageAccount: "kogito_tooling_bot"
      DASHBUILDER_AUTHORING__baseImageName: "dashbuilder-authoring"
      DASHBUILDER_RUNTIME__baseImageName: "dashbuilder-runtime"
      DASHBUILDER__baseImageTag: "${{ inputs.tag }}"
      DASHBUILDER__baseImageBuildTags: "latest ${{ inputs.tag }}"

    if: ${{ needs.extract_runners.outputs.dashbuilder_images == 'true' }}
    runs-on: ubuntu-latest
    needs: [extract_runners]
    steps:
      - name: "Checkout kogito-tooling"
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base_ref }}
          path: ${{ github.workspace }}/kogito-tooling
          fetch-depth: 0

      - name: "Setup kogito-tooling-bot"
        uses: ./kogito-tooling/.github/actions/setup-kogito-tooling-bot

      - name: "Merge PR changes"
        uses: ./kogito-tooling/.github/actions/merge-pr-changes
        with:
          path: kogito-tooling

      - name: "Setup environment"
        uses: ./kogito-tooling/.github/actions/setup-env
        with:
          path: kogito-tooling
          os: ubuntu-latest

      - name: "Build Dashbuilder Images"
        working-directory: ${{ github.workspace }}/kogito-tooling
        run: |
          lerna run build:prod --scope=@kogito-tooling/dashbuilder-images --include-dependencies --stream

      - name: "Push dashbuilder-authoring image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DASHBUILDER_AUTHORING__baseImageName }}"
          tags: "${{ env.DASHBUILDER__baseImageBuildTags }}"
          registry: "${{ env.DASHBUILDER__baseImageRegistry }}/${{ env.DASHBUILDER__baseImageAccount }}"
          username: "${{ env.DASHBUILDER__baseImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "Push dashbuilder-runtime image to quay.io"
        if: ${{ !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DASHBUILDER_RUNTIME__baseImageName }}"
          tags: "${{ env.DASHBUILDER__baseImageBuildTags }}"
          registry: "${{ env.DASHBUILDER__baseImageRegistry }}/${{ env.DASHBUILDER__baseImageAccount }}"
          username: "${{ env.DASHBUILDER__baseImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"
