name: "Release :: Publish Chrome Extension to the Chrome Web Store"

on:
  release:
    types: [published]

jobs:
  upload_extension:
    runs-on: ubuntu-latest
    if: github.repository == 'kiegroup/kogito-tooling'
    steps:
      - uses: actions/checkout@v2
        with:
          path: kogito-tooling

      # This bash script returns the `tag` name for the release. Will match "/refs/[tags/heads]/[tag]"
      - name: Parse `tag`
        id: release-tag
        run: |
          echo ::set-output name=tag::$(node -e "console.log('${{ github.ref }}'.match(/^.*\/(.+)$/)[1])")

      # This bash script returns 0 if equal and 1 otherwise. Will fail if versions are not equal.
      - name: Check release `tag` against `lerna.json.version`
        run: |
          echo "$(node -e "console.log(require('./kogito-tooling/lerna.json').version);")"
          [ "${{ steps.release-tag.outputs.tag }}" == "$(node -e "console.log(require('./kogito-tooling/lerna.json').version);")" ]

      - name: Download Chrome Extension related to the `tag`
        run: |
          curl -vsSLJO https://github.com/kiegroup/kogito-tooling/releases/download/${{ steps.release-tag.outputs.tag }}/chrome_extension_kogito_kie_editors_${{ steps.release-tag.outputs.tag }}.zip

      - name: Upload Chrome Extension to the Chrome Store
        id: update_extension
        run: |
          access_token=$(curl -X POST -fsS "https://oauth2.googleapis.com/token" -d "client_id=${{ secrets.GOOGLE_DEVELOPER_CONSOLE_CLIENT_ID }}&client_secret=${{ secrets.GOOGLE_DEVELOPER_CONSOLE_CLIENT_SECRET }}&refresh_token=${{ secrets.GOOGLE_DEVELOPER_CONSOLE_REFRESH_TOKEN }}&grant_type=refresh_token" | jq -r '.access_token')
          uploadResponse=$(curl -X PUT -sS "https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{ secrets.CHROME_EXTENSION_ID }}" -H "Authorization:Bearer ${access_token}" -H "x-goog-api-version:2" -T chrome_extension_kogito_kie_editors_${{ steps.release-tag.outputs.tag }}.zip)
          echo "$uploadResponse"
          echo ::set-output name=upload_status::$(echo "$uploadResponse" | jq -r '.uploadState')

      - name: Check Upload
        run: |
          [ "${{ steps.update_extension.outputs.upload_status }}" == 'SUCCESS' ]

  publish_extension:
    needs: upload_extension
    runs-on: ubuntu-latest
    if: github.repository == 'kiegroup/kogito-tooling'
    steps:
      - name: Publish Chrome Extension for users
        id: publish_extension
        run: |
          access_token=$(curl -X POST -fsS "https://oauth2.googleapis.com/token" -d "client_id=${{ secrets.GOOGLE_DEVELOPER_CONSOLE_CLIENT_ID }}&client_secret=${{ secrets.GOOGLE_DEVELOPER_CONSOLE_CLIENT_SECRET }}&refresh_token=${{ secrets.GOOGLE_DEVELOPER_CONSOLE_REFRESH_TOKEN }}&grant_type=refresh_token" | jq -r '.access_token')
          publishResponse=$(curl -X POST -sS "https://www.googleapis.com/chromewebstore/v1.1/items/${{ secrets.CHROME_EXTENSION_ID }}/publish" -H "Authorization:Bearer ${access_token}" -H "x-goog-api-version:2" -H "Content-Length:0")
          echo "$publishResponse"
          echo ::set-output name=publish_status::$(echo "$publishResponse" | jq -r '.status | .[0]')

      - name: Check Publish
        run: |
          [ "${{ steps.publish_extension.outputs.publish_status }}" == 'OK' ] || [ "${{ steps.publish_extension.outputs.publish_status }}" == 'PUBLISHED_WITH_FRICTION_WARNING' ]
