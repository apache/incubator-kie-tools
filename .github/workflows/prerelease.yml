name: Create draft release

on:
  push:
    branches: ["**-prerelease"]

jobs:
  prerelease:
    if: github.repository == 'kiegroup/kogito-tooling'

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [12.13.0]
        yarn: [1.19.0]

    steps:
      - uses: actions/checkout@v1

      # This bash script returns the `tag` name for the release. Will match "/refs/[tags/heads]/[tag]-prerelease"
      - name: Parse `tag`
        id: prerelease-tag
        run: |          
          echo ::set-output name=tag::$(node -e "console.log('${{ github.ref }}'.match(/^.*\/(.+)-prerelease$/)[1])")

      # This bash script returns 0 if equal and 1 otherwise. Will fail if versions are not equal.
      - name: Check `tag` against `lerna.json.version`
        run: |
          [ "${{ steps.prerelease-tag.outputs.tag }}" == "$(node -e "console.log(require('./lerna.json').version);")" ]

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Yarn
        run: npm install -g yarn@${{ matrix.yarn }}

      - name: Start Xvfb (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Build
        env:
          ROUTER_targetOrigin: "https://kiegroup.github.io"
          ROUTER_relativePath: "kogito-online/editors/${{ steps.prerelease-tag.outputs.tag }}/"
          DOWNLOAD_HUB_linuxUrl: "https://github.com/kiegroup/kogito-tooling/releases/download/${{ steps.prerelease-tag.outputs.tag }}/business_modeler_hub_preview_linux_${{ steps.prerelease-tag.outputs.tag }}.zip"
          DOWNLOAD_HUB_macOsUrl: "https://github.com/kiegroup/kogito-tooling/releases/download/${{ steps.prerelease-tag.outputs.tag }}/business_modeler_hub_preview_macos_${{ steps.prerelease-tag.outputs.tag }}.zip"
          DOWNLOAD_HUB_windowsUrl: "https://github.com/kiegroup/kogito-tooling/releases/download/${{ steps.prerelease-tag.outputs.tag }}/business_modeler_hub_preview_windows_${{ steps.prerelease-tag.outputs.tag }}.zip"
          DISPLAY: ":99.0"
        run: yarn run init && yarn run build:prod

      - name: Checkout "kogito-online" (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/checkout@v1
        with:
          repository: kiegroup/kogito-online
          ref: gh-pages

      # For this step to work properly, you have to add the owner of KOGITO_TOOLING_BOT_TOKEN as collaborator on 'kogito-online'.
      - name: Update "kogito-online" resources (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        env:
          KOGITO_ONLINE_CHROME_EXT_DIR: ./editors/${{ steps.prerelease-tag.outputs.tag }}
          KOGITO_ONLINE_EDITOR_STAGING_DIR: ./online-editor-staging
        run: |
          cd ../kogito-online
          rm -rf $KOGITO_ONLINE_CHROME_EXT_DIR
          mkdir -p $KOGITO_ONLINE_CHROME_EXT_DIR
          cp -r ../kogito-tooling/packages/kie-bc-editors-unpacked/bpmn $KOGITO_ONLINE_CHROME_EXT_DIR/
          cp -r ../kogito-tooling/packages/kie-bc-editors-unpacked/dmn $KOGITO_ONLINE_CHROME_EXT_DIR/
          cp -r ../kogito-tooling/packages/chrome-extension-pack-kogito-kie-editors/dist/envelope $KOGITO_ONLINE_CHROME_EXT_DIR/
          rm -rf $KOGITO_ONLINE_EDITOR_STAGING_DIR
          cp -r ../kogito-tooling/packages/online-editor/dist $KOGITO_ONLINE_EDITOR_STAGING_DIR
          git config --global user.email "kogito-tooling-bot@gmail.com"
          git config --global user.name "Kogito Tooling Bot (kiegroup)"
          git add . && git commit -m "${{ steps.prerelease-tag.outputs.tag }} resources" || echo "No changes."
          git remote set-url --push origin https://${{ secrets.KOGITO_TOOLING_BOT_TOKEN }}@github.com/kiegroup/kogito-online
          git push origin gh-pages
          cd -

      - name: Create Release (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prerelease-tag.outputs.tag }}
          release_name: ${{ steps.prerelease-tag.outputs.tag }} (alpha)
          draft: true
          prerelease: true

      - name: Upload VSCode Extension (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        id: upload-vscode-extension
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packages/vscode-extension-pack-kogito-kie-editors/dist/vscode_extension_kogito_kie_editors_${{ steps.prerelease-tag.outputs.tag }}.vsix
          asset_name: vscode_extension_kogito_kie_editors_${{ steps.prerelease-tag.outputs.tag }}.vsix
          asset_content_type: application/zip

      - name: Upload Chrome Extension (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        id: upload-chrome-extension
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ steps.prerelease-tag.outputs.tag }}.zip
          asset_name: chrome_extension_kogito_kie_editors_${{ steps.prerelease-tag.outputs.tag }}.zip
          asset_content_type: application/zip

      - name: Upload Desktop App for Linux (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        id: upload-desktop-app-linux
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packages/desktop/out/Business Modeler Preview-linux-x64
          asset_name: Business Modeler Preview-linux-x64.zip
          asset_content_type: application/zip

      - name: Upload Desktop App for macOS (macOS only)
        if: matrix.os == 'macos-latest'
        id: upload-desktop-app-macos
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packages/desktop/out/Business Modeler Preview-darwin-x64
          asset_name: Business Modeler Preview-darwin-x64.zip
          asset_content_type: application/zip

      - name: Upload Desktop App for Windows (Windows only)
        if: matrix.os == 'windows-latest'
        id: upload-desktop-app-windows
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./packages/desktop/out/Business Modeler Preview-windows-x64"
          asset_name: "Business Modeler Preview-windows-x64.zip"
          asset_content_type: application/zip

      - name: Upload Hub App for Linux (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        id: upload-hub-app-linux
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packages/hub/out/Business Modeler Hub Preview-linux-x64
          asset_name: Business Modeler Hub Preview-linux-x64.zip
          asset_content_type: application/zip

      - name: Upload Hub App for macOS (macOS only)
        if: matrix.os == 'macos-latest'
        id: upload-hub-app-macos
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packages/hub/out/Business Modeler Hub Preview-darwin-x64
          asset_name: Business Modeler Hub Preview-darwin-x64.zip
          asset_content_type: application/zip

      - name: Upload Hub App for Windows (Windows only)
        if: matrix.os == 'windows-latest'
        id: upload-hub-app-windows
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./packages/hub/out/Business Modeler Hub Preview-windows-x64"
          asset_name: "Business Modeler Hub Preview-windows-x64.zip"
          asset_content_type: application/zip
