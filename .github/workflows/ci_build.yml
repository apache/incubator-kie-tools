name: "CI :: Build"

on:
  push:
    branches: [main]
  pull_request:
    branches: ["**"]
    types: [opened, reopened, ready_for_review, synchronize]

concurrency:
  group: ${{ github.event.pull_request && format('ci-build-full-pr-{0}', github.event.pull_request.number) || format('ci-build-full-push-main-{0}', github.sha) }}
  cancel-in-progress: true

jobs:
  run:
    environment: ci
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Support longpaths"
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3

      - name: "Checkout @ Simulated squashed-merge if PR"
        id: checkout_pr
        uses: ./.github/actions/checkout-pr
        with:
          ref: ${{ github.base_ref }}

      - name: "Setup CI patterns"
        id: ci_patterns
        uses: ./.github/actions/setup-ci-patterns

      - name: "Setup build mode {none,full,partial}"
        id: setup_build_mode
        shell: bash
        run: |
          export CHANGED_SOURCE_PATHS=($(eval "git diff --name-only ${{ steps.checkout_pr.outputs.base_sha }} ${{ steps.checkout_pr.outputs.head_sha }} -- ${{ steps.ci_patterns.outputs.non_source_files_patterns_for_git_diff }}"))
          echo "Changed source paths:"
          echo ${#CHANGED_SOURCE_PATHS[@]}
          printf '%s\n' "${CHANGED_SOURCE_PATHS[@]}"

          export CHANGED_SOURCE_PATHS_IN_ROOT=($(printf '%s\n' "${CHANGED_SOURCE_PATHS[@]}" | grep -v -e "^packages" -e "^examples"))
          echo "Changed source paths in root:"
          echo ${#CHANGED_SOURCE_PATHS_IN_ROOT[@]}
          printf '%s\n' "${CHANGED_SOURCE_PATHS_IN_ROOT[@]}"

          if [ ${#CHANGED_SOURCE_PATHS[@]} -eq 0 ]; then
            echo 'No source files changed; `CI :: Build` (none) will run.'
            echo "mode=none" >> $GITHUB_OUTPUT
          elif [ ! ${{ github.event.pull_request }} ]; then
            echo 'Push to the `main` branch happened; `CI :: Build` (full) will run.'
            echo "mode=full" >> $GITHUB_OUTPUT
          elif [ ${#CHANGED_SOURCE_PATHS_IN_ROOT[@]} -eq 0 ]; then
            echo 'No source files changed in root; `CI :: Build` (partial) will run.'
            echo "mode=partial" >> $GITHUB_OUTPUT
          else
            echo 'Source files changed in root; `CI :: Build` (full) will run.'
            echo "mode=full" >> $GITHUB_OUTPUT
          fi

          echo "Done"

      - name: "Start telemetry service (`main` only)"
        if: steps.setup_build_mode.outputs.mode != 'none' && !github.event.pull_request
        uses: runforesight/workflow-telemetry-action@7af88337f61e495d20c0ffa970cf7691532af740

      - name: "Setup environment"
        if: steps.setup_build_mode.outputs.mode != 'none'
        uses: ./.github/actions/setup-env

      - name: "FULL → Bootstrap"
        if: steps.setup_build_mode.outputs.mode == 'full'
        uses: ./.github/actions/bootstrap

      - name: "FULL → Build"
        if: steps.setup_build_mode.outputs.mode == 'full'
        env:
          WEBPACK__minimize: "false"
          WEBPACK__tsLoaderTranspileOnly: "false"
          KIE_TOOLS_BUILD__runLinters: "true"
          KIE_TOOLS_BUILD__runTests: "true"
          KIE_TOOLS_BUILD__runIntegrationTests: ${{ runner.os == 'Linux' }}
          KIE_TOOLS_BUILD__buildContainerImages: "true"
          KIE_TOOLS_BUILD__buildExamples: "true"
          KIE_TOOLS_BUILD__ignoreTestFailures: ${{ !github.event.pull_request }}
          KIE_TOOLS_BUILD__ignoreIntegrationTestFailures: ${{ !github.event.pull_request }}
          DISPLAY: ":99.0"
          START_SERVER_AND_TEST_INSECURE: "true"
        run: |
          pnpm -r --workspace-concurrency=1 build:prod

      - name: "PARTIAL → Bootstrap"
        if: steps.setup_build_mode.outputs.mode == 'partial'
        uses: ./.github/actions/bootstrap
        with:
          pnpm_filter_string: -F "...[${{ steps.checkout_pr.outputs.base_sha }}]..."

      - name: "PARTIAL → Build dependencies"
        if: steps.setup_build_mode.outputs.mode == 'partial'
        shell: bash
        env:
          KIE_TOOLS_BUILD__buildContainerImages: "true"
          KIE_TOOLS_BUILD__buildExamples: "true"
        run: |
          export ALL_DEPENDENCIES_FILTER=$(pnpm -F="...[${{ steps.checkout_pr.outputs.base_sha }}]" exec bash -c 'echo -n " -F=$(jq --raw-output .name package.json)^..."')
          export CHANGED_PKGS_EXCLUSION_FILTER=$(pnpm -F="...[${{ steps.checkout_pr.outputs.base_sha }}]" exec bash -c 'echo -n " -F='"'"'!$(jq --raw-output .name package.json)'"'"'"')
          echo $ALL_DEPENDENCIES_FILTER
          echo $CHANGED_PKGS_EXCLUSION_FILTER
          eval "pnpm $ALL_DEPENDENCIES_FILTER $CHANGED_PKGS_EXCLUSION_FILTER build:dev"

      - name: "PARTIAL → Build changed and dependents"
        if: steps.setup_build_mode.outputs.mode == 'partial'
        env:
          WEBPACK__minimize: "false"
          KIE_TOOLS_BUILD__runLinters: "true"
          KIE_TOOLS_BUILD__runTests: "true"
          KIE_TOOLS_BUILD__runIntegrationTests: ${{ runner.os == 'Linux' }}
          KIE_TOOLS_BUILD__buildContainerImages: "true"
          KIE_TOOLS_BUILD__buildExamples: "true"
          DISPLAY: ":99.0"
          START_SERVER_AND_TEST_INSECURE: "true"
        run: |
          pnpm -F "...[${{ steps.checkout_pr.outputs.base_sha }}]" --workspace-concurrency=1 build:prod

      - name: "Check tests result (`main` only)"
        if: always() && !cancelled() && steps.setup_build_mode.outputs.mode != 'none' && !github.event.pull_request
        uses: mikepenz/action-junit-report@ab07dd7abefd456d92ecbeb22f81392fafe3d528
        with:
          check_name: "-"
          annotate_only: true
          fail_on_failure: true
          report_paths: |
            ${{ steps.ci_patterns.outputs.tests_reports_patterns }}
            ${{ steps.ci_patterns.outputs.integration_tests_reports_patterns }}

      - name: "Check hanging uncommitted files (you should commit those!)"
        if: always() && !cancelled() && steps.setup_build_mode.outputs.mode != 'none'
        shell: bash
        run: |
          git diff
          [ "0" == "$(git diff | wc -l | tr -d ' ')" ]

      - name: "Upload reports and artifacts"
        if: always() && !cancelled() && steps.setup_build_mode.outputs.mode != 'none'
        uses: ./.github/actions/upload-ci-reports-and-artifacts

      - name: "Upload integration tests results to Buildkite (`main` only)"
        if: always() && !cancelled() && steps.setup_build_mode.outputs.mode != 'none' && !github.event.pull_request
        shell: bash
        env:
          BUILDKITE_ANALYTICS_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}
          BUILDKITE_BRANCH: ${{ github.ref_name }}
          BUILDKITE_MESSAGE: ${{ github.event.commits[0].message }}
        run: |
          eval "find -P * -type f ${{ steps.ci_patterns.outputs.integration_tests_reports_patterns_for_find }}" | xargs -I{} curl -X POST \
            -H "Authorization: Token token=\"$BUILDKITE_ANALYTICS_TOKEN\"" \
            -F "format=junit" \
            -F "data=@{}" \
            -F "run_env[CI]=github_actions" \
            -F "run_env[key]=$GITHUB_ACTION-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ATTEMPT" \
            -F "run_env[number]=$GITHUB_RUN_NUMBER" \
            -F "run_env[branch]=$BUILDKITE_BRANCH" \
            -F "run_env[commit_sha]=$GITHUB_SHA" \
            -F "run_env[message]=$BUILDKITE_MESSAGE" \
            -F "run_env[url]=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            https://analytics-api.buildkite.com/v1/uploads

      - name: "Print storage usage (after build)"
        shell: bash
        run: |
          du -sh .
