name: "Publish jitexecutor-native"

on:
  workflow_dispatch:
    inputs:
      kogito_runtime_version:
        description: "Kogito Runtime version"
        required: true
      npm_version:
        description: "NPM Version"
        required: true
  pull_request:
    paths:
      - ".github/supporting-files/publish_jitexecutor_native"
      - ".github/workflows/publish_jitexecutor_native.yml"

jobs:
  build_jitexecutor_native_binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: "Checkout kogito-apps"
        uses: actions/checkout@v3
        with:
          repository: kiegroup/kogito-apps
          ref: ${{ github.event.inputs.kogito_runtime_version }}

      - name: "Set up Maven"
        uses: stCarolas/setup-maven@07fbbe97d97ef44336b7382563d66743297e442f
        with:
          maven-version: 3.8.6

      - name: "Set up JDK 11"
        if: runner.os != 'Windows'
        uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc
        with:
          java-version: "11"
          distribution: "zulu"

      - name: "Set long paths for Windows"
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: "Build macOS"
        if: runner.os == 'macOS'
        run: |
          brew install make && \
          wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java11-darwin-amd64-22.3.0.tar.gz && \
          tar -xzf graalvm-ce-java11-darwin-amd64-22.3.0.tar.gz && \
          sudo mv graalvm-ce-java11-22.3.0 /Library/Java/JavaVirtualMachines/graalvm-ce-java11-darwin-amd64-22.3.0
          export PATH=/Library/Java/JavaVirtualMachines/graalvm-ce-java11-darwin-amd64-22.3.0/Contents/Home/bin:$PATH && \
          export GRAALVM_HOME=/Library/Java/JavaVirtualMachines/graalvm-ce-java11-darwin-amd64-22.3.0/Contents/Home && \
          gu install native-image && \
          mvn clean package -B -ntp -DskipTests -f ./jitexecutor && mvn clean package -B -ntp -DskipTests -Pnative -am -f ./jitexecutor

      - name: "Build Linux"
        if: runner.os == 'Linux'
        run: |
          sudo apt update && \
          sudo apt install -y \
          build-essential \
          libgtk-3-dev \
          libappindicator3-dev \
          gir1.2-appindicator3-0.1 && \
          mvn clean package -B -ntp -DskipTests -f ./jitexecutor && mvn clean package -B -ntp -DskipTests -Pnative -am -f ./jitexecutor

      - name: "Configure Pagefile"
        if: runner.os == 'Windows'
        uses: al-cheb/configure-pagefile-action@86589fd789a4de3e62ba628dda2cb10027b66d67
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "C:"

      - name: "Setup MSCV"
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@4734b1a57b8b82fa2e5f89658726b3d419638b3c

      - name: "Setup MSBUILD"
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1

      - name: "Setup GraalVM"
        if: runner.os == 'Windows'
        uses: ayltai/setup-graalvm@86a8e4b2b8ba8ac3e689673d56184de958ce5add
        with:
          java-version: 11
          graalvm-version: 22.3.0
          native-image: true

      - name: "Build Windows"
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          mvn clean package -B -ntp -DskipTests -f ./jitexecutor && mvn clean package -B -ntp -DskipTests -Pnative -am -f ./jitexecutor

      - name: "Upload JIT Executor binary"
        uses: actions/upload-artifact@v3
        with:
          name: jitexecutor_${{ runner.os }}
          path: ./jitexecutor/jitexecutor-runner/target/jitexecutor-runner-${{ github.event.inputs.kogito_runtime_version }}-run*

  pack_and_publish:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build_jitexecutor_native_binaries]
    steps:
      - name: "Checkout kie-tools"
        uses: actions/checkout@v3

      - name: "Download Windows binary"
        uses: actions/download-artifact@v2
        with:
          name: jitexecutor_Windows
          path: ./.github/supporting-files/publish_jitexecutor_native/dist/win32

      - name: "Download macOS binary"
        uses: actions/download-artifact@v2
        with:
          name: jitexecutor_macOS
          path: ./.github/supporting-files/publish_jitexecutor_native/dist/darwin

      - name: "Download Linux binary"
        uses: actions/download-artifact@v2
        with:
          name: jitexecutor_Linux
          path: ./.github/supporting-files/publish_jitexecutor_native/dist/linux

      - name: "Pack and publish"
        working-directory: ./.github/supporting-files/publish_jitexecutor_native
        env:
          NPM_TOKEN: ${{ secrets.KIEGROUP_NPM_TOKEN }}
        run: |
          mv ./dist/linux/jitexecutor-runner-${{ github.event.inputs.kogito_runtime_version }}-runner ./dist/linux/jitexecutor
          mv ./dist/darwin/jitexecutor-runner-${{ github.event.inputs.kogito_runtime_version }}-runner ./dist/darwin/jitexecutor
          mv ./dist/win32/jitexecutor-runner-${{ github.event.inputs.kogito_runtime_version }}-runner.exe ./dist/win32/jitexecutor.exe
          npm version ${{ github.event.inputs.npm_version }}
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm publish --access public
