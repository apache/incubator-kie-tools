name: "CI :: Integration Tests"

on:
  pull_request:
    branches: "**"

env:
  WEBPACK_minimize: "false"
  WEBPACK_TS_LOADER_transpileOnly: "true"
  KOGITO_TOOLING_BUILD_lint: "false"
  KOGITO_TOOLING_BUILD_test: "false"
  ROUTER_targetOrigin: "https://localhost:9000"
  ROUTER_relativePath: ""
  ONLINEEDITOR_url: "http://localhost:9001"

jobs:
  chrome-extension-tests-it:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16.2.0]
        yarn: [1.22.10]
        lerna: [4.0.0]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-chrome-ext-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-chrome-ext-yarn-

      - name: Setup Yarn and Lerna
        run: |
          npm install -g lerna@${{ matrix.lerna }} yarn@${{ matrix.yarn }}
          yarn config set network-timeout 1000000

      - name: Start Xvfb (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Download dependencies
        run: yarn bootstrap

      - name: Build repository
        run: |
          yarn lerna run build:prod --scope=chrome-extension-pack-kogito-kie-editors --scope=@kogito-tooling/online-editor --include-dependencies --stream
          yarn lerna run build:dev --scope=chrome-extension-pack-kogito-kie-editors --stream # Use manifest.dev.json.

      - name: Increase inotify watches
        if: matrix.os == 'ubuntu-latest'
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      # Starts and waits for servers and runs integrations tests
      - name: Run integration tests
        env:
          DISPLAY: ":99.0"
        run: |
          cd packages/online-editor && yarn start &
          cd packages/chrome-extension-pack-kogito-kie-editors && yarn serve-envelope &
          sleep 20  
          cd packages/chrome-extension-pack-kogito-kie-editors && yarn test:it

      - name: Archive it test screenshots
        if: success() || failure()
        uses: actions/upload-artifact@v1
        with:
          name: chrome-extension-it-tests-screenshots-${{ matrix.os }}
          path: packages/chrome-extension-pack-kogito-kie-editors/screenshots

      - name: Archive it test logs
        if: success() || failure()
        uses: actions/upload-artifact@v1
        with:
          name: chrome-extension-it-tests-logs-${{ matrix.os }}
          path: packages/chrome-extension-pack-kogito-kie-editors/logs

  online-editor-tests-it:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16.2.0]
        yarn: [1.22.10]
        lerna: [4.0.0]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-online-editor-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-online-editor-yarn-

      - name: Setup Yarn and Lerna
        run: |
          npm install -g lerna@${{ matrix.lerna }} yarn@${{ matrix.yarn }}
          yarn config set network-timeout 1000000

      - name: Download dependencies
        run: yarn bootstrap

      - name: Increase inotify watches
        if: matrix.os == 'ubuntu-latest'
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Build repository
        run: yarn lerna run build:prod --scope '@kogito-tooling/online-editor' --include-dependencies --stream

      - name: Run integration tests
        run: yarn lerna run test:it --scope '@kogito-tooling/online-editor' --stream

      - name: Archive it test screenshots
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: online-editor-it-tests-screenshots-${{ matrix.os }}
          path: packages/online-editor/it-tests/screenshots

      - name: Archive it test videos
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: online-editor-it-tests-videos-${{ matrix.os }}
          path: packages/online-editor/it-tests/videos

  pmml-editor-tests-it:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16.2.0]
        yarn: [1.22.10]
        lerna: [4.0.0]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pmml-editoryarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-pmml-editoryarn-

      - name: Setup Yarn and Lerna
        run: |
          npm install -g lerna@${{ matrix.lerna }} yarn@${{ matrix.yarn }}
          yarn config set network-timeout 1000000

      - name: Download dependencies
        run: yarn bootstrap

      - name: Increase inotify watches
        if: matrix.os == 'ubuntu-latest'
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Build repository
        run: yarn lerna run build:prod --scope '@kogito-tooling/pmml-editor' --include-dependencies --stream

      - name: Run integration tests
        run: yarn lerna run test:it --scope '@kogito-tooling/pmml-editor' --stream

      - name: Archive it test screenshots
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: pmml-editor-it-tests-screenshots-${{ matrix.os }}
          path: packages/pmml-editor/it-tests/screenshots

      - name: Archive it test videos
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: pmml-editor-it-tests-videos-${{ matrix.os }}
          path: packages/pmml-editor/it-tests/videos

  desktop-tests-it:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: [16.2.0]
        yarn: [1.22.10]
        lerna: [4.0.0]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-desktop-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-desktop-yarn-

      - name: Setup Yarn and Lerna
        run: |
          npm install -g lerna@${{ matrix.lerna }} yarn@${{ matrix.yarn }}
          yarn config set network-timeout 1000000

      - name: Start Xvfb (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Download dependencies
        run: yarn bootstrap

      - name: Increase inotify watches
        if: matrix.os == 'ubuntu-latest'
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Build desktop package
        run: yarn lerna run build:prod --scope '@kogito-tooling/desktop' --include-dependencies --stream

      - name: Run integration tests
        env:
          DISPLAY: ":99.0"
        run: yarn lerna run test:it --scope '@kogito-tooling/desktop' --stream

  kie-editors-standalone-tests-it:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16.2.0]
        yarn: [1.22.10]
        lerna: [4.0.0]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-standalone-editors-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-standalone-editors-yarn-

      - name: Setup Yarn and Lerna
        run: |
          npm install -g lerna@${{ matrix.lerna }} yarn@${{ matrix.yarn }}
          yarn config set network-timeout 1000000

      - name: Start Xvfb (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Download dependencies
        run: yarn bootstrap

      - name: Build repository
        run: yarn lerna run build:prod --scope '@kogito-tooling/kie-editors-standalone' --include-dependencies --stream

      - name: Run tests
        run: yarn lerna run test:it --scope '@kogito-tooling/kie-editors-standalone' --stream

      - name: Archive test results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: junit-kie-editors-standalone-${{ matrix.os }}.xml
          path: "packages/kie-editors-standalone/it-tests/results/junit.xml"

      - name: Archive test screenshots
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: kie-editors-standalone-it-tests-screenshots-${{ matrix.os }}
          path: packages/kie-editors-standalone/it-tests/cypress/screenshots

      - name: Archive test videos
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: kie-editors-standalone-it-tests-videos-${{ matrix.os }}
          path: packages/kie-editors-standalone/it-tests/cypress/videos

  vscode-extension-tests-it:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16.2.0]
        yarn: [1.22.10]
        lerna: [4.0.0]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-vscode-ext-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-vscode-ext-yarn-

      - name: Setup Yarn and Lerna
        run: |
          npm install -g lerna@${{ matrix.lerna }} yarn@${{ matrix.yarn }}
          yarn config set network-timeout 1000000

      - name: Start Xvfb (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Download dependencies
        run: yarn bootstrap

      - name: Build repository
        run: yarn lerna run build:prod --scope 'vscode-extension-pack-kogito-kie-editors' --include-dependencies --stream

      - name: Run tests
        run: yarn lerna run test:it --scope 'vscode-extension-pack-kogito-kie-editors' --stream
        env:
          DISPLAY: ":99.0"

      - name: Archive test results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: junit-kie-editors-vscode-${{ matrix.os }}.xml
          path: "packages/vscode-extension-pack-kogito-kie-editors/it-tests/results/junit.xml"
