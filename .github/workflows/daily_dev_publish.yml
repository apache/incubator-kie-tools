name: "Daily dev :: Publish"

on:
  schedule:
    - cron: "0 2 * * *" # 2am UTC everyday
  workflow_dispatch:
  pull_request:
    paths:
      - ".github/workflows/daily_dev_publish.yml"

concurrency:
  group: ${{ github.event.pull_request && format('daily-dev-publish-pr-{0}', github.event.pull_request.number) || format('daily-dev-publish-ref-{0}', github.ref_name) }}
  cancel-in-progress: true

env:
  TMPDIR: "${{ github.workspace }}/kie-tools/tmp"

jobs:
  build:
    if: github.repository == 'kiegroup/kie-tools'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      KIE_SANDBOX_EXTENDED_SERVICES_VERSION: "0.0.0"
      KIE_TOOLS_BUILD__buildContainerImages: ${{ matrix.os != 'windows-latest' }}
      KIE_TOOLS_BUILD__runLinters: "false"
      KIE_TOOLS_BUILD__runTests: "false"
      KIE_TOOLS_BUILD__runEndToEndTests: "false"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry: "quay.io"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__account: "kie-tools"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__name: "dmn-dev-deployment-base-image"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags: "daily-dev"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageRegistry: "quay.io"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageAccount: "kie-tools"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageName: "dmn-dev-deployment-base-image"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageTag: "daily-dev"
      ONLINE_EDITOR__corsProxyUrl: "https://daily-dev-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"
      EXTENDED_SERVICES__kieSandboxUrl: "https://kiegroup.github.io/kogito-online/dev"

      KIE_SANDBOX__imageRegistry: "quay.io"
      KIE_SANDBOX__imageAccount: "kie-tools"
      KIE_SANDBOX__imageName: "kie-sandbox-image"
      KIE_SANDBOX__imageBuildTags: "daily-dev"

      KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry: "quay.io"
      KIE_SANDBOX_EXTENDED_SERVICES__imageAccount: "kie-tools"
      KIE_SANDBOX_EXTENDED_SERVICES__imageName: "kie-sandbox-extended-services-image"
      KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags: "daily-dev"

      CORS_PROXY_IMAGE__imageRegistry: "quay.io"
      CORS_PROXY_IMAGE__imageAccount: "kie-tools"
      CORS_PROXY_IMAGE__imageName: "cors-proxy-image"
      CORS_PROXY_IMAGE__imageBuildTags: "daily-dev"

      OPENSHIFT_NAMESPACE: "kie-sandbox"
      OPENSHIFT_PART_OF: "daily-dev-kie-sandbox-app"
      DEPLOY_TAG: "daily-dev"

      DASHBUILDER__viewerImageRegistry: "quay.io"
      DASHBUILDER__viewerImageAccount: "kie-tools"
      DASHBUILDER__viewerImageName: "dashbuilder-viewer-image"
      DASHBUILDER__viewerImageBuildTags: "daily-dev"
      SERVERLESS_LOGIC_WEB_TOOLS__dashbuilderViewerImageTag: "daily-dev"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName: "serverless-logic-web-tools-swf-builder-image"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageTag: "daily-dev"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags: "daily-dev"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName: "serverless-logic-web-tools-base-builder-image"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageTag: "daily-dev"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags: "daily-dev"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName: "serverless-logic-web-tools-swf-dev-mode-image"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageTag: "daily-dev"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags: "daily-dev"
      SERVERLESS_LOGIC_WEB_TOOLS__corsProxyUrl: "https://daily-dev-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"

    steps:
      - name: "Support longpaths (Windows only)"
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: "Clone kie-tools"
        uses: actions/checkout@v3
        with:
          path: kie-tools

      # This bash script will set an output version for this step. It can be used with steps.version.outputs.version
      - name: "Output version"
        id: version
        run: |
          cd kie-tools
          echo "version=$(node -e "console.log(require('./package.json').version);")" >> $GITHUB_OUTPUT
        shell: bash

      - name: "Cache Maven packages"
        if: github.event_name != 'pull_request'
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-daily-dev-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-daily-dev-m2

      - name: "Setup environment"
        uses: ./kie-tools/.github/actions/setup-env
        with:
          working_dir: kie-tools

      - name: "Bootstrap"
        id: bootstrap
        uses: ./kie-tools/.github/actions/bootstrap
        with:
          working_dir: kie-tools

      - name: "Build kie-tools"
        env:
          WEBPACK__minimize: "true"
          WEBPACK__tsLoaderTranspileOnly: "false"
          CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
          CHROME_EXTENSION__routerRelativePath: "kogito-online/dev/editors/"
          SWF_CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
          SWF_CHROME_EXTENSION__routerRelativePath: "kogito-online/dev/editors/"
          ONLINE_EDITOR__extendedServicesDownloadUrlLinux: "https://github.com/kiegroup/kie-tools/releases/download/${{ env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION }}/kie_sandbox_extended_services_linux_${{ env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION }}.tar.gz"
          ONLINE_EDITOR__extendedServicesDownloadUrlMacOs: "https://github.com/kiegroup/kie-tools/releases/download/${{ env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION }}/kie_sandbox_extended_services_macos_${{ env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION }}.dmg"
          ONLINE_EDITOR__extendedServicesDownloadUrlWindows: "https://github.com/kiegroup/kie-tools/releases/download/${{ env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION }}/kie_sandbox_extended_services_windows_${{ env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION }}.exe"
          ONLINE_EDITOR__extendedServicesCompatibleVersion: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION }}"
          ONLINE_EDITOR__buildInfo: "${{ steps.version.outputs.version }} (daily-dev) @ ${{ github.sha }}"
          DISPLAY: ":99.0"
          SERVERLESS_LOGIC_WEB_TOOLS__buildInfo: "${{ steps.version.outputs.version }} (daily-dev) @ ${{ github.sha }}"
        run: |
          cd kie-tools
          pnpm -r build:prod

      - name: "Upload Serverless Workflow VS Code Extension - KIE (Ubuntu only)"
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: serverless-workflow-vscode-extension
          path: kie-tools/packages/serverless-workflow-vscode-extension/dist/serverless_workflow_vscode_extension_${{ steps.version.outputs.version }}.vsix

      - name: "Upload Dashbuilder VS Code Extension (Ubuntu only)"
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: vscode-extension-dashbuilder-editor
          path: kie-tools/packages/vscode-extension-dashbuilder-editor/dist/vscode_extension_dashbuilder_editor_${{ steps.version.outputs.version }}.vsix

      - name: "Upload VS Code Extension (dev) (Ubuntu only)"
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: vscode-extension
          path: kie-tools/packages/kie-editors-dev-vscode-extension/dist/kie_editors_dev_vscode_extension_${{ steps.version.outputs.version }}.vsix

      - name: "Upload Chrome Extension for KIE Editors (Ubuntu only)"
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: chrome-extension
          path: kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ steps.version.outputs.version }}.zip

      - name: "Upload Chrome Extension for Serverless Workflow Editor (Ubuntu only)"
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: swf-chrome-extension
          path: kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/chrome_extension_serverless_workflow_editor_${{ steps.version.outputs.version }}.zip

      - name: "Load docker built images to podman local registry"
        if: runner.os == 'Linux'
        run: docker images --format docker-daemon:{{.Repository}}:{{.Tag}} | grep -e '${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}' -e '${{ env.CORS_PROXY_IMAGE__imageName }}' -e '${{ env.KIE_SANDBOX__imageName }}' | grep -v '<none>' | xargs podman pull

      - name: "Push dmn-dev-deployment-base-image to quay.io (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__name }}"
          tags: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags }}"
          registry: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry }}/${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__account }}"
          username: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__account }}"
          password: "${{ secrets.QUAY_REGISTRY_PASSWORD }}"

      - name: "Clean up dmn-dev-deployment-base-image (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          cd kie-tools
          podman image ls -q --filter reference=${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__name }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F dmn-dev-deployment-base-image cleanup
          cd -

      - name: "Push kie-sandbox-extended-services-image to quay.io (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}"
          tags: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          username: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          password: "${{ secrets.QUAY_REGISTRY_PASSWORD }}"

      - name: "Deploy kie-sandbox-extended-services-image to OpenShift (Ubuntu only)"
        id: deploy_kie_sandbox_extended_services_image
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_tag: ${{ env.DEPLOY_TAG }}
          image_url: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}:${{ env.DEPLOY_TAG }}"
          app_name: "daily-dev-kie-sandbox-extended-services"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_icon: "golang"

      - name: "Clean up kie-sandbox-extended-services-image (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          cd kie-tools
          docker image ls -q --filter reference=${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }} | xargs docker rmi
          podman image ls -q --filter reference=${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F kie-sandbox-extended-services-image cleanup
          cd -

      - name: "Push cors-proxy-image to quay.io (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.CORS_PROXY_IMAGE__imageName }}"
          tags: "${{ env.CORS_PROXY_IMAGE__imageBuildTags }}"
          registry: "${{ env.CORS_PROXY_IMAGE__imageRegistry }}/${{ env.CORS_PROXY_IMAGE__imageAccount }}"
          username: "${{ env.CORS_PROXY_IMAGE__imageAccount }}"
          password: "${{ secrets.QUAY_REGISTRY_PASSWORD }}"

      - name: "Deploy cors-proxy-image to OpenShift (Ubuntu only)"
        id: deploy_cors_proxy_image
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_tag: ${{ env.DEPLOY_TAG }}
          image_url: "${{ env.CORS_PROXY_IMAGE__imageRegistry }}/${{ env.CORS_PROXY_IMAGE__imageAccount }}/${{ env.CORS_PROXY_IMAGE__imageName }}:${{ env.DEPLOY_TAG }}"
          app_name: "daily-dev-cors-proxy"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_icon: "nodejs"

      - name: "Clean up cors-proxy-image (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          cd kie-tools
          docker image ls -q --filter reference=${{ env.CORS_PROXY_IMAGE__imageRegistry }}/${{ env.CORS_PROXY_IMAGE__imageAccount }}/${{ env.CORS_PROXY_IMAGE__imageName }} | xargs docker rmi
          podman image ls -q --filter reference=${{ env.CORS_PROXY_IMAGE__imageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F cors-proxy-image cleanup
          cd -

      - name: "Push kie-sandbox-image to quay.io (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX__imageName }}"
          tags: "${{ env.KIE_SANDBOX__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}"
          username: "${{ env.KIE_SANDBOX__imageAccount }}"
          password: "${{ secrets.QUAY_REGISTRY_PASSWORD }}"

      - name: "Prepare environment variables for OpenShift deployment (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "KIE_SANDBOX_EXTENDED_SERVICES_URL=${{ steps.deploy_kie_sandbox_extended_services_image.outputs.route_url }}" >> deployment.env
          echo "KIE_SANDBOX_CORS_PROXY_URL=${{ steps.deploy_cors_proxy_image.outputs.route_url }}" >> deployment.env

      - name: "Deploy kie-sandbox-image to OpenShift (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_tag: ${{ env.DEPLOY_TAG }}
          image_url: "${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}/${{ env.KIE_SANDBOX__imageName }}:${{ env.DEPLOY_TAG }}"
          app_name: "daily-dev-kie-sandbox"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_envvars_file_path: ./deployment.env
          deployment_icon: "js"

      - name: "Clean up kie-sandbox-image (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          cd kie-tools
          docker image ls -q --filter reference=${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}/${{ env.KIE_SANDBOX__imageName }} | xargs docker rmi
          podman image ls -q --filter reference=${{ env.KIE_SANDBOX__imageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F kie-sandbox-image cleanup
          cd -

      - name: "Push serverless-logic-web-tools-swf-builder-image to quay.io (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount }}"
          password: "${{ secrets.QUAY_REGISTRY_PASSWORD }}"

      - name: "Clean up serverless-logic-web-tools-swf-builder-image (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          cd kie-tools
          podman image ls -q --filter reference=${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F serverless-logic-web-tools-swf-builder-image cleanup
          cd -

      - name: "Push serverless-logic-web-tools-base-builder-image to quay.io (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount }}"
          password: "${{ secrets.QUAY_REGISTRY_PASSWORD }}"

      - name: "Clean up serverless-logic-web-tools-base-builder-image (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          cd kie-tools
          podman image ls -q --filter reference=${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F serverless-logic-web-tools-base-builder-image cleanup
          cd -

      - name: "Push serverless-logic-web-tools-swf-dev-mode-image to quay.io (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount }}"
          password: "${{ secrets.QUAY_REGISTRY_PASSWORD }}"

      - name: "Clean up serverless-logic-web-tools-swf-dev-mode-image (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          cd kie-tools
          podman image ls -q --filter reference=${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F serverless-logic-web-tools-swf-dev-mode-image cleanup
          cd -

      - name: "Push dashbuilder-viewer-image to quay.io (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DASHBUILDER__viewerImageName }}"
          tags: "${{ env.DASHBUILDER__viewerImageBuildTags }}"
          registry: "${{ env.DASHBUILDER__viewerImageRegistry }}/${{ env.DASHBUILDER__viewerImageAccount }}"
          username: "${{ env.DASHBUILDER__viewerImageAccount }}"
          password: "${{ secrets.QUAY_REGISTRY_PASSWORD }}"

      - name: "Clean up dashbuilder-viewer-image (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          cd kie-tools
          podman image ls -q --filter reference=${{ env.DASHBUILDER__viewerImageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F dashbuilder-viewer-image cleanup
          cd -

      - name: "Prune remaining docker/podman resources"
        if: runner.os != 'Windows'
        run: |
          if command -v docker &> /dev/null; then
            docker system prune -af
          fi
          if command -v podman &> /dev/null; then
            podman system prune --all --force
          fi

      - name: "Checkout kogito-online (Ubuntu only)"
        if: runner.os == 'Linux'
        uses: actions/checkout@v3
        with:
          token: ${{ github.event_name != 'pull_request' && secrets.KIE_TOOLS_BOT_TOKEN || secrets.GITHUB_TOKEN }}
          path: kogito-online
          repository: kiegroup/kogito-online
          ref: gh-pages

      - name: "Update kogito-online resources (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        run: |
          cd kogito-online
          rm -rf dev
          mkdir -p dev/editors
          cp -RL ../kie-tools/packages/stunner-editors/dist/dmn dev/editors/
          cp -RL ../kie-tools/packages/stunner-editors/dist/bpmn dev/editors/
          cp -RL ../kie-tools/packages/stunner-editors/dist/scesim dev/editors/
          cp -r ../kie-tools/packages/online-editor/dist/* dev/
          rm -rf dev/gwt-editors
          ln -s editors dev/gwt-editors
          git config --global user.email "kietoolsbot@gmail.com"
          git config --global user.name "KIE Tools Bot (kiegroup)"
          today=$(date -I)
          git add . && git commit -m "KIE Tools Daily Dev Build resources - $today" || echo "No changes."
          git push origin gh-pages
          cd -

      - name: "Clean up kogito-online resources (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          rm -rf kogito-online

      - name: "Checkout serverless-logic-sandbox-deployment (Ubuntu only)"
        if: runner.os == 'Linux'
        uses: actions/checkout@v3
        with:
          token: ${{ github.event_name != 'pull_request' && secrets.KIE_TOOLS_BOT_TOKEN || secrets.GITHUB_TOKEN }}
          path: serverless-logic-sandbox-deployment
          repository: kiegroup/serverless-logic-sandbox-deployment
          ref: gh-pages

      - name: "Update serverless-logic-sandbox-deployment resources (Ubuntu only)"
        if: runner.os == 'Linux' && github.event_name != 'pull_request'
        run: |
          cd serverless-logic-sandbox-deployment
          rm -rf dev
          mkdir dev
          cp -r ../kie-tools/packages/serverless-logic-web-tools/dist/* dev/
          git config --global user.email "kietoolsbot@gmail.com"
          git config --global user.name "KIE Tools Bot (kiegroup)"
          today=$(date -I)
          git add . && git commit -m "KIE Tools Daily Dev Build resources - $today" || echo "No changes."
          git push origin gh-pages
          cd -

      - name: "Clean up serverless-logic-sandbox-deployment resources (Ubuntu only)"
        if: runner.os == 'Linux'
        run: |
          rm -rf serverless-logic-sandbox-deployment
