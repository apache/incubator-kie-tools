name: "CI :: Monorepo"

on:
  pull_request:
    branches: "**"
    paths:
      - "packages/**"

jobs:
  monorepo-pr-ci:
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.base_ref }}

      - name: "Setup Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup kogito-tooling-bot"
        uses: ./.github/actions/setup-kogito-tooling-bot

      - name: "Get build information"
        id: build_info
        shell: bash
        run: |
          USER_SOURCE=${{ github.event.pull_request.head.user.login }}
          USER_TARGET=${{ github.event.pull_request.base.user.login }}
          echo ::set-output name=user_source::$USER_SOURCE
          echo ::set-output name=user_target::$USER_TARGET

      - name: "Merge Changes"
        shell: bash
        run: |
          git remote add ${{ steps.build_info.outputs.user_source }} https://github.com/${{ steps.build_info.outputs.user_source }}/kogito-tooling.git
          git fetch ${{ steps.build_info.outputs.user_source }}
          git merge --squash ${{ steps.build_info.outputs.user_source }}/${{ github.head_ref }}

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ${{ matrix.os }}

      - name: "Build dependencies"
        shell: bash
        run: |
          export REF=${{ github.event.pull_request.base.sha }} &&
          export SCOPE=$(diff <(echo "$(lerna ls --since $REF --include-dependencies --all | cut -d' ' -f1)") <(echo "$(lerna ls --since $REF  --all | cut -d' ' -f1)") --changed-group-format='%<%>' --unchanged-group-format='' | xargs -I{} echo -n ' --scope="{}"') &&
          echo $REF $SCOPE &&
          yarn run-script-if --silent --env SCOPE --eq "" \
            --then "echo No dependencies to build." \
            --else "lerna run --stream build:dev $SCOPE"

      - name: "Build changed and dependents"
        env:
          WEBPACK__minimize: "false"
          KOGITO_TOOLING_BUILD_lint: "true"
          KOGITO_TOOLING_BUILD_test: "true"
          KOGITO_TOOLING_BUILD_testIT: "true"
          DISPLAY: ":99.0"
          START_SERVER_AND_TEST_INSECURE: "true"
        run: |
          lerna run build:prod --stream --concurrency 1 --since ${{ github.event.pull_request.base.sha }}

      - name: "Check generated resources (you should commit those!)"
        shell: bash
        run: |
          git diff
          [ "0" == "$(git diff | wc -l | tr -d ' ')" ]

      - name: "Check if online-editor is being changed on the PR (Ubuntu only)"
        id: check_online_editor
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          IS_CHANGED=$([[ $(lerna ls --since ${{ github.event.pull_request.base.sha }} --scope @kogito-tooling/online-editor --all) =~ "@kogito-tooling/online-editor" ]] && echo "true" || echo "false")
          echo ::set-output name=is_changed::$IS_CHANGED

      - name: "Checkout kogito-online-staging (Ubuntu only)"
        if: matrix.os == 'ubuntu-latest' && steps.check_online_editor.outputs.is_changed == 'true'
        uses: actions/checkout@v2
        with:
          repository: ${{ steps.build_info.outputs.user_target }}/kogito-online-staging
          path: ${{ github.workspace }}/kogito-online-staging
          fetch-depth: 0
          token: ${{ secrets.KOGITO_TOOLING_BOT_TOKEN }}

      - name: "Setup kogito-tooling-bot for kogito-online-staging (Ubuntu only)"
        if: matrix.os == 'ubuntu-latest' && steps.check_online_editor.outputs.is_changed == 'true'
        uses: ./.github/actions/setup-kogito-tooling-bot
        with:
          path: kogito-online-staging

      - name: "Publish the online-editor into Staging (Ubuntu only)"
        if: matrix.os == 'ubuntu-latest' && steps.check_online_editor.outputs.is_changed == 'true'
        working-directory: ${{ github.workspace }}/kogito-online-staging
        shell: bash
        run: |
          cd pull_request
          rm -rf ${{ github.event.pull_request.number }}
          mkdir ${{ github.event.pull_request.number }}
          cp -r ${{ github.workspace }}/packages/online-editor/dist/* ${{ github.event.pull_request.number }}/
          git add . && git commit -m "Online Editor - Pull Request #${{ github.event.pull_request.number }} - Add" || echo "No changes."
          git push origin main

      - name: "Upload build artifacts"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: artifacts-${{ matrix.os }}
          if-no-files-found: warn
          path: |
            packages/*/dist
            packages/hub/out/*.zip
            packages/desktop/out/*.zip
            !packages/hub/dist
            !packages/desktop/dist

      - name: "Upload IT Tests artifacts"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: it-tests-artifacts-${{ matrix.os }}
          if-no-files-found: warn
          path: |
            packages/*/dist-it-tests
