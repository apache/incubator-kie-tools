name: "CI :: Daily dev version"

on:
  schedule:
    - cron: "0 9 * * *" # 9am UTC everyday, editors snapshots should be available by then
  workflow_dispatch:

jobs:
  build:
    if: github.repository == 'kiegroup/kogito-tooling'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Clone kogito-tooling
        uses: actions/checkout@v2
        with:
          path: kogito-tooling

      # This bash script will set an output version for this step. It can be used with steps.version.outputs.version
      - name: Output version
        id: version
        run: |
          cd kogito-tooling
          echo ::set-output name=version::$(node -e "console.log(require('./lerna.json').version);")
        shell: bash

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup environment"
        uses: ./kogito-tooling/.github/actions/setup-env
        with:
          os: ${{ matrix.os }}
          path: kogito-tooling

      - name: Build kogito-tooling
        env:
          WEBPACK__minimize: "true"
          WEBPACK__tsLoaderTranspileOnly: "false"
          CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
          CHROME_EXTENSION__routerRelativePath: "kogito-online/dev/editors/"
          ONLINE_EDITOR__downloadHubUrlLinux: "https://kiegroup.github.io/kogito-online/dev/hub_download_unsupported.txt"
          ONLINE_EDITOR__downloadHubUrlMacOs: "https://kiegroup.github.io/kogito-online/dev/hub_download_unsupported.txt"
          ONLINE_EDITOR__downloadHubUrlWindows: "https://kiegroup.github.io/kogito-online/dev/hub_download_unsupported.txt"
          ONLINE_EDITOR__kieToolingExtendedServicesDownloadUrlLinux: "https://github.com/kiegroup/kogito-tooling-go/releases/download/${{ steps.release_json.outputs.tag }}/kie_tooling_extended_services_linux_${{ steps.release_json.outputs.tag }}.tar.gz"
          ONLINE_EDITOR__kieToolingExtendedServicesDownloadUrlMacOs: "https://github.com/kiegroup/kogito-tooling-go/releases/download/${{ steps.release_json.outputs.tag }}/kie_tooling_extended_services_macos_${{ steps.release_json.outputs.tag }}.dmg"
          ONLINE_EDITOR__kieToolingExtendedServicesDownloadUrlWindows: "https://github.com/kiegroup/kogito-tooling-go/releases/download/${{ steps.release_json.outputs.tag }}/kie_tooling_extended_services_windows_${{ steps.release_json.outputs.tag }}.exe"
          ONLINE_EDITOR__kieToolingExtendedServicesCompatibleVersion: "${{ steps.release_json.outputs.tag }}"
          ONLINE_EDITOR__buildInfo: "${{ steps.version.outputs.version }} (daily-dev) @ ${{ github.sha }}"
          DISPLAY: ":99.0"
        run: |
          cd kogito-tooling
          yarn run build:prod

      - name: Upload VS Code Extension (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: vscode-extension
          path: kogito-tooling/packages/vscode-extension-pack-kogito-kie-editors/dist/vscode_extension_kogito_kie_editors_${{ steps.version.outputs.version }}.vsix

      - name: Upload Backend VS Code Extension (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: vscode-extension-backend
          path: kogito-tooling/packages/vscode-extension-backend/dist/vscode-extension-backend_${{ steps.version.outputs.version }}.vsix

      - name: Upload Chrome Extension (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: chrome-extension
          path: kogito-tooling/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ steps.version.outputs.version }}.zip

      - name: Upload Desktop App - Ubuntu (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: desktop-app-linux
          path: kogito-tooling/packages/desktop/out/Business Modeler Preview-linux-x64.tar.gz

      - name: Upload Desktop App - macOS (macOS only)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v1
        with:
          name: desktop-app-macos
          path: kogito-tooling/packages/desktop/out/Business Modeler Preview-darwin-x64.zip

      - name: Upload Desktop App - Windows (Windows only)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v1
        with:
          name: desktop-app-windows
          path: kogito-tooling/packages/desktop/out/Business Modeler Preview-win32-x64

      - name: Upload Hub App - Ubuntu (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: hub-app-linux
          path: kogito-tooling/packages/hub/out/Business Modeler Hub Preview-linux-x64.tar.gz

      - name: Upload Hub App - macOS (macOS only)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v1
        with:
          name: hub-app-macos
          path: kogito-tooling/packages/hub/out/Business Modeler Hub Preview-darwin-x64.zip

      - name: Upload Hub App - Windows (Windows only)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v1
        with:
          name: hub-app-windows
          path: kogito-tooling/packages/hub/out/Business Modeler Hub Preview-win32-x64

      - name: Checkout kogito-online (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.KOGITO_TOOLING_BOT_TOKEN }}
          path: kogito-online
          repository: kiegroup/kogito-online
          ref: gh-pages

      - name: Update kogito-online resources (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd kogito-online
          rm -rf dev
          mkdir -p dev/editors
          cp -r ../kogito-tooling/node_modules/@kogito-tooling/dmn-editor-unpacked/target/dmn dev/editors/
          cp -r ../kogito-tooling/node_modules/@kogito-tooling/bpmn-editor-unpacked/target/bpmn dev/editors/
          cp -r ../kogito-tooling/node_modules/@kogito-tooling/scesim-editor-unpacked/target/scesim dev/editors/
          cp -r ../kogito-tooling/packages/online-editor/dist/* dev/
          rm -rf dev/gwt-editors
          ln -s editors dev/gwt-editors
          echo "Hub download unsupported in this distribution. If you want it, you can access the latest \"Publish daily dev version\" job in https://github.com/kiegroup/kogito-tooling/actions and download it in the Artifacts dropdown." > dev/hub_download_unsupported.txt
          git config --global user.email "kietooling@gmail.com"
          git config --global user.name "Kogito Tooling Bot (kiegroup)"
          today=$(date -I)
          git add . && git commit -m "Kogito Tooling Daily Dev Build resources - $today" || echo "No changes."
          git push origin gh-pages
          cd -
