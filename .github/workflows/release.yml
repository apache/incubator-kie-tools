name: "Release"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag"
        required: true
      online-editor:
        description: "Online Editor"
        default: "true"
        required: true
      chrome-extension:
        description: "Chrome Extension"
        default: "true"
        required: true
      vscode-extensions-dev:
        description: "VS Code Extensions (dev)"
        default: "true"
        required: true
      desktop:
        description: "Desktop"
        default: "true"
        required: true
      hub:
        description: "Hub"
        default: "true"
        required: true
      npm-packages:
        description: "NPM packages"
        default: "true"
        required: true

env:
  KOGITO_TOOLING_BUILD_lint: "false"
  KOGITO_TOOLING_BUILD_test: "false"
  KOGITO_TOOLING_BUILD_testIT: "false"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      release-upload-url: ${{ fromJSON(steps.fetch-release-for-tag.outputs.data).upload_url }}
      release-download-url: ${{ steps.release-download-url.outputs.download-url }}
      release-ref: ${{ fromJSON(steps.fetch-release-for-tag.outputs.data).target_commitish }}
    steps:
      - name: "Fetch release for ${{ github.event.inputs.tag }}"
        uses: octokit/request-action@v2.1.0
        id: fetch-release-for-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: GET /repos/{repo}/releases/tags/{tag}
          repo: ${{ github.repository }}
          tag: ${{ github.event.inputs.tag }}

      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          ref: ${{ fromJSON(steps.fetch-release-for-tag.outputs.data).target_commitish }}

      - name: "Check `tag` against `(lerna.json).version`"
        shell: bash
        run: |
          [ "${{ github.event.inputs.tag }}" == "$(node -p "require('./lerna.json').version")" ]

      - name: "Generate download URL for Release assets"
        id: release-download-url
        shell: python
        run: |
          print('::set-output name=download-url::' + '${{ fromJSON(steps.fetch-release-for-tag.outputs.data).html_url }}'.replace('/tag/', '/download/'));

  hub:
    if: ${{ github.event.inputs.hub == 'true' }}
    runs-on: ${{ matrix.os }}
    needs: [prepare]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare.outputs.release-ref }}

      - name: "Setup Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ${{ matrix.os }}

      - name: "Build"
        shell: bash
        run: |
          lerna run build:prod --scope=@kogito-tooling/hub --include-dependencies --stream

      - name: "Deploy"
        run: |
          echo "${{ needs.prepare.outputs.release-upload-url }}"

  online-editor:
    env:
      ONLINE_EDITOR__downloadHubUrlLinux: "${{ needs.prepare.outputs.release-download-url }}/business_modeler_hub_preview_linux_${{ github.event.inputs.tag }}.zip"
      ONLINE_EDITOR__downloadHubUrlMacOs: "${{ needs.prepare.outputs.release-download-url }}/business_modeler_hub_preview_macos_${{ github.event.inputs.tag }}.zip"
      ONLINE_EDITOR__downloadHubUrlWindows: "${{ needs.prepare.outputs.release-download-url }}/business_modeler_hub_preview_windows_${{ github.event.inputs.tag }}.zip"
    if: ${{ github.event.inputs.online-editor == 'true' }}
    runs-on: ubuntu-latest
    needs: [prepare, hub]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare.outputs.release-ref }}

      - name: "Setup Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ubuntu-latest

      - name: "Build"
        run: |
          lerna run build:prod --scope=@kogito-tooling/online-editor --include-dependencies --stream

      - name: "Deploy"
        run: |
          echo "${{ needs.prepare.outputs.release-upload-url }}"

  chrome-extension:
    env:
      CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
      CHROME_EXTENSION__routerRelativePath: "kogito-online/editors/${{ github.event.inputs.tag }}"
      CHROME_EXTENSION__onlineEditorUrl: "https://kiegroup.github.io/kogito-online"
      CHROME_EXTENSION__manifestFile: "manifest.prod.json"
    if: ${{ github.event.inputs.chrome-extension == 'true' }}
    runs-on: ubuntu-latest
    needs: [prepare, online-editor]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare.outputs.release-ref }}

      - name: "Setup Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ubuntu-latest

      - name: "Build"
        run: |
          lerna run build:prod --scope=chrome-extension-pack-kogito-kie-editors --include-dependencies --stream

      - name: "Deploy"
        run: |
          echo "${{ needs.prepare.outputs.release-upload-url }}"

  vscode-extensions-dev:
    if: ${{ github.event.inputs.vscode-extensions-dev == 'true' }}
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare.outputs.release-ref }}

      - name: "Setup Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ubuntu-latest

      - name: "Build"
        run: |
          lerna run build:prod --scope=vscode-extension-pack-kogito-kie-editors --scope=vscode-extension-backend --include-dependencies --stream

      - name: "Deploy"
        run: |
          echo "${{ needs.prepare.outputs.release-upload-url }}"

  desktop:
    if: ${{ github.event.inputs.desktop == 'true' }}
    runs-on: ${{ matrix.os }}
    needs: [prepare]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare.outputs.release-ref }}

      - name: "Setup Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ${{ matrix.os }}

      - name: "Build"
        shell: bash
        run: |
          lerna run build:prod --scope=@kogito-tooling/desktop --include-dependencies --stream

      - name: "Deploy"
        run: |
          echo "${{ needs.prepare.outputs.release-upload-url }}"

  npm-packages:
    if: ${{ github.event.inputs.npm-packages == 'true' }}
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare.outputs.release-ref }}

      - name: "Setup Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ubuntu-latest

      - name: "Build"
        run: |
          lerna run build:prod --stream --no-private

      - name: "Deploy"
        run: |
          echo "${{ needs.prepare.outputs.release-upload-url }}"
