name: "Staging :: Build"

on:
  workflow_call:
    inputs:
      dry_run:
        type: boolean
        required: true
      base_ref:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: "0.0.0"
      commit_sha:
        type: string
        required: false
        default: "main"
      download_asset_url:
        type: string
        required: false
        default: ""
      upload_asset_url:
        type: string
        required: false
        default: ""
    secrets:
      kie_tools_bot_token:
        required: false
      gh_token:
        required: false
      quay_registry_password:
        required: false
      openshift_server:
        required: false
      openshift_token:
        required: false

env:
  TMPDIR: "${{ github.workspace }}/kie-tools/tmp"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      OPENSHIFT_NAMESPACE: "kie-sandbox"
      OPENSHIFT_PART_OF: "staging-kie-sandbox-app"

      DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry: "quay.io"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__account: "kie-tools"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__name: "dmn-dev-deployment-base-image"
      DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags: "${{ inputs.tag }}-prerelease"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageRegistry: "quay.io"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageAccount: "kie-tools"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageName: "dmn-dev-deployment-base-image"
      ONLINE_EDITOR__dmnDevDeploymentBaseImageTag: "${{ inputs.tag }}-prerelease"

      KIE_SANDBOX__imageRegistry: "quay.io"
      KIE_SANDBOX__imageAccount: "kie-tools"
      KIE_SANDBOX__imageName: "kie-sandbox-image"
      KIE_SANDBOX__imageBuildTags: "${{ inputs.tag }}-prerelease"

      KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry: "quay.io"
      KIE_SANDBOX_EXTENDED_SERVICES__imageAccount: "kie-tools"
      KIE_SANDBOX_EXTENDED_SERVICES__imageName: "kie-sandbox-extended-services-image"
      KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags: "${{ inputs.tag }}-prerelease"

      CORS_PROXY_IMAGE__imageRegistry: "quay.io"
      CORS_PROXY_IMAGE__imageAccount: "kie-tools"
      CORS_PROXY_IMAGE__imageName: "cors-proxy-image"
      CORS_PROXY_IMAGE__imageBuildTags: "${{ inputs.tag }}-prerelease"

      DEPLOY_TAG: "${{ inputs.tag }}-prerelease"

      DASHBUILDER__viewerImageRegistry: "quay.io"
      DASHBUILDER__viewerImageAccount: "kie-tools"
      DASHBUILDER__viewerImageName: "dashbuilder-viewer-image"
      DASHBUILDER__viewerImageBuildTags: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_WEB_TOOLS__dashbuilderViewerImageTag: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName: "serverless-logic-web-tools-swf-builder-image"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageTag: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName: "serverless-logic-web-tools-base-builder-image"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageTag: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry: "quay.io"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount: "kie-tools"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName: "serverless-logic-web-tools-swf-dev-mode-image"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageTag: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags: "${{ inputs.tag }}-prerelease"

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Support longpaths (Windows only)"
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3
        with:
          path: kie-tools

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./kie-tools/.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}
          path: kie-tools

      - name: "Checkout kogito-online-staging (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/kogito-online-staging
          fetch-depth: 0
          token: ${{ secrets.kie_tools_bot_token }}
          repository: kiegroup/kogito-online-staging

      - name: "Checkout serverless-logic-sandbox-deployment (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/serverless-logic-sandbox-deployment
          fetch-depth: 0
          token: ${{ secrets.kie_tools_bot_token }}
          repository: kiegroup/serverless-logic-sandbox-deployment
          ref: gh-pages

      # Skipped MacOS and Windows due to 120s timeout being reached while running hashFiles('**/pom.xml')
      # Remove condition after timeout parameter is available
      # https://github.com/actions/runner/issues/1840
      # https://github.com/actions/runner/pull/1844
      - name: "Cache Maven packages (Ubuntu only - see comments in source)"
        if: ${{ runner.os == 'Linux' }}
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: ~/.m2
          key: ${{ runner.os }}-staging-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-staging-m2

      - name: "Setup environment"
        uses: ./kie-tools/.github/actions/setup-env
        with:
          working_dir: kie-tools

      - name: "Bootstrap"
        id: bootstrap
        uses: ./kie-tools/.github/actions/bootstrap
        with:
          working_dir: kie-tools

      - name: "Build (without some images)"
        working-directory: ${{ github.workspace }}/kie-tools
        env:
          KIE_TOOLS_BUILD__runEndToEndTests: "false"
          KIE_TOOLS_BUILD__runTests: "false"
          KIE_TOOLS_BUILD__runLinters: "false"
          KIE_TOOLS_BUILD__buildContainerImages: ${{ runner.os == 'Linux' }}
          WEBPACK__minimize: "true"
          WEBPACK__tsLoaderTranspileOnly: "false"
          CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
          CHROME_EXTENSION__routerRelativePath: "kogito-online-staging/${{ inputs.tag }}-prerelease/chrome-extension"
          CHROME_EXTENSION__onlineEditorUrl: "https://kiegroup.github.io/kogito-online-staging/${{ inputs.tag }}-prerelease"
          CHROME_EXTENSION__manifestFile: "manifest.prod.json"
          SWF_CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
          SWF_CHROME_EXTENSION__routerRelativePath: "kogito-online-staging/${{ inputs.tag }}-prerelease/swf-chrome-extension"
          SWF_CHROME_EXTENSION__manifestFile: "manifest.prod.json"
          ONLINE_EDITOR__buildInfo: "${{ inputs.tag }} (staging) @ ${{ inputs.commit_sha }}"
          ONLINE_EDITOR__extendedServicesDownloadUrlLinux: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz"
          ONLINE_EDITOR__extendedServicesDownloadUrlMacOs: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg"
          ONLINE_EDITOR__extendedServicesDownloadUrlWindows: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
          ONLINE_EDITOR__extendedServicesCompatibleVersion: "${{ inputs.tag }}"
          ONLINE_EDITOR__gtmId: ""
          ONLINE_EDITOR__corsProxyUrl: "https://staging-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"
          EXTENDED_SERVICES__kieSandboxUrl: "https://kiegroup.github.io/kogito-online-staging/${{ inputs.tag }}-prerelease"
          SERVERLESS_LOGIC_WEB_TOOLS__version: "${{ inputs.tag }}-prerelease"
          SERVERLESS_LOGIC_WEB_TOOLS__samplesRepositoryRef: "${{ inputs.tag }}"
          SERVERLESS_LOGIC_WEB_TOOLS__buildInfo: "${{ inputs.tag }} (staging) @ ${{ inputs.commit_sha }}"
          SERVERLESS_LOGIC_WEB_TOOLS__corsProxyUrl: "https://staging-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"
        run: >-
          pnpm
          -F='!@kie-tools/serverless-logic-web-tools-swf-dev-mode-image'
          -F='!@kie-tools/dmn-dev-deployment-base-image'
          -F='!@kie-tools/serverless-logic-web-tools-base-builder-image'
          -F='!@kie-tools/dashbuilder-viewer-image'
          -r --workspace-concurrency=1 build:prod

      - name: "STAGING: Push serverless-logic-web-tools-swf-builder-image to quay.io (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Clean up serverless-logic-web-tools-swf-builder-image"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          podman image ls -q --filter reference=${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F serverless-logic-web-tools-swf-builder-image cleanup

      - name: "STAGING: Deploy Online Editor to kogito-online-staging (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online-staging
        env:
          DEPLOYMENT_DIR: ${{ inputs.tag }}-prerelease
        run: |
          echo "Reset deployment dir"
          rm -rf $DEPLOYMENT_DIR

          echo "Copy Online Editor resources to the deployment dir"
          cp -r ${{ github.workspace }}/kie-tools/packages/online-editor/dist $DEPLOYMENT_DIR

          echo "Create dir for deploying KIE Editors Chrome Extension resources"
          mkdir $DEPLOYMENT_DIR/chrome-extension

          echo "Create dir for deploying SWF Editor Chrome Extension resources"
          mkdir $DEPLOYMENT_DIR/swf-chrome-extension

          echo "Copy KIE Editors Chrome Extension resources to the deployment directory"
          cp -r ${{ github.workspace }}/kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/{bpmn,dmn,scesim,fonts,*-envelope.*} $DEPLOYMENT_DIR/chrome-extension

          echo "Copy SWF Editor Chrome Extension resources to the deployment directory"
          cp -r ${{ github.workspace }}/kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/{fonts,diagram,*-envelope.*,*.bundle.js,*.worker.js} $DEPLOYMENT_DIR/swf-chrome-extension

          echo "Remove gwt-editors from the Online Editor deployment"
          rm -rf $DEPLOYMENT_DIR/gwt-editors

          echo "Make the Online Editor use the resources deployed by the Chrome Extension (to save space)"
          ln -s chrome-extension $DEPLOYMENT_DIR/gwt-editors

          echo "Commit changes and push"
          git add ${{ inputs.tag }}-prerelease
          git commit -m "Deploy ${{ inputs.tag }}-prerelease (staging)"
          git push origin main

          echo "Clean up kogito-online-staging dir"
          rm -rf *

      - name: "STAGING: Deploy Serverless Logic Web Tools to serverless-logic-sandbox-deployment (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/serverless-logic-sandbox-deployment
        env:
          DEPLOYMENT_DIR: staging/${{ inputs.tag }}-prerelease
        run: |
          echo "Reset deployment dir"
          rm -rf $DEPLOYMENT_DIR

          echo "Copy Serverless Logic Web Tools resources to the deployment dir"
          cp -r ${{ github.workspace }}/kie-tools/packages/serverless-logic-web-tools/dist $DEPLOYMENT_DIR

          echo "Commit changes and push"
          git add $DEPLOYMENT_DIR
          git commit -m "Deploy ${{ inputs.tag }}-prerelease (staging)"
          git push origin gh-pages

          echo "Clean up serverless-logic-sandbox-deployment dir"
          rm -rf *

      - name: "STAGING: Compress Online Editor (Ubuntu only)"
        if: runner.os == 'Linux'
        working-directory: ${{ github.workspace }}/kie-tools/packages/online-editor
        run: |
          zip -r dist.zip dist/*

      - name: "STAGING: Compress Serverless Logic Web Tools (Ubuntu only)"
        if: runner.os == 'Linux'
        working-directory: ${{ github.workspace }}/kie-tools/packages/serverless-logic-web-tools
        run: |
          zip -r dist.zip dist/*

      - name: "STAGING: Upload Online Editor (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/online-editor/dist.zip
          asset_name: STAGING__online_editor_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "STAGING: Upload Serverless Logic Web Tools (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/serverless-logic-web-tools/dist.zip
          asset_name: STAGING__serverless_logic_web_tools_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension (dev) (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/kie-editors-dev-vscode-extension/dist/kie_editors_dev_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_dev_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - BPMN Editor (prod) (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/bpmn-vscode-extension/dist/bpmn_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: STAGING__bpmn_vscode_extension_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - DMN Editor (prod) (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/dmn-vscode-extension/dist/dmn_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: STAGING__dmn_vscode_extension_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - PMML Editor (prod) (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/pmml-vscode-extension/dist/pmml_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: STAGING__pmml_vscode_extension_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - Serverless Workflow Editor - KIE (prod) (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/serverless-workflow-vscode-extension/dist/serverless_workflow_vscode_extension_${{ inputs.tag }}.vsix
          asset_name: STAGING__serverless_workflow_vscode_extension_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - Dashbuilder Editor (prod) (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/vscode-extension-dashbuilder-editor/dist/vscode_extension_dashbuilder_editor_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_dashbuilder_editor_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - Kogito Bundle (prod) (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/vscode-extension-kogito-bundle/dist/vscode_extension_kogito_bundle_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_kogito_bundle_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - KIE Business Automation Bundle (prod) (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/vscode-extension-kie-ba-bundle/dist/vscode_extension_kie_ba_bundle_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_kie_ba_bundle_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload Chrome Extension for KIE Editors (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ inputs.tag }}.zip
          asset_name: STAGING__chrome_extension_kogito_kie_editors_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "STAGING: Upload Chrome Extension for Serverless Workflow Editor (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/chrome_extension_serverless_workflow_editor_${{ inputs.tag }}.zip
          asset_name: STAGING__chrome_extension_serverless_workflow_editor_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "STAGING: Upload Extended Services for Linux (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/extended-services/dist/linux/kie_sandbox_extended_services.tar.gz
          asset_name: STAGING__kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: "STAGING: Upload Extended Services for macOS (macOS only)"
        if: ${{ runner.os == 'macOS' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/extended-services/dist/darwin/Kogito.dmg
          asset_name: STAGING__kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg
          asset_content_type: application/octet-stream

      - name: "STAGING: Upload Extended Services for Windows (Windows only)"
        if: ${{ runner.os == 'Windows' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "${{ github.workspace }}/kie-tools/packages/extended-services/dist/win32/kie_sandbox_extended_services.exe"
          asset_name: "STAGING__kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
          asset_content_type: application/octet-stream

      - name: "STAGING: Upload Knative CLI Workflow Plugin for Linux (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-linux-amd64
          asset_name: STAGING__kn-workflow-linux-amd64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "STAGING: Upload Knative CLI Workflow Plugin for macOS (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-darwin-amd64
          asset_name: STAGING__kn-workflow-darwin-amd64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "STAGING: Upload Knative CLI Workflow Plugin for macOS M1 (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-darwin-arm64
          asset_name: STAGING__kn-workflow-darwin-arm64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "STAGING: Knative CLI Workflow Plugin for Windows (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "${{ github.workspace }}/kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-windows-amd64.exe"
          asset_name: "STAGING__kn-workflow-windows-amd64-${{ inputs.tag }}.exe"
          asset_content_type: application/octet-stream

      - name: "Load docker built images to podman local registry (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        run: docker images --format docker-daemon:{{.Repository}}:{{.Tag}} | grep -e '${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}' -e '${{ env.GIT_CORS_PROXY__imageName }}' -e '${{ env.KIE_SANDBOX__imageName }}' | grep -v '<none>' | xargs podman pull

      - name: "STAGING: Push kie-sandbox-extended-services-image to quay.io (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}"
          tags: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          username: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Deploy kie-sandbox-extended-services-image to OpenShift (Ubuntu only)"
        id: deploy_kie_sandbox_extended_services_image
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_tag: ${{ env.DEPLOY_TAG }}
          image_url: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}:${{ env.DEPLOY_TAG }}"
          app_name: "staging-kie-sandbox-extended-services"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_icon: "golang"

      - name: "STAGING: Clean up kie-sandbox-extended-services-image"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          docker image ls -q --filter reference=${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }} | xargs docker rmi
          podman image ls -q --filter reference=${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F kie-sandbox-extended-services-image cleanup

      - name: "STAGING: Push cors-proxy-image to quay.io (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.CORS_PROXY_IMAGE__imageName }}"
          tags: "${{ env.CORS_PROXY_IMAGE__imageBuildTags }}"
          registry: "${{ env.CORS_PROXY_IMAGE__imageRegistry }}/${{ env.CORS_PROXY_IMAGE__imageAccount }}"
          username: "${{ env.CORS_PROXY_IMAGE__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Deploy cors-proxy-image to OpenShift (Ubuntu only)"
        id: deploy_CORS_PROXY_image
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_tag: ${{ env.DEPLOY_TAG }}
          image_url: "${{ env.CORS_PROXY_IMAGE__imageRegistry }}/${{ env.CORS_PROXY_IMAGE__imageAccount }}/${{ env.CORS_PROXY_IMAGE__imageName }}:${{ env.DEPLOY_TAG }}"
          app_name: "staging-cors-proxy"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_icon: "nodejs"

      - name: "STAGING: Clean up cors-proxy-image"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          docker image ls -q --filter reference=${{ env.CORS_PROXY_IMAGE__imageRegistry }}/${{ env.CORS_PROXY_IMAGE__imageAccount }}/${{ env.CORS_PROXY_IMAGE__imageName }} | xargs docker rmi
          podman image ls -q --filter reference=${{ env.CORS_PROXY_IMAGE__imageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F cors-proxy-image cleanup

      - name: "STAGING: Push kie-sandbox-image to quay.io (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX__imageName }}"
          tags: "${{ env.KIE_SANDBOX__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}"
          username: "${{ env.KIE_SANDBOX__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Prepare environment variables for OpenShift deployment (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        shell: bash
        run: |
          echo "KIE_SANDBOX_EXTENDED_SERVICES_URL=${{ steps.deploy_kie_sandbox_extended_services_image.outputs.route_url }}" >> deployment.env
          echo "KIE_SANDBOX_CORS_PROXY_URL=${{ steps.deploy_CORS_PROXY_image.outputs.route_url }}" >> deployment.env

      - name: "STAGING: Deploy kie-sandbox-image to OpenShift (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_tag: ${{ env.DEPLOY_TAG }}
          image_url: "${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}/${{ env.KIE_SANDBOX__imageName }}:${{ env.DEPLOY_TAG }}"
          app_name: "staging-kie-sandbox"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_envvars_file_path: ./deployment.env
          deployment_icon: "js"

      - name: "STAGING: Clean up kie-sandbox-image"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          docker image ls -q --filter reference=${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}/${{ env.KIE_SANDBOX__imageName }} | xargs docker rmi
          podman image ls -q --filter reference=${{ env.KIE_SANDBOX__imageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F kie-sandbox-image cleanup

      - name: "Build → serverless-logic-web-tools-swf-dev-mode-image"
        if: ${{ runner.os == 'Linux' }}
        working-directory: ${{ github.workspace }}/kie-tools
        env:
          KIE_TOOLS_BUILD__runTests: "true"
          KIE_TOOLS_BUILD__buildContainerImages: "true"
        run: |
          echo "Clean up container image resources"
          if command -v docker &> /dev/null; then
            docker system prune -af
          fi
          if command -v podman &> /dev/null; then
            podman system prune --all --force
          fi
          echo "Build @kie-tools/serverless-logic-web-tools-swf-dev-mode-image"
          pnpm -F @kie-tools/serverless-logic-web-tools-swf-dev-mode-image... --workspace-concurrency=1 build:prod

      - name: "STAGING: Push serverless-logic-web-tools-swf-dev-mode-image to quay.io (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Clean up serverless-logic-web-tools-swf-dev-mode-image"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          podman image ls -q --filter reference=${{ env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F serverless-logic-web-tools-swf-dev-mode-image cleanup

      - name: "Build → dmn-dev-deployment-base-image"
        if: ${{ runner.os == 'Linux' }}
        working-directory: ${{ github.workspace }}/kie-tools
        env:
          KIE_TOOLS_BUILD__runTests: "true"
          KIE_TOOLS_BUILD__buildContainerImages: "true"
        run: |
          echo "Clean up container image resources"
          if command -v docker &> /dev/null; then
            docker system prune -af
          fi
          if command -v podman &> /dev/null; then
            podman system prune --all --force
          fi
          echo "Build @kie-tools/dmn-dev-deployment-base-image"
          pnpm -F @kie-tools/dmn-dev-deployment-base-image... --workspace-concurrency=1 build:prod

      - name: "STAGING: Push dmn-dev-deployment-base-image to quay.io (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__name }}"
          tags: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__buildTags }}"
          registry: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__registry }}/${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__account }}"
          username: "${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__account }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Clean up dmn-dev-deployment-base-image"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          podman image ls -q --filter reference=${{ env.DMN_DEV_DEPLOYMENT_BASE_IMAGE__name }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F dmn-dev-deployment-base-image cleanup

      - name: "Build → serverless-logic-web-tools-base-builder-image"
        if: ${{ runner.os == 'Linux' }}
        working-directory: ${{ github.workspace }}/kie-tools
        env:
          KIE_TOOLS_BUILD__runTests: "true"
          KIE_TOOLS_BUILD__buildContainerImages: "true"
        run: |
          echo "Clean up container image resources"
          if command -v docker &> /dev/null; then
            docker system prune -af
          fi
          if command -v podman &> /dev/null; then
            podman system prune --all --force
          fi
          echo "Build @kie-tools/serverless-logic-web-tools-base-builder-image"
          pnpm -F @kie-tools/serverless-logic-web-tools-base-builder-image... --workspace-concurrency=1 build:prod

      - name: "STAGING: Push serverless-logic-web-tools-base-builder-image to quay.io (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName }}"
          tags: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags }}"
          registry: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry }}/${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount }}"
          username: "${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Clean up serverless-logic-web-tools-base-builder-image"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          podman image ls -q --filter reference=${{ env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F serverless-logic-web-tools-base-builder-image cleanup

      - name: "Build → dashbuilder-viewer-image"
        if: ${{ runner.os == 'Linux' }}
        working-directory: ${{ github.workspace }}/kie-tools
        env:
          KIE_TOOLS_BUILD__runTests: "true"
          KIE_TOOLS_BUILD__buildContainerImages: "true"
        run: |
          echo "Clean up container image resources"
          if command -v docker &> /dev/null; then
            docker system prune -af
          fi
          if command -v podman &> /dev/null; then
            podman system prune --all --force
          fi
          echo "Build @kie-tools/dashbuilder-viewer-image"
          pnpm -F @kie-tools/dashbuilder-viewer-image... --workspace-concurrency=1 build:prod

      - name: "STAGING: Push dashbuilder-viewer-image to quay.io (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DASHBUILDER__viewerImageName }}"
          tags: "${{ env.DASHBUILDER__viewerImageBuildTags }}"
          registry: "${{ env.DASHBUILDER__viewerImageRegistry }}/${{ env.DASHBUILDER__viewerImageAccount }}"
          username: "${{ env.DASHBUILDER__viewerImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Clean up dashbuilder-viewer-image"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kie-tools
        run: |
          podman image ls -q --filter reference=${{ env.DASHBUILDER__viewerImageName }} | xargs podman rmi
          rm -rf ${{ env.TMPDIR }}/*
          pnpm -F dashbuilder-viewer-image cleanup
