name: "Staging :: Build"

on:
  workflow_call:
    inputs:
      dry_run:
        type: boolean
        required: true
      base_ref:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: "0.0.0"
      commit_sha:
        type: string
        required: false
        default: "main"
      download_asset_url:
        type: string
        required: false
        default: ""
      upload_asset_url:
        type: string
        required: false
        default: ""
    secrets:
      kie_tools_bot_token:
        required: false
      gh_token:
        required: false
      quay_registry_password:
        required: false
      openshift_server:
        required: false
      openshift_token:
        required: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      OPENSHIFT_NAMESPACE: "kie-sandbox"
      OPENSHIFT_PART_OF: "staging-kie-sandbox-app"

      DMN_DEV_SANDBOX__baseImageRegistry: "quay.io"
      DMN_DEV_SANDBOX__baseImageAccount: "kie-tools"
      DMN_DEV_SANDBOX__baseImageName: "dmn-dev-sandbox-deployment-base-image"
      DMN_DEV_SANDBOX__baseImageTag: "${{ inputs.tag }}-prerelease"
      DMN_DEV_SANDBOX__baseImageBuildTags: "${{ inputs.tag }}-prerelease"

      DASHBUILDER__baseImageRegistry: "quay.io"
      DASHBUILDER__baseImageAccount: "kie-tools"
      DASHBUILDER_AUTHORING__baseImageName: "dashbuilder-authoring"
      DASHBUILDER_RUNTIME__baseImageName: "dashbuilder-runtime"
      DASHBUILDER__baseImageTag: "${{ inputs.tag }}-prerelease"
      DASHBUILDER__baseImageBuildTags: "${{ inputs.tag }}-prerelease"

      KIE_SANDBOX__imageRegistry: "quay.io"
      KIE_SANDBOX__imageAccount: "kie-tools"
      KIE_SANDBOX__imageName: "kie-sandbox-image"
      KIE_SANDBOX__imageBuildTags: "${{ inputs.tag }}-prerelease"

      KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry: "quay.io"
      KIE_SANDBOX_EXTENDED_SERVICES__imageAccount: "kie-tools"
      KIE_SANDBOX_EXTENDED_SERVICES__imageName: "kie-sandbox-extended-services-image"
      KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags: "${{ inputs.tag }}-prerelease"

      CORS_PROXY__imageRegistry: "quay.io"
      CORS_PROXY__imageAccount: "kie-tools"
      CORS_PROXY__imageName: "cors-proxy-image"
      CORS_PROXY__imageBuildTags: "${{ inputs.tag }}-prerelease"

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Support longpaths (Windows only)"
        if: matrix.os == 'windows-latest'
        run: git config --system core.longpaths true

      - name: "Checkout kie-tools"
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.base_ref }}
          path: ${{ github.workspace }}/kie-tools
          fetch-depth: 0

      - name: "Setup kie-tools-bot"
        uses: ./kie-tools/.github/actions/setup-kie-tools-bot

      - name: "Merge PR changes"
        uses: ./kie-tools/.github/actions/merge-pr-changes
        with:
          path: kie-tools

      - name: "Checkout kogito-online-staging (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/kogito-online-staging
          fetch-depth: 0
          token: ${{ secrets.kie_tools_bot_token }}
          repository: kiegroup/kogito-online-staging

      - name: "Cache Maven packages"
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-staging-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-staging-m2

      - name: "Setup environment"
        uses: ./kie-tools/.github/actions/setup-env
        with:
          os: ${{ matrix.os }}
          path: kie-tools

      - name: "Build"
        working-directory: ${{ github.workspace }}/kie-tools
        env:
          KIE_TOOLS_BUILD_testIT: "false"
          KIE_TOOLS_BUILD_test: "false"
          KIE_TOOLS_BUILD_lint: "false"
          KIE_TOOLS_BUILD_docker: "true"
          WEBPACK__minimize: "true"
          WEBPACK__tsLoaderTranspileOnly: "false"
          CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
          CHROME_EXTENSION__routerRelativePath: "kogito-online-staging/${{ inputs.tag }}-prerelease/chrome-extension"
          CHROME_EXTENSION__onlineEditorUrl: "https://kiegroup.github.io/kogito-online-staging/${{ inputs.tag }}-prerelease"
          CHROME_EXTENSION__manifestFile: "manifest.prod.json"
          ONLINE_EDITOR__buildInfo: "${{ inputs.tag }} (staging) @ ${{ inputs.commit_sha }}"
          ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlLinux: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz"
          ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlMacOs: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg"
          ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlWindows: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
          ONLINE_EDITOR__kieSandboxExtendedServicesCompatibleVersion: "${{ inputs.tag }}"
          ONLINE_EDITOR__gtmId: ""
          DMN_DEV_SANDBOX__gtmId: ""
          DMN_DEV_SANDBOX__onlineEditorUrl: "https://kiegroup.github.io/kogito-online-staging/${{ inputs.tag }}-prerelease"
        run: |
          lerna run build:prod --stream

      - name: "STAGING: Push dmn-dev-sandbox-deployment-base-image to quay.io (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DMN_DEV_SANDBOX__baseImageName }}"
          tags: "${{ env.DMN_DEV_SANDBOX__baseImageBuildTags }}"
          registry: "${{ env.DMN_DEV_SANDBOX__baseImageRegistry }}/${{ env.DMN_DEV_SANDBOX__baseImageAccount }}"
          username: "${{ env.DMN_DEV_SANDBOX__baseImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Push kie-sandbox-extended-services-image to quay.io (Ubuntu only)"
        id: push_kie_sandbox_extended_services_image
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageName }}"
          tags: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry }}/${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          username: "${{ env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Deploy kie-sandbox-extended-services-image to OpenShift (Ubuntu only)"
        id: deploy_kie_sandbox_extended_services_image
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_url: ${{ steps.push_kie_sandbox_extended_services_image.outputs.registry-path }}
          app_name: "staging-kie-sandbox-extended-services"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_icon: "golang"

      - name: "STAGING: Push cors-proxy-image to quay.io (Ubuntu only)"
        id: push_cors_proxy_image
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.CORS_PROXY__imageName }}"
          tags: "${{ env.CORS_PROXY__imageBuildTags }}"
          registry: "${{ env.CORS_PROXY__imageRegistry }}/${{ env.CORS_PROXY__imageAccount }}"
          username: "${{ env.CORS_PROXY__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Deploy cors-proxy-image to OpenShift (Ubuntu only)"
        id: deploy_cors_proxy_image
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_url: ${{ steps.push_cors_proxy_image.outputs.registry-path }}
          app_name: "staging-cors-proxy"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_icon: "nodejs"

      - name: "STAGING: Push kie-sandbox-image to quay.io (Ubuntu only)"
        id: push_kie_sandbox_image
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.KIE_SANDBOX__imageName }}"
          tags: "${{ env.KIE_SANDBOX__imageBuildTags }}"
          registry: "${{ env.KIE_SANDBOX__imageRegistry }}/${{ env.KIE_SANDBOX__imageAccount }}"
          username: "${{ env.KIE_SANDBOX__imageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING: Prepare environment variables for OpenShift deployment (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        shell: bash
        run: |
          echo "KIE_SANDBOX_EXTENDED_SERVICES_URL=${{ steps.deploy_kie_sandbox_extended_services_image.outputs.route_url }}" >> deployment.env
          echo "CORS_PROXY_URL=${{ steps.deploy_cors_proxy_image.outputs.route_url }}" >> deployment.env

      - name: "STAGING: Deploy kie-sandbox-image to OpenShift (Ubuntu only)"
        id: deploy_kie_sandbox_image
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: ./kie-tools/.github/actions/deploy-openshift
        with:
          image_url: ${{ steps.push_kie_sandbox_image.outputs.registry-path }}
          app_name: "staging-kie-sandbox"
          part_of: ${{ env.OPENSHIFT_PART_OF }}
          openshift_server: ${{ secrets.openshift_server }}
          openshift_token: ${{ secrets.openshift_token }}
          openshift_namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          deployment_envvars_file_path: ./deployment.env
          deployment_icon: "js"

      - name: "STAGING: Deploy Online Editor to kogito-online-staging (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        working-directory: ${{ github.workspace }}/kogito-online-staging
        env:
          DEPLOYMENT_DIR: ${{ inputs.tag }}-prerelease
        run: |
          echo "Reset deployment dir"
          rm -rf $DEPLOYMENT_DIR

          echo "Copy Online Editor resources to the deployment dir"
          cp -r ${{ github.workspace }}/kie-tools/packages/online-editor/dist $DEPLOYMENT_DIR

          echo "Create dir for deploying Chrome Extension resources"
          mkdir $DEPLOYMENT_DIR/chrome-extension

          echo "Copy Chrome Extension resources to the right place"
          cp -r ${{ github.workspace }}/kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/{bpmn,dmn,scesim,fonts,*-envelope.*} $DEPLOYMENT_DIR/chrome-extension

          echo "Remove gwt-editors from the Online Editor deployment"
          rm -rf $DEPLOYMENT_DIR/gwt-editors

          echo "Make the Online Editor use the resources deployed by the Chrome Extension (to save space)"
          ln -s chrome-extension $DEPLOYMENT_DIR/gwt-editors

          echo "Commit changes and push"
          git add ${{ inputs.tag }}-prerelease
          git commit -m "Deploy ${{ inputs.tag }}-prerelease (staging)"
          git push origin main

      - name: "Compress Online Editor (Ubuntu only)"
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{ github.workspace }}/kie-tools/packages/online-editor
        run: |
          zip -r dist.zip dist/*

      - name: "STAGING: Upload Online Editor (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/online-editor/dist.zip
          asset_name: STAGING__online_editor_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension (dev) (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/vscode-extension-pack-kogito-kie-editors/dist/vscode_extension_kogito_kie_editors_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_dev_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension Backend (dev) (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/vscode-extension-backend/dist/vscode-extension-backend_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_backend_dev_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - BPMN Editor (prod) (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/vscode-extension-bpmn-editor/dist/vscode_extension_bpmn_editor_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_bpmn_editor_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - DMN Editor (prod) (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/vscode-extension-dmn-editor/dist/vscode_extension_dmn_editor_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_dmn_editor_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload VS Code Extension - PMML Editor (prod) (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/vscode-extension-pmml-editor/dist/vscode_extension_pmml_editor_${{ inputs.tag }}.vsix
          asset_name: STAGING__vscode_extension_pmml_editor_${{ inputs.tag }}.vsix
          asset_content_type: application/zip

      - name: "STAGING: Upload Chrome Extension (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${{ inputs.tag }}.zip
          asset_name: STAGING__chrome_extension_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "STAGING: Upload Desktop App for Linux (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/desktop/out/Business Modeler Preview-linux-x64.tar.gz
          asset_name: STAGING__business_modeler_preview_linux_${{ inputs.tag }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: "STAGING: Upload Desktop App for macOS (macOS only)"
        if: ${{ matrix.os == 'macos-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/desktop/out/Business Modeler Preview-darwin-x64.zip
          asset_name: STAGING__business_modeler_preview_macos_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "Compress Desktop App (Windows only)"
        if: matrix.os == 'windows-latest'
        run: "Compress-Archive -Path \"kie-tools\\packages\\desktop\\out\\Business Modeler Preview-win32-x64\" -DestinationPath \"kie-tools\\packages\\desktop\\out\\Business Modeler Preview-win32-x64.zip\""

      - name: "STAGING: Upload Desktop App for Windows (Windows only)"
        if: ${{ matrix.os == 'windows-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "${{ github.workspace }}/kie-tools/packages/desktop/out/Business Modeler Preview-win32-x64.zip"
          asset_name: "STAGING__business_modeler_preview_windows_${{ inputs.tag }}.zip"
          asset_content_type: application/zip

      - name: "STAGING: Upload Extended Services for Linux (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/extended-services/dist/linux/kie_sandbox_extended_services.tar.gz
          asset_name: STAGING__kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: "STAGING: Upload Extended Services for macOS (macOS only)"
        if: ${{ matrix.os == 'macos-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/extended-services/dist/darwin/Kogito.dmg
          asset_name: STAGING__kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg
          asset_content_type: application/octet-stream

      - name: "STAGING: Upload Extended Services for Windows (Windows only)"
        if: ${{ matrix.os == 'windows-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "${{ github.workspace }}/kie-tools/packages/extended-services/dist/win32/kie_sandbox_extended_services.exe"
          asset_name: "STAGING__kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
          asset_content_type: application/octet-stream

      - name: "STAGING: Upload DashBuilder Assets (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/dashbuilder/dist/dashbuilder_dist.zip
          asset_name: STAGING__dashbuilder_dist_${{ inputs.tag }}.zip
          asset_content_type: application/zip

      - name: "STAGING Push dashbuilder-authoring image to quay.io (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DASHBUILDER_AUTHORING__baseImageName }}"
          tags: "${{ env.DASHBUILDER__baseImageBuildTags }}"
          registry: "${{ env.DASHBUILDER__baseImageRegistry }}/${{ env.DASHBUILDER__baseImageAccount }}"
          username: "${{ env.DASHBUILDER__baseImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"

      - name: "STAGING Push dashbuilder-runtime image to quay.io (Ubuntu only)"
        if: ${{ matrix.os == 'ubuntu-latest' && !inputs.dry_run }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: "${{ env.DASHBUILDER_RUNTIME__baseImageName }}"
          tags: "${{ env.DASHBUILDER__baseImageBuildTags }}"
          registry: "${{ env.DASHBUILDER__baseImageRegistry }}/${{ env.DASHBUILDER__baseImageAccount }}"
          username: "${{ env.DASHBUILDER__baseImageAccount }}"
          password: "${{ secrets.quay_registry_password }}"
