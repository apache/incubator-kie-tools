name: "Setup Apache KIE Tools build environment"
description: ""

inputs:
  working_dir:
    description: "kie-tools path"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: "Clear storage usage from unnecessary packages"
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "Removing large packages"
        sudo apt-get update
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y 'php.*'
        sudo apt-get remove -y '^mongodb-.*'
        sudo apt-get autoremove -y
        sudo apt-get clean
        echo "Removing large directories"
        sudo rm -rf /opt/ghc || true
        sudo rm -rf /usr/local/.ghcup || true
        sudo rm -rf /usr/share/dotnet || true
        sudo rm -rf /usr/local/lib/android || true

    - name: "Print storage usage (before setup)"
      shell: bash
      run: |
        echo "STEP: Print storage usage (before setup)"
        cd ${{ inputs.working_dir }}
        df -h .

    - name: "Create temp dir"
      shell: bash
      run: |
        echo "STEP: Create tmp dir"
        cd ${{ inputs.working_dir }}
        mkdir tmp

    - name: "Setup pnpm"
      uses: pnpm/action-setup@v2
      with:
        version: 8.7.0

    - name: "Setup Node"
      uses: actions/setup-node@v3
      with:
        node-version: 18.14.0

    - name: "Setup JDK 17"
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: "zulu"

    - name: "Set up GOLANG 1.21.5"
      uses: actions/setup-go@v3
      with:
        go-version: "1.21.5"

    - name: "Set up Maven"
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.9.6

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Setup docker (macOS only)
      if: runner.os == 'macOS'
      shell: bash
      env:
        HOMEBREW_NO_INSTALL_FROM_API:
      run: |
        echo "STEP: Setup docker (macOS only)"
        brew update --preinstall
        LIMA_VERSION=v0.20.1
        curl -fsSL "https://github.com/lima-vm/lima/releases/download/${LIMA_VERSION}/lima-${LIMA_VERSION:1}-$(uname -s)-$(uname -m).tar.gz" | tar Cxzvm /usr/local
        COLIMA_VERSION=v0.6.8
        curl -LO https://github.com/abiosoft/colima/releases/download/${COLIMA_VERSION}/colima-$(uname)-$(uname -m)
        install colima-$(uname)-$(uname -m) /usr/local/bin/colima
        brew install docker docker-compose docker-Buildx qemu 2>&1 | tee install.log
        mkdir -p ~/.docker/cli-plugins
        ln -sfn "$(brew --prefix)/opt/docker-compose/bin/docker-compose" ~/.docker/cli-plugins/docker-compose
        ln -sfn $(brew --prefix)/opt/docker-buildx/bin/docker-buildx ~/.docker/cli-plugins/docker-buildx
        if grep -q "qemu 8.1.0 is already installed" install.log
        then
            echo "Detected broken QEMU bottle installed by brew, removing and reinstalling."
            brew reinstall qemu
        fi
        colima start --memory 4 --network-address --verbose

        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "version<<$EOF" >> "$GITHUB_OUTPUT"
        docker version >> "$GITHUB_OUTPUT"
        echo "$EOF" >> "$GITHUB_OUTPUT"

        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "version<<$EOF" >> "$GITHUB_OUTPUT"
        docker compose version >> "$GITHUB_OUTPUT"
        echo "$EOF" >> "$GITHUB_OUTPUT"

        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "version<<$EOF" >> "$GITHUB_OUTPUT"
        colima version >> "$GITHUB_OUTPUT"
        echo "$EOF" >> "$GITHUB_OUTPUT"

    - name: "Setup Helm (Ubuntu)"
      if: runner.os == 'Linux'
      shell: bash
      env:
        HELM_VERSION: "v3.13.3"
      run: |
        echo "STEP: Install Helm (Ubuntu only)"
        sudo wget -q https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm
        sudo chmod +x /usr/local/bin/helm

    - name: "Setup network timeout"
      shell: bash
      run: |
        echo "STEP: Setup network timeout"
        cd ${{ inputs.working_dir }}
        pnpm config set network-timeout 1000000

    - name: "Setup default Maven args"
      shell: bash
      run: |
        echo "STEP: Setup default Maven args"
        cd ${{ inputs.working_dir }}
        pnpm -r exec 'bash' '-c' 'mkdir .mvn'
        pnpm -r exec 'bash' '-c' 'echo -B > .mvn/maven.config'
        pnpm -r exec 'bash' '-c' 'echo -ntp >> .mvn/maven.config'
        pnpm -r exec 'bash' '-c' 'echo -Xmx2g > .mvn/jvm.config'

    - name: "Install s2i pre-reqs (Ubuntu only)"
      shell: bash
      run: |
        echo "STEP: Install libbtrfs-dev (Ubuntu only)"
        cd ${{ inputs.working_dir }}
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get -y install libbtrfs-dev libgpgme-dev libdevmapper-dev > /dev/null 2>&1
        fi

    - name: "Setup s2i (source-to-image)"
      shell: bash
      run: |
        go install github.com/openshift/source-to-image/cmd/s2i@v1.3.9

    - name: "Install Fluxbox (Ubuntu only)"
      shell: bash
      run: |
        echo "STEP: Install Fluxbox (Ubuntu only)"
        cd ${{ inputs.working_dir }}
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get -y install fluxbox > /dev/null 2>&1
        fi

    - name: "Start Xvfb (Ubuntu only)"
      shell: bash
      run: |
        echo "STEP: Start Xvfb (Ubuntu only)"
        cd ${{ inputs.working_dir }}
        if [ "${{ runner.os }}" == "Linux" ]; then
            /usr/bin/Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        fi

    - name: "Start Fluxbox (Ubuntu only)"
      shell: bash
      run: |
        echo "STEP: Start Fluxbox (Ubuntu only)"
        cd ${{ inputs.working_dir }}
        if [ "${{ runner.os }}" == "Linux" ]; then
            fluxbox -display :99 > /dev/null 2>&1 &
        fi

    - name: "Configure Pagefile (Windows only)"
      if: runner.os == 'Windows'
      uses: al-cheb/configure-pagefile-action@86589fd789a4de3e62ba628dda2cb10027b66d67 #v1.3
      with:
        minimum-size: 16GB
        maximum-size: 16GB
        disk-root: "C:"

    - name: "Increase inotify watches (Ubuntu only)"
      shell: bash
      run: |
        echo "STEP: Increase inotify watches (Ubuntu only)"
        cd ${{ inputs.working_dir }}
        if [ "${{ runner.os }}" == "Linux" ]; then
          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
        fi

    - name: "Setup GOLANG packages (Linux)"
      shell: bash
      run: |
        echo "STEP: Setup GOLANG packages (Linux)"
        cd ${{ inputs.working_dir }}
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt update && \
          sudo apt install -y \
          build-essential \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          gir1.2-appindicator3-0.1
        fi

    - name: "Print storage usage (after setup)"
      shell: bash
      run: |
        echo "STEP: Print storage usage (after setup)"
        cd ${{ inputs.working_dir }}
        df -h .
