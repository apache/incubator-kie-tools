diff --git a/node_modules/@isomorphic-git/lightning-fs/src/DefaultBackend.js b/node_modules/@isomorphic-git/lightning-fs/src/DefaultBackend.js
index ddd4e92..d007280 100644
--- a/node_modules/@isomorphic-git/lightning-fs/src/DefaultBackend.js
+++ b/node_modules/@isomorphic-git/lightning-fs/src/DefaultBackend.js
@@ -11,7 +11,8 @@ const Mutex2 = require("./Mutex2.js");
 const path = require("./path.js");
 
 module.exports = class DefaultBackend {
-  constructor() {
+  constructor(args) {
+    this._idbBackendDelegate = args ? args.idbBackendDelegate : undefined;
     this.saveSuperblock = debounce(() => {
       this._saveSuperblock();
     }, 500);
@@ -24,9 +25,12 @@ module.exports = class DefaultBackend {
     fileStoreName = name + "_files",
     lockDbName = name + "_lock",
     lockStoreName = name + "_lock",
+    idbBackend = this._idbBackendDelegate
+      ? this._idbBackendDelegate(fileDbName, fileStoreName)
+      : new IdbBackend(fileDbName, fileStoreName)
   } = {}) {
     this._name = name
-    this._idb = new IdbBackend(fileDbName, fileStoreName);
+    this._idb = idbBackend;
     this._mutex = navigator.locks ? new Mutex2(name) : new Mutex(lockDbName, lockStoreName);
     this._cache = new CacheFS(name);
     this._opts = { wipe, url };
@@ -123,6 +127,52 @@ module.exports = class DefaultBackend {
     if (!stat) throw new ENOENT(filepath)
     return data;
   }
+  async readFileBulk(filepaths, opts) {
+    const { encoding } = opts;
+    if (encoding && encoding !== "utf8") {
+      console.info(encoding)
+      throw new Error('Only "utf8" encoding is supported in readFile');
+    }
+
+    if (this._http) {
+      throw new Error("Bulk-reading is not supported through HTTP");
+    }
+
+    if (!this._idb.readFileBulk) {
+      throw new Error("Current IndexedDB backend doesn't support bulk-reading operations.");
+    }
+
+    const inoBulk = [];
+    const enoentBulk = [];
+    for (const filepath of filepaths) {
+      try {
+        const stat = this._cache.stat(filepath);
+        if (stat) {
+          inoBulk.push(stat.ino);
+        } else {
+          enoentBulk.push(filepath);
+        }
+      } catch (e) {
+        enoentBulk.push(filepath);
+      }
+    }
+
+    if (enoentBulk.length > 0) {
+      throw new ENOENT(enoentBulk.join(", "));
+    }
+
+    const dataBulk = await this._idb.readFileBulk(inoBulk);
+    if (dataBulk.length !== filepaths.length) {
+      throw new Error("Unexpected error during bulk-read");
+    }
+
+    const fileBulk = [];
+    for (let i = 0; i < dataBulk.length; i++) {
+      fileBulk[i] = [filepaths[i], encoding ? decode(dataBulk[i]) : dataBulk[i]];
+    }
+
+    return fileBulk;
+  }
   async writeFile(filepath, data, opts) {
     const { mode, encoding = "utf8" } = opts;
     if (typeof data === "string") {
@@ -134,6 +184,26 @@ module.exports = class DefaultBackend {
     const stat = await this._cache.writeStat(filepath, data.byteLength, { mode });
     await this._idb.writeFile(stat.ino, data)
   }
+  async writeFileBulk(files, opts) {
+    if (!this._idb.writeFileBulk) {
+      throw new Error("Current IndexedDB backend doesn't support bulk-writing operations.");
+    }
+
+    const { mode, encoding = "utf8" } = opts;
+    if (encoding !== "utf8") {
+      throw new Error('Only "utf8" encoding is supported in writeFileBulk');
+    }
+
+    const inoBulk = [];
+    const dataBulk = [];
+    for (const [filepath, data] of files) {
+      const stat = this._cache.writeStat(filepath, data.byteLength, { mode });
+      inoBulk.push(stat.ino);
+      dataBulk.push(typeof data === "string" ? encode(data) : data);
+    }
+
+    await this._idb.writeFileBulk(inoBulk, dataBulk);
+  }
   async unlink(filepath, opts) {
     const stat = this._cache.lstat(filepath);
     this._cache.unlink(filepath);
@@ -141,6 +211,21 @@ module.exports = class DefaultBackend {
       await this._idb.unlink(stat.ino)
     }
   }
+  async unlinkBulk(filepaths, opts) {
+    if (!this._idb.unlinkBulk) {
+      throw new Error("Current IndexedDB backend doesn't support bulk-unlinking operations.");
+    }
+
+    const inoBulk = [];
+    for (const filepath of filepaths) {
+      const stat = this._cache.lstat(filepath);
+      this._cache.unlink(filepath);
+      if (stat.type !== "symlink") {
+        inoBulk.push(stat.ino);
+      }
+    }
+    await this._idb.unlinkBulk(inoBulk);
+  }
   readdir(filepath, opts) {
     return this._cache.readdir(filepath);
   }
diff --git a/node_modules/@isomorphic-git/lightning-fs/src/DexieBackend.js b/node_modules/@isomorphic-git/lightning-fs/src/DexieBackend.js
new file mode 100644
index 0000000..d96c9c9
--- /dev/null
+++ b/node_modules/@isomorphic-git/lightning-fs/src/DexieBackend.js
@@ -0,0 +1,50 @@
+const { Dexie } = require("dexie");
+
+module.exports = class DexieBackend {
+  constructor(dbname, storename) {
+    const stores = {};
+    stores[storename] = "";
+    this._dexie = new Dexie(dbname);
+    this._dexie.version(1).stores(stores);
+    this._storename = storename;
+  }
+  async saveSuperblock(superblock) {
+    await this._dexie.open();
+    return this._dexie[this._storename].put(superblock, "!root");
+  }
+  async loadSuperblock() {
+    await this._dexie.open();
+    return this._dexie[this._storename].get("!root");
+  }
+  async readFile(inode) {
+    await this._dexie.open();
+    return this._dexie[this._storename].get(inode);
+  }
+  async readFileBulk(inodeBulk) {
+    await this._dexie.open();
+    return this._dexie[this._storename].bulkGet(inodeBulk);
+  }
+  async writeFile(inode, data) {
+    await this._dexie.open();
+    return this._dexie[this._storename].put(data, inode);
+  }
+  async writeFileBulk(inodeBulk, dataBulk) {
+    await this._dexie.open();
+    return this._dexie[this._storename].bulkPut(dataBulk, inodeBulk);
+  }
+  async unlink(inode) {
+    await this._dexie.open();
+    return this._dexie[this._storename].delete(inode);
+  }
+  async unlinkBulk(inodeBulk) {
+    await this._dexie.open();
+    return this._dexie[this._storename].bulkDelete(inodeBulk);
+  }
+  async wipe() {
+    await this._dexie.open();
+    return this._dexie[this._storename].clear();
+  }
+  async close() {
+    return this._dexie.close();
+  }
+};
diff --git a/node_modules/@isomorphic-git/lightning-fs/src/PromisifiedFS.js b/node_modules/@isomorphic-git/lightning-fs/src/PromisifiedFS.js
index c219bca..7a03b25 100644
--- a/node_modules/@isomorphic-git/lightning-fs/src/PromisifiedFS.js
+++ b/node_modules/@isomorphic-git/lightning-fs/src/PromisifiedFS.js
@@ -18,6 +18,23 @@ function cleanParamsFilepathOpts(filepath, opts, ...rest) {
   }
   return [filepath, opts, ...rest];
 }
+function cleanParamsFilepathsOpts(filepaths, opts, ...rest) {
+  // normalize paths
+  for (let i = 0; i < filepaths.length; i++) {
+    filepaths[i] = path.normalize(filepaths[i]);
+  }
+  // strip out callbacks
+  if (typeof opts === "undefined" || typeof opts === "function") {
+    opts = {};
+  }
+  // expand string options to encoding options
+  if (typeof opts === "string") {
+    opts = {
+      encoding: opts,
+    };
+  }
+  return [filepaths, opts, ...rest];
+}
 
 function cleanParamsFilepathDataOpts(filepath, data, opts, ...rest) {
   // normalize paths
@@ -35,6 +52,24 @@ function cleanParamsFilepathDataOpts(filepath, data, opts, ...rest) {
   return [filepath, data, opts, ...rest];
 }
 
+function cleanParamsFilesOpts(files, opts, ...rest) {
+  // normalize paths
+  for (const file of files) {
+    file[0] = path.normalize(file[0]);
+  }
+  // strip out callbacks
+  if (typeof opts === "undefined" || typeof opts === "function") {
+    opts = {};
+  }
+  // expand string options to encoding options
+  if (typeof opts === "string") {
+    opts = {
+      encoding: opts,
+    };
+  }
+  return [files, opts, ...rest];
+}
+
 function cleanParamsFilepathFilepath(oldFilepath, newFilepath, ...rest) {
   // normalize paths
   return [path.normalize(oldFilepath), path.normalize(newFilepath), ...rest];
@@ -44,8 +79,11 @@ module.exports = class PromisifiedFS {
   constructor(name, options = {}) {
     this.init = this.init.bind(this)
     this.readFile = this._wrap(this.readFile, cleanParamsFilepathOpts, false)
+    this.readFileBulk = this._wrap(this.readFileBulk, cleanParamsFilepathsOpts, false)
     this.writeFile = this._wrap(this.writeFile, cleanParamsFilepathDataOpts, true)
+    this.writeFileBulk = this._wrap(this.writeFileBulk, cleanParamsFilesOpts, true)
     this.unlink = this._wrap(this.unlink, cleanParamsFilepathOpts, true)
+    this.unlinkBulk = this._wrap(this.unlinkBulk, cleanParamsFilepathsOpts, true)
     this.readdir = this._wrap(this.readdir, cleanParamsFilepathOpts, false)
     this.mkdir = this._wrap(this.mkdir, cleanParamsFilepathOpts, true)
     this.rmdir = this._wrap(this.rmdir, cleanParamsFilepathOpts, true)
@@ -153,14 +191,25 @@ module.exports = class PromisifiedFS {
   async readFile(filepath, opts) {
     return this._backend.readFile(filepath, opts);
   }
+  async readFileBulk(filepaths, opts) {
+    return this._backend.readFileBulk(filepaths, opts);
+  }
   async writeFile(filepath, data, opts) {
     await this._backend.writeFile(filepath, data, opts);
     return null
   }
+  async writeFileBulk(files, opts) {
+    await this._backend.writeFileBulk(files, opts);
+    return null;
+  }
   async unlink(filepath, opts) {
     await this._backend.unlink(filepath, opts);
     return null
   }
+  async unlinkBulk(filepath, opts) {
+    await this._backend.unlinkBulk(filepath, opts);
+    return null;
+  }
   async readdir(filepath, opts) {
     return this._backend.readdir(filepath, opts);
   }
diff --git a/node_modules/@isomorphic-git/lightning-fs/src/index.js b/node_modules/@isomorphic-git/lightning-fs/src/index.js
index 3947876..20cab37 100755
--- a/node_modules/@isomorphic-git/lightning-fs/src/index.js
+++ b/node_modules/@isomorphic-git/lightning-fs/src/index.js
@@ -17,8 +17,11 @@ module.exports = class FS {
     // Needed so things don't break if you destructure fs and pass individual functions around
     this.init = this.init.bind(this)
     this.readFile = this.readFile.bind(this)
+    this.readFileBulk = this.readFileBulk.bind(this)
     this.writeFile = this.writeFile.bind(this)
+    this.writeFileBulk = this.writeFileBulk.bind(this)
     this.unlink = this.unlink.bind(this)
+    this.unlinkBulk = this.unlinkBulk.bind(this)
     this.readdir = this.readdir.bind(this)
     this.mkdir = this.mkdir.bind(this)
     this.rmdir = this.rmdir.bind(this)
@@ -37,14 +40,26 @@ module.exports = class FS {
     const [resolve, reject] = wrapCallback(opts, cb);
     this.promises.readFile(filepath, opts).then(resolve).catch(reject)
   }
+  readFileBulk(filepaths, opts, cb) {
+    const [resolve, reject] = wrapCallback(opts, cb);
+    this.promises.readFileBulk(filepaths, opts).then(resolve).catch(reject);
+  }
   writeFile(filepath, data, opts, cb) {
     const [resolve, reject] = wrapCallback(opts, cb);
     this.promises.writeFile(filepath, data, opts).then(resolve).catch(reject);
   }
+  writeFileBulk(filepaths, opts, cb) {
+    const [resolve, reject] = wrapCallback(opts, cb);
+    this.promises.writeFileBulk(filepaths, opts).then(resolve).catch(reject);
+  }
   unlink(filepath, opts, cb) {
     const [resolve, reject] = wrapCallback(opts, cb);
     this.promises.unlink(filepath, opts).then(resolve).catch(reject);
   }
+  unlinkBulk(filepaths, opts, cb) {
+    const [resolve, reject] = wrapCallback(opts, cb);
+    this.promises.unlinkBulk(filepaths, opts).then(resolve).catch(reject);
+  }
   readdir(filepath, opts, cb) {
     const [resolve, reject] = wrapCallback(opts, cb);
     this.promises.readdir(filepath, opts).then(resolve).catch(reject);
