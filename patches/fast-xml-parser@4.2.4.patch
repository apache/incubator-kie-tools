diff --git a/src/fxp.d.ts b/src/fxp.d.ts
index d622f27e33a2e02271c83326942a228c5df058fa..c0490f10381e47c114cf72f87ec432f11b4210ee 100644
--- a/src/fxp.d.ts
+++ b/src/fxp.d.ts
@@ -11,6 +11,7 @@ type X2jOptions = {
   trimValues: boolean;
   cdataPropName: false | string;
   commentPropName: false | string;
+  depth?: number;
     /**
 Control how tag value should be parsed. Called only if tag value is not empty
 
@@ -30,7 +31,7 @@ Control how tag value should be parsed. Called only if tag value is not empty
   htmlEntities: boolean;
   ignoreDeclaration: boolean;
   ignorePiTags: boolean;
-  transformTagName: ((tagName: string) => string) | false;
+  transformTagName: ((tagName: string) => { newTagName: string, newExtraAttrs?: object }) | false;
   transformAttributeName: ((attributeName: string) => string) | false;
     /**
 Change the tag name when a different name is returned. Skip the tag from parsed result when false is returned. 
diff --git a/src/xmlparser/OrderedObjParser.js b/src/xmlparser/OrderedObjParser.js
index db11a8c06da37a2af73db75dfd36354dd4f698fc..251e04bc45e95e7f0b8bffae407b68495f215eda 100644
--- a/src/xmlparser/OrderedObjParser.js
+++ b/src/xmlparser/OrderedObjParser.js
@@ -199,7 +199,8 @@ const parseXml = function(xmlData) {
         }
 
         if(this.options.transformTagName) {
-          tagName = this.options.transformTagName(tagName);
+          const { newTagName } = this.options.transformTagName(tagName);
+          tagName = newTagName;
         }
 
         if(currentNode){
@@ -284,8 +285,11 @@ const parseXml = function(xmlData) {
         let attrExpPresent = result.attrExpPresent;
         let closeIndex = result.closeIndex;
 
+        let extraAttrs = undefined;
         if (this.options.transformTagName) {
-          tagName = this.options.transformTagName(tagName);
+          const { newTagName, newExtraAttrs } = this.options.transformTagName(tagName);
+          tagName = newTagName;
+          extraAttrs = newExtraAttrs;
         }
         
         //save text as child node
@@ -305,7 +309,7 @@ const parseXml = function(xmlData) {
         if(tagName !== xmlObj.tagname){
           jPath += jPath ? "." + tagName : tagName;
         }
-        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace
+        if (this.isItStopNode(this.options.stopNodes, jPath, tagName) || this.options.depth === jPath.split('.').length - 1) { //TODO: namespace
           let tagContent = "";
           //self-closing tag
           if(tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1){
@@ -346,13 +350,17 @@ const parseXml = function(xmlData) {
               tagExp = tagExp.substr(0, tagExp.length - 1);
             }
             
-            if(this.options.transformTagName) {
-              tagName = this.options.transformTagName(tagName);
+            let extraAttrs = undefined;
+            if (this.options.transformTagName) {
+              const { newTagName, newExtraAttrs } = this.options.transformTagName(tagName);
+              tagName = newTagName;
+              extraAttrs = newExtraAttrs;
             }
 
             const childNode = new xmlNode(tagName);
             if(tagName !== tagExp && attrExpPresent){
-              childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
+              const attrMap = this.buildAttributesMap(tagExp, jPath, tagName);
+              childNode[":@"] = extraAttrs ? { ...extraAttrs, ...attrMap } : attrMap;
             }
             this.addChild(currentNode, childNode, jPath)
             jPath = jPath.substr(0, jPath.lastIndexOf("."));
@@ -363,7 +371,8 @@ const parseXml = function(xmlData) {
             this.tagsNodeStack.push(currentNode);
             
             if(tagName !== tagExp && attrExpPresent){
-              childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
+              const attrMap = this.buildAttributesMap(tagExp, jPath, tagName);
+              childNode[":@"] = extraAttrs ? { ...extraAttrs, ...attrMap } : attrMap;
             }
             this.addChild(currentNode, childNode, jPath)
             currentNode = childNode;
diff --git a/src/xmlparser/node2json.js b/src/xmlparser/node2json.js
index 304557380dd8129d4b60f44b94223425b19fbe02..3750b5d31fd26009245999a81632d6217b62c840 100644
--- a/src/xmlparser/node2json.js
+++ b/src/xmlparser/node2json.js
@@ -43,7 +43,7 @@ function compress(arr, options, jPath){
         val = val[options.textNodeName];
       }else if(Object.keys(val).length === 0){
         if(options.alwaysCreateTextNode) val[options.textNodeName] = "";
-        else val = "";
+        else val = options.tagValueProcessor?.(property, "", jPath + "." + property, false, true) ?? "";
       }
 
       if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {