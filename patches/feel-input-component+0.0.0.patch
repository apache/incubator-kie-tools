diff --git a/node_modules/feel-input-component/src/FeelInput/FeelInput.tsx b/node_modules/feel-input-component/src/FeelInput/FeelInput.tsx
index b915b46..5b43099 100644
--- a/node_modules/feel-input-component/src/FeelInput/FeelInput.tsx
+++ b/node_modules/feel-input-component/src/FeelInput/FeelInput.tsx
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-import * as Monaco from "monaco-editor";
+import * as Monaco from "@kie-tooling-core/monaco-editor";
 import * as React from "react";
 import { useCallback, useEffect, useImperativeHandle, useMemo, useRef } from "react";
 import { FeelEditorService, SuggestionProvider } from "../Monaco";
diff --git a/node_modules/feel-input-component/src/Monaco/FeelConfigs.ts b/node_modules/feel-input-component/src/Monaco/FeelConfigs.ts
index 684b391..994f939 100644
--- a/node_modules/feel-input-component/src/Monaco/FeelConfigs.ts
+++ b/node_modules/feel-input-component/src/Monaco/FeelConfigs.ts
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-import * as Monaco from "monaco-editor";
+import * as Monaco from "@kie-tooling-core/monaco-editor";
 
 export const MONACO_FEEL_LANGUAGE = "feel-language";
 
diff --git a/node_modules/feel-input-component/src/Monaco/FeelEditorService.ts b/node_modules/feel-input-component/src/Monaco/FeelEditorService.ts
index 6dca54a..8c99c52 100644
--- a/node_modules/feel-input-component/src/Monaco/FeelEditorService.ts
+++ b/node_modules/feel-input-component/src/Monaco/FeelEditorService.ts
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-import * as Monaco from "monaco-editor";
+import * as Monaco from "@kie-tooling-core/monaco-editor";
 import {
   initializeFeelCompletionItemProvider,
   initializeMonacoTheme,
diff --git a/node_modules/feel-input-component/src/Monaco/FeelInitializer.ts b/node_modules/feel-input-component/src/Monaco/FeelInitializer.ts
index fdd9d27..2218660 100644
--- a/node_modules/feel-input-component/src/Monaco/FeelInitializer.ts
+++ b/node_modules/feel-input-component/src/Monaco/FeelInitializer.ts
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-import * as Monaco from "monaco-editor";
+import * as Monaco from "@kie-tooling-core/monaco-editor";
 import "monaco-editor/dev/vs/editor/editor.main.css";
 import { MONACO_FEEL_LANGUAGE, MONACO_FEEL_THEME, feelTheme, feelDefaultSuggestions, feelTokensConfig } from ".";
 
diff --git a/node_modules/feel-input-component/src/__mocks__/monacoMock.js b/node_modules/feel-input-component/src/__mocks__/monacoMock.js
deleted file mode 100644
index 330290d..0000000
--- a/node_modules/feel-input-component/src/__mocks__/monacoMock.js
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright 2021 Red Hat, Inc. and/or its affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-const languages = [];
-
-module.exports = {
-  languages: {
-    registeredLanguages: [],
-    register: (language) => {
-      languages.push(language);
-    },
-    getLanguages: () => {
-      return languages;
-    },
-    setMonarchTokensProvider: (_name, _tokens) => {},
-    registerCompletionItemProvider: (_name, _provider) => {},
-    CompletionItemKind: {
-      Keyword: "Keyword",
-      Function: "Function",
-    },
-    CompletionItemInsertTextRule: {
-      InsertAsSnippet: "InsertAsSnippet",
-    },
-  },
-  editor: {
-    defineTheme: (_name, _theme) => {},
-    colorize: () => ({
-      then: (fn) => fn(),
-    }),
-    create: (element, _config) => {
-      element.innerHTML = "<monaco-editor-mock />";
-      return {
-        dispose: () => {},
-        getValue: () => "editor value",
-        setValue: (_v) => {},
-        setPosition: (_v) => {},
-        focus: () => {},
-        onDidChangeModelContent: (fn) => fn(),
-        onDidBlurEditorText: (fn) => fn(),
-        onKeyDown: (fn) => fn(),
-      };
-    },
-  },
-};
diff --git a/node_modules/feel-input-component/src/__tests__/FeelInput/FeelInput.test.tsx b/node_modules/feel-input-component/src/__tests__/FeelInput/FeelInput.test.tsx
deleted file mode 100644
index 5aca551..0000000
--- a/node_modules/feel-input-component/src/__tests__/FeelInput/FeelInput.test.tsx
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright 2021 Red Hat, Inc. and/or its affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { render } from "@testing-library/react";
-import * as React from "react";
-import { FeelInput } from "../../";
-
-describe("FeelInput", () => {
-  describe("when it's not enabled", () => {
-    test("should render an empty component", () => {
-      const { container } = render(<FeelInput enabled={false} />);
-      expect(container).toMatchSnapshot();
-    });
-  });
-
-  describe("when it's enabled", () => {
-    test("should render the FEEL input component", () => {
-      const { container } = render(<FeelInput enabled={true} />);
-      expect(container).toMatchSnapshot();
-    });
-  });
-});
diff --git a/node_modules/feel-input-component/src/__tests__/FeelInput/__snapshots__/FeelInput.test.tsx.snap b/node_modules/feel-input-component/src/__tests__/FeelInput/__snapshots__/FeelInput.test.tsx.snap
deleted file mode 100644
index cd52b36..0000000
--- a/node_modules/feel-input-component/src/__tests__/FeelInput/__snapshots__/FeelInput.test.tsx.snap
+++ /dev/null
@@ -1,23 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`FeelInput when it's enabled should render the FEEL input component 1`] = `
-<div>
-  <div
-    class="feel-input"
-  >
-    <div>
-      <monaco-editor-mock />
-    </div>
-  </div>
-</div>
-`;
-
-exports[`FeelInput when it's not enabled should render an empty component 1`] = `
-<div>
-  <div
-    class="feel-input"
-  >
-    <div />
-  </div>
-</div>
-`;
diff --git a/node_modules/feel-input-component/src/__tests__/Monaco/FeelConfigs.test.ts b/node_modules/feel-input-component/src/__tests__/Monaco/FeelConfigs.test.ts
deleted file mode 100644
index b101b43..0000000
--- a/node_modules/feel-input-component/src/__tests__/Monaco/FeelConfigs.test.ts
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Copyright 2021 Red Hat, Inc. and/or its affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import {
-  feelTheme,
-  feelTokensConfig,
-  feelDefaultConfig,
-  feelDefaultSuggestions,
-  MONACO_FEEL_LANGUAGE,
-  MONACO_FEEL_THEME,
-} from "../../";
-
-describe("FeelConfigs", () => {
-  test("feelTheme", () => {
-    const theme = feelTheme();
-
-    expect(theme.base).toBe("vs");
-    expect(theme.inherit).toBeTruthy();
-    expect(theme.rules).toHaveLength(5);
-    expect(theme.colors["editorLineNumber.foreground"]).toBe("#000000");
-  });
-
-  test("feelTokensConfig", () => {
-    const tokens = feelTokensConfig().tokenizer.root;
-
-    expect(tokens).toHaveLength(6);
-    expect(tokens.map((t: any) => t[1])).toEqual([
-      "feel-boolean",
-      "feel-numeric",
-      "feel-string",
-      "feel-function",
-      "feel-keyword",
-      "feel-keyword",
-    ]);
-  });
-
-  test("feelDefaultConfig", () => {
-    const value = "test";
-    const config = feelDefaultConfig({ value });
-
-    expect(config.language).toBe(MONACO_FEEL_LANGUAGE);
-    expect(config.theme).toBe(MONACO_FEEL_THEME);
-    expect(config.fontSize).toBe(15);
-    expect(config.contextmenu).toBe(false);
-    expect(config.useTabStops).toBe(false);
-    expect(config.folding).toBe(false);
-    expect(config.automaticLayout).toBe(true);
-    expect(config.lineNumbersMinChars).toBe(0);
-    expect(config.overviewRulerBorder).toBe(false);
-    expect(config.scrollBeyondLastLine).toBe(false);
-    expect(config.hideCursorInOverviewRuler).toBe(true);
-    expect(config.scrollbar?.useShadows).toBe(false);
-    expect(config.minimap?.enabled).toBe(false);
-    expect(config.value).toBe(value);
-  });
-
-  test("feelDefaultSuggestions", () => {
-    const suggestions = feelDefaultSuggestions();
-
-    expect(suggestions).toHaveLength(47);
-
-    // Keyword suggestions
-    expect(suggestions[0]).toEqual({
-      kind: "Keyword",
-      insertTextRules: "InsertAsSnippet",
-      label: "if",
-      insertText: "if $1 then\n\t$0\nelse\n\t",
-    });
-    expect(suggestions[1]).toEqual({
-      kind: "Keyword",
-      insertTextRules: "InsertAsSnippet",
-      label: "for",
-      insertText: "for element in $1 return\n\t$0",
-    });
-
-    // Function suggestions
-    expect(suggestions[2]).toEqual({
-      kind: "Function",
-      insertTextRules: "InsertAsSnippet",
-      label: "substring(string, start position, length?)",
-      insertText: "substring($1, $2, $3)",
-    });
-    expect(suggestions[3]).toEqual({
-      kind: "Function",
-      insertTextRules: "InsertAsSnippet",
-      label: "string length(string)",
-      insertText: "string length($1)",
-    });
-  });
-});
diff --git a/node_modules/feel-input-component/src/__tests__/Monaco/FeelEditorService.test.ts b/node_modules/feel-input-component/src/__tests__/Monaco/FeelEditorService.test.ts
deleted file mode 100644
index 7e6f378..0000000
--- a/node_modules/feel-input-component/src/__tests__/Monaco/FeelEditorService.test.ts
+++ /dev/null
@@ -1,103 +0,0 @@
-import { act } from "react-dom/test-utils";
-/*
- * Copyright 2021 Red Hat, Inc. and/or its affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { FeelEditorService } from "../../Monaco";
-
-describe("FeelEditorService", () => {
-  test("createEditor, when DOM element is not present", () => {
-    expect(() => {
-      editorBuilder().createEditor();
-    }).toThrow("FEEL editor cannot be created without a DOM element.");
-  });
-
-  test("isInitialized, when it's not intialized", () => {
-    expect(FeelEditorService.isInitialized()).toBeFalsy();
-  });
-
-  test("isInitialized, when it's intialized", () => {
-    act(() => {
-      editorBuilder().withDomElement(domElement()).createEditor();
-    });
-    expect(FeelEditorService.isInitialized()).toBeTruthy();
-  });
-
-  test("createEditor when all elements are present", () => {
-    const onBlur = jest.fn();
-    const onChange = jest.fn();
-    const onKeyDown = jest.fn();
-    const options = {};
-
-    FeelEditorService.setServiceInstance(undefined);
-
-    FeelEditorService.getEditorBuilder()
-      .withDomElement(domElement())
-      .withOnBlur(onBlur)
-      .withOnChange(onChange)
-      .withOnKeyDown(onKeyDown)
-      .withOptions(options)
-      .createEditor();
-
-    expect(onBlur).toBeCalled();
-    expect(onChange).toBeCalled();
-    expect(onKeyDown).toBeCalled();
-  });
-
-  test("getEditorBuilder", () => {
-    expect(editorBuilder()).toBe(FeelEditorService.getEditorBuilder());
-  });
-
-  test("getStandaloneEditor", () => {
-    const editor = editorBuilder().withDomElement(domElement()).createEditor();
-    expect(editor).toBe(FeelEditorService.getStandaloneEditor());
-  });
-
-  test("colorize", () => {
-    FeelEditorService.setServiceInstance(undefined);
-
-    const builder = editorBuilder().withDomElement(domElement());
-    const spyCreateEditor = jest.spyOn(builder, "createEditor");
-    const spyDispose = jest.spyOn(builder, "dispose");
-
-    builder.colorize("");
-
-    expect(spyCreateEditor).toBeCalled();
-    expect(spyDispose).toBeCalled();
-  });
-
-  test("dispose", () => {
-    const editor = editorBuilder().withDomElement(domElement()).createEditor();
-    const disposeSpy = jest.spyOn(editor, "dispose");
-
-    FeelEditorService.dispose();
-
-    expect(disposeSpy).toBeCalled();
-  });
-});
-
-const domElement = () => document.createElement("span");
-const editorBuilder = () => FeelEditorService.getEditorBuilder();
-
-jest.mock("../../Monaco", () => {
-  const actualMonacoModule = jest.requireActual("../../Monaco");
-  return {
-    ...actualMonacoModule,
-    initializeFeelLanguage: jest.fn(),
-    initializeMonacoTheme: jest.fn(),
-    initializeFeelTokensProvider: jest.fn(),
-    initializeFeelCompletionItemProvider: jest.fn(),
-  };
-});
diff --git a/node_modules/feel-input-component/src/__tests__/Monaco/FeelInitializer.test.ts b/node_modules/feel-input-component/src/__tests__/Monaco/FeelInitializer.test.ts
deleted file mode 100644
index af3057c..0000000
--- a/node_modules/feel-input-component/src/__tests__/Monaco/FeelInitializer.test.ts
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * Copyright 2021 Red Hat, Inc. and/or its affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import {
-  initializeFeelLanguage,
-  initializeMonacoTheme,
-  initializeFeelTokensProvider,
-  feelTheme,
-  feelTokensConfig,
-  initializeFeelCompletionItemProvider,
-} from "../../";
-import * as Monaco from "monaco-editor";
-import { SuggestionProvider } from "../../../showcase/src/lib/Monaco/FeelInitializer";
-
-describe("FeelInitializer", () => {
-  test("initializeFeelLanguage", () => {
-    initializeFeelLanguage();
-
-    const languages = Monaco.languages.getLanguages();
-    const lastRegistered = languages[languages.length - 1];
-
-    expect(lastRegistered).toEqual({
-      aliases: ["feel-language", "feel", "feel-dmn"],
-      id: "feel-language",
-      mimetypes: ["text/feel"],
-    });
-  });
-
-  test("initializeMonacoTheme", () => {
-    const spyDefineTheme = jest.spyOn(Monaco.editor, "defineTheme");
-    initializeMonacoTheme();
-    expect(spyDefineTheme).toBeCalledWith("feel-theme", feelTheme());
-  });
-
-  test("initializeFeelTokensProvider", () => {
-    const spySetMonarchTokensProvider = jest.spyOn(Monaco.languages, "setMonarchTokensProvider");
-    initializeFeelTokensProvider();
-    expect(spySetMonarchTokensProvider).toBeCalledWith("feel-language", feelTokensConfig());
-  });
-
-  test("initializeFeelCompletionItemProvider when provider is not passed returns default suggestions", () => {
-    const spyRegisterCompletionItemProvider = jest.spyOn(Monaco.languages, "registerCompletionItemProvider");
-    const model = {} as Monaco.editor.ITextModel;
-    const position = {} as Monaco.Position;
-
-    const suggestions = initializeFeelCompletionItemProvider()(model, position).suggestions;
-
-    expect(spyRegisterCompletionItemProvider).toBeCalledWith("feel-language", expect.anything());
-    expect(suggestions).toHaveLength(47);
-  });
-
-  test("initializeFeelCompletionItemProvider when provider is passed returns provider suggestions", () => {
-    const spyRegisterCompletionItemProvider = jest.spyOn(Monaco.languages, "registerCompletionItemProvider");
-    const provider = (_feelExpression: string, _row: number, _col: number) => {
-      return [
-        {
-          label: "label",
-          insertText: "insertText",
-        } as Monaco.languages.CompletionItem,
-      ];
-    };
-    const model = {
-      getValue: () => "value",
-    } as Monaco.editor.ITextModel;
-    const position = {} as Monaco.Position;
-
-    const suggestions = initializeFeelCompletionItemProvider(provider)(model, position).suggestions;
-
-    expect(spyRegisterCompletionItemProvider).toBeCalledWith("feel-language", expect.anything());
-    expect(suggestions).toHaveLength(1);
-  });
-});
diff --git a/node_modules/feel-input-component/src/__tests__/test-setup.ts b/node_modules/feel-input-component/src/__tests__/test-setup.ts
deleted file mode 100644
index b418dfd..0000000
--- a/node_modules/feel-input-component/src/__tests__/test-setup.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-/*
- * Copyright 2021 Red Hat, Inc. and/or its affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import "jest-webextension-mock";
-import "@testing-library/jest-dom";
