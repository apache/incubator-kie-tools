// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AutoForm> tests <AutoForm> - Full rendering 1`] = `
<div>
  import React, { useState } from &#39;react&#39;;
import {
  TextInput,
  FormGroup,
  SelectOption,
  SelectOptionObject,
  Select,
  SelectVariant,
  Checkbox,
  Radio,
  DatePicker,
  Flex,
  FlexItem,
  InputGroup,
  TimePicker,
  Alert,
} from &#39;@patternfly/react-core&#39;;

const Form__HRInterview: React.FC&lt;any&gt; = (props: any) =&gt; {
  const [name, set__name] = useState&lt;string&gt;();
  const [position, set__position] = useState&lt;string&gt;(&#39;&#39;);
  const [position__expanded, set__position__expanded] =
    useState&lt;boolean&gt;(false);
  const [otherPositions, set__otherPositions] = useState&lt;string[]&gt;([]);
  const [otherPositions__expanded, set__otherPositions__expanded] =
    useState&lt;boolean&gt;(false);
  const [skills, set__skills] = useState&lt;string[]&gt;([]);
  const [age, set__age] = useState&lt;string&gt;();
  const [salary, set__salary] = useState&lt;string&gt;();
  const [rating, set__rating] = useState&lt;string&gt;();
  const [hire, set__hire] = useState&lt;boolean&gt;();
  const [hidingDate, set__hidingDate] = useState&lt;Date&gt;();
  const [friends, set__friends] = useState&lt;any[]&gt;([]);

  const handleSelect = (
    newSelection: string | SelectOptionObject,
    isPlaceHolder: boolean,
    currentSelection: string,
    setSelection: (val: string) =&gt; void,
    setExpanded: (expanded: boolean) =&gt; void
  ) =&gt; {
    if (isPlaceHolder) {
      setSelection(&#39;&#39;);
      setExpanded(false);
    } else {
      const parsedSelection = newSelection.toString
        ? newSelection.toString()
        : (newSelection as string);
      setSelection(parsedSelection || &#39;&#39;);
      setExpanded(false);
    }
  };
  const handleMultipleSelect = (
    newSelection: string | SelectOptionObject,
    isPlaceHolder: boolean,
    currentValue: string[],
    setSelection: (val: string[]) =&gt; void
  ) =&gt; {
    if (isPlaceHolder) {
      setSelection([]);
    } else {
      const parseSelection = (): string[] =&gt; {
        const selectedValue = newSelection.toString
          ? newSelection.toString()
          : (newSelection as string);
        if (currentValue.indexOf(selectedValue) != -1) {
          return currentValue.filter((s) =&gt; s !== selectedValue);
        }
        return [selectedValue, ...currentValue];
      };
      setSelection(parseSelection());
    }
  };
  const handleCheckboxGroupChange = (
    checkboxValue: string,
    groupValue: string[],
    setter: (val: string[]) =&gt; void
  ): void =&gt; {
    const newValues = [...groupValue];
    const index = newValues.indexOf(checkboxValue);
    if (index != -1) {
      newValues.splice(index, 1);
    } else {
      newValues.push(checkboxValue);
    }
    setter(newValues);
  };
  const parseDate = (date?: Date): string =&gt; {
    if (!date) {
      return &#39;&#39;;
    }
    return date.toISOString().slice(0, -14);
  };
  const onDateChange = (
    newValue: string,
    setter: (date: Date) =&gt; void,
    previousValue?: Date
  ) =&gt; {
    if (newValue) {
      const newDate = new Date(newValue);
      const time = parseTime(previousValue);
      if (time !== &#39;&#39;) {
        newDate.setHours(parseInt(time &amp;&amp; time.split(&#39;:&#39;)[0]));
        newDate.setMinutes(parseInt(time &amp;&amp; time.split(&#39;:&#39;)[1].split(&#39; &#39;)[0]));
      }
      setter(newDate);
    }
  };
  const parseTime = (date?: Date): string =&gt; {
    if (!date) {
      return &#39;&#39;;
    }
    let isAm = true;
    let hours = date.getHours();
    if (hours &gt; 12) {
      hours %= 12;
      isAm = false;
    }
    let minutes = date.getMinutes().toString();
    if (minutes.length == 1) {
      minutes = &#39;0&#39; + minutes;
    }
    return \`\${hours}:\${minutes} \${isAm ? &#39;AM&#39; : &#39;PM&#39;}\`;
  };
  const onTimeChange = (
    time: string,
    setter: (date: Date) =&gt; void,
    previousValue?: Date,
    hours?: number,
    minutes?: number
  ) =&gt; {
    if (previousValue) {
      const newDate = new Date(previousValue);
      if (hours &amp;&amp; minutes) {
        newDate.setHours(hours);
        newDate.setMinutes(minutes);
      } else if (time !== &#39;&#39;) {
        const localeHours = parseInt(time &amp;&amp; time.split(&#39;:&#39;)[0]);
        const localeMinutes = parseInt(
          time &amp;&amp; time.split(&#39;:&#39;)[1].split(&#39; &#39;)[0]
        );
        if (!isNaN(localeHours) &amp;&amp; !isNaN(localeMinutes)) {
          newDate.setHours(localeHours);
          newDate.setMinutes(localeMinutes);
        }
      }
      setter(newDate);
    }
  };

  return (
    &lt;div className={&#39;pf-c-form&#39;}&gt;
      &lt;FormGroup
        fieldId={&#39;uniforms-0000-0000&#39;}
        label={&#39;Name&#39;}
        isRequired={true}&gt;
        &lt;TextInput
          name={&#39;name&#39;}
          id={&#39;uniforms-0000-0000&#39;}
          isDisabled={false}
          placeholder={&#39;&#39;}
          type={&#39;text&#39;}
          value={name}
          onChange={set__name}
        /&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup
        fieldId={&#39;uniforms-0000-0002&#39;}
        label={&#39;Position&#39;}
        isRequired={true}&gt;
        &lt;Select
          id={&#39;uniforms-0000-0002&#39;}
          name={&#39;position&#39;}
          variant={SelectVariant.single}
          isDisabled={false}
          placeholderText={&#39;&#39;}
          isOpen={position__expanded}
          selections={position}
          onToggle={(isOpen) =&gt; set__position__expanded(isOpen)}
          onSelect={(event, value, isPlaceHolder) =&gt; {
            handleSelect(
              value,
              isPlaceHolder,
              position,
              set__position,
              set__position__expanded
            );
          }}
          value={position}&gt;
          &lt;SelectOption key={&#39;Developer&#39;} value={&#39;Developer&#39;}&gt;
            Developer
          &lt;/SelectOption&gt;
          &lt;SelectOption key={&#39;HR&#39;} value={&#39;HR&#39;}&gt;
            HR
          &lt;/SelectOption&gt;
          &lt;SelectOption key={&#39;UX&#39;} value={&#39;UX&#39;}&gt;
            UX
          &lt;/SelectOption&gt;
        &lt;/Select&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup
        fieldId={&#39;uniforms-0000-0004&#39;}
        label={&#39;Other positions&#39;}
        isRequired={true}&gt;
        &lt;Select
          id={&#39;uniforms-0000-0004&#39;}
          name={&#39;otherPositions&#39;}
          variant={SelectVariant.typeaheadMulti}
          isDisabled={false}
          placeholderText={&#39;&#39;}
          isOpen={otherPositions__expanded}
          selections={otherPositions}
          onToggle={(isOpen) =&gt; set__otherPositions__expanded(isOpen)}
          onSelect={(event, value, isPlaceHolder) =&gt; {
            handleMultipleSelect(
              value,
              isPlaceHolder,
              otherPositions,
              set__otherPositions
            );
          }}
          value={otherPositions}&gt;
          &lt;SelectOption key={&#39;Developer&#39;} value={&#39;Developer&#39;}&gt;
            Developer
          &lt;/SelectOption&gt;
          &lt;SelectOption key={&#39;HR&#39;} value={&#39;HR&#39;}&gt;
            HR
          &lt;/SelectOption&gt;
          &lt;SelectOption key={&#39;UX&#39;} value={&#39;UX&#39;}&gt;
            UX
          &lt;/SelectOption&gt;
        &lt;/Select&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup
        fieldId={&#39;uniforms-0000-0006&#39;}
        label={&#39;Skills&#39;}
        isRequired={true}&gt;
        &lt;Checkbox
          key={&#39;uniforms-0000-0006-Java&#39;}
          id={&#39;uniforms-0000-0006-Java&#39;}
          name={&#39;skills&#39;}
          aria-label={&#39;skills&#39;}
          label={&#39;Java&#39;}
          isDisabled={false}
          isChecked={skills.indexOf(&#39;Java&#39;) != -1}
          onChange={() =&gt;
            handleCheckboxGroupChange(&#39;Java&#39;, skills, set__skills)
          }
          value={&#39;Java&#39;}
        /&gt;
        &lt;Checkbox
          key={&#39;uniforms-0000-0006-React&#39;}
          id={&#39;uniforms-0000-0006-React&#39;}
          name={&#39;skills&#39;}
          aria-label={&#39;skills&#39;}
          label={&#39;React&#39;}
          isDisabled={false}
          isChecked={skills.indexOf(&#39;React&#39;) != -1}
          onChange={() =&gt;
            handleCheckboxGroupChange(&#39;React&#39;, skills, set__skills)
          }
          value={&#39;React&#39;}
        /&gt;
        &lt;Checkbox
          key={&#39;uniforms-0000-0006-TypeScript&#39;}
          id={&#39;uniforms-0000-0006-TypeScript&#39;}
          name={&#39;skills&#39;}
          aria-label={&#39;skills&#39;}
          label={&#39;TypeScript&#39;}
          isDisabled={false}
          isChecked={skills.indexOf(&#39;TypeScript&#39;) != -1}
          onChange={() =&gt;
            handleCheckboxGroupChange(&#39;TypeScript&#39;, skills, set__skills)
          }
          value={&#39;TypeScript&#39;}
        /&gt;
        &lt;Checkbox
          key={&#39;uniforms-0000-0006-Quarkus&#39;}
          id={&#39;uniforms-0000-0006-Quarkus&#39;}
          name={&#39;skills&#39;}
          aria-label={&#39;skills&#39;}
          label={&#39;Quarkus&#39;}
          isDisabled={false}
          isChecked={skills.indexOf(&#39;Quarkus&#39;) != -1}
          onChange={() =&gt;
            handleCheckboxGroupChange(&#39;Quarkus&#39;, skills, set__skills)
          }
          value={&#39;Quarkus&#39;}
        /&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup fieldId={&#39;uniforms-0000-0008&#39;} label={&#39;Age&#39;} isRequired={true}&gt;
        &lt;TextInput
          type={&#39;number&#39;}
          name={&#39;age&#39;}
          isDisabled={false}
          id={&#39;uniforms-0000-0008&#39;}
          placeholder={&#39;&#39;}
          step={1}
          max={99}
          min={18}
          value={age}
          onChange={set__age}
        /&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup
        fieldId={&#39;uniforms-0000-000a&#39;}
        label={&#39;Salary&#39;}
        isRequired={true}&gt;
        &lt;TextInput
          type={&#39;number&#39;}
          name={&#39;salary&#39;}
          isDisabled={false}
          id={&#39;uniforms-0000-000a&#39;}
          placeholder={&#39;&#39;}
          step={0.01}
          max={1000.5}
          value={salary}
          onChange={set__salary}
        /&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup
        fieldId={&#39;uniforms-0000-000c&#39;}
        label={&#39;Rating&#39;}
        isRequired={true}&gt;
        &lt;div&gt;
          &lt;Radio
            key={&#39;1&#39;}
            id={&#39;uniforms-0000-000c-1&#39;}
            name={&#39;rating&#39;}
            isChecked={&#39;1&#39; === rating}
            isDisabled={false}
            label={&#39;1&#39;}
            aria-label={&#39;rating&#39;}
            onChange={() =&gt; set__rating(&#39;1&#39;)}
          /&gt;
          &lt;Radio
            key={&#39;2&#39;}
            id={&#39;uniforms-0000-000c-2&#39;}
            name={&#39;rating&#39;}
            isChecked={&#39;2&#39; === rating}
            isDisabled={false}
            label={&#39;2&#39;}
            aria-label={&#39;rating&#39;}
            onChange={() =&gt; set__rating(&#39;2&#39;)}
          /&gt;
          &lt;Radio
            key={&#39;3&#39;}
            id={&#39;uniforms-0000-000c-3&#39;}
            name={&#39;rating&#39;}
            isChecked={&#39;3&#39; === rating}
            isDisabled={false}
            label={&#39;3&#39;}
            aria-label={&#39;rating&#39;}
            onChange={() =&gt; set__rating(&#39;3&#39;)}
          /&gt;
          &lt;Radio
            key={&#39;4&#39;}
            id={&#39;uniforms-0000-000c-4&#39;}
            name={&#39;rating&#39;}
            isChecked={&#39;4&#39; === rating}
            isDisabled={false}
            label={&#39;4&#39;}
            aria-label={&#39;rating&#39;}
            onChange={() =&gt; set__rating(&#39;4&#39;)}
          /&gt;
          &lt;Radio
            key={&#39;5&#39;}
            id={&#39;uniforms-0000-000c-5&#39;}
            name={&#39;rating&#39;}
            isChecked={&#39;5&#39; === rating}
            isDisabled={false}
            label={&#39;5&#39;}
            aria-label={&#39;rating&#39;}
            onChange={() =&gt; set__rating(&#39;5&#39;)}
          /&gt;
        &lt;/div&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup fieldId=&#39;uniforms-0000-000e&#39;&gt;
        &lt;Checkbox
          isChecked={hire}
          isDisabled={false}
          id={&#39;uniforms-0000-000e&#39;}
          name={&#39;hire&#39;}
          label={&#39;Hire&#39;}
          onChange={set__hire}
        /&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup
        fieldId={&#39;uniforms-0000-000g&#39;}
        label={&#39;Hiding date&#39;}
        isRequired={true}&gt;
        &lt;Flex direction={{ default: &#39;column&#39; }} id={&#39;uniforms-0000-000g&#39;}&gt;
          &lt;FlexItem&gt;
            &lt;InputGroup style={{ background: &#39;transparent&#39; }}&gt;
              &lt;DatePicker
                id={&#39;date-picker-uniforms-0000-000g&#39;}
                isDisabled={false}
                name={&#39;hidingDate&#39;}
                onChange={(newDate) =&gt;
                  onDateChange(newDate, set__hidingDate, hidingDate)
                }
                value={parseDate(hidingDate)}
              /&gt;
              &lt;TimePicker
                id={&#39;time-picker-uniforms-0000-000g&#39;}
                isDisabled={false}
                name={&#39;hidingDate&#39;}
                onChange={(time, hours?, minutes?) =&gt;
                  onTimeChange(
                    time,
                    set__hidingDate,
                    hidingDate,
                    hours,
                    minutes
                  )
                }
                style={{ width: &#39;120px&#39; }}
                defaultTime={parseTime(hidingDate)}
              /&gt;
            &lt;/InputGroup&gt;
          &lt;/FlexItem&gt;
        &lt;/Flex&gt;
      &lt;/FormGroup&gt;
      &lt;FormGroup
        fieldId={&#39;uniforms-0000-000i&#39;}
        label={&#39;Friends&#39;}
        isRequired={true}&gt;
        &lt;Alert variant=&#39;warning&#39; title=&#39;Unsupported field type: Array&#39;&gt;
          Cannot find form control for property &lt;code&gt;friends&lt;/code&gt; with type{&#39; &#39;}
          &lt;code&gt;Array&lt;/code&gt;:&lt;br /&gt;
          Some complex property types, such as &lt;code&gt;
            Array&amp;lt;object&amp;gt;
          &lt;/code&gt;{&#39; &#39;}
          aren&#39;t yet supported, however, you can still write your own component
          into the form and use the already existing states{&#39; &#39;}
          &lt;code&gt;const [ friends, set__friends ]&lt;/code&gt;.
        &lt;/Alert&gt;
      &lt;/FormGroup&gt;
    &lt;/div&gt;
  );
};

export default Form__HRInterview;

</div>
`;
