// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 44,
          "line": 25,
        },
        "start": {
          "character": 44,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 44,
          "line": 25,
        },
        "start": {
          "character": 44,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 36,
          "line": 25,
        },
        "start": {
          "character": 36,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 36,
          "line": 25,
        },
        "start": {
          "character": 36,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 35,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 35,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 44,
          "line": 25,
        },
        "start": {
          "character": 44,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 44,
          "line": 25,
        },
        "start": {
          "character": 44,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 36,
          "line": 25,
        },
        "start": {
          "character": 36,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 36,
          "line": 25,
        },
        "start": {
          "character": 36,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions reusable functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 35,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 35,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 42,
          "line": 25,
        },
        "start": {
          "character": 42,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 33,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 34,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 34,
          "line": 25,
        },
        "start": {
          "character": 33,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 44,
          "line": 25,
        },
        "start": {
          "character": 44,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 44,
          "line": 25,
        },
        "start": {
          "character": 44,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 32,
          "line": 25,
        },
        "start": {
          "character": 32,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 36,
          "line": 25,
        },
        "start": {
          "character": 36,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 36,
          "line": 25,
        },
        "start": {
          "character": 36,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data condition completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 35,
          "line": 25,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 35,
          "line": 25,
        },
        "start": {
          "character": 35,
          "line": 25,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 48,
          "line": 30,
        },
        "start": {
          "character": 48,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 48,
          "line": 30,
        },
        "start": {
          "character": 48,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 40,
          "line": 30,
        },
        "start": {
          "character": 40,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 40,
          "line": 30,
        },
        "start": {
          "character": 40,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 39,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 39,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 48,
          "line": 30,
        },
        "start": {
          "character": 48,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 48,
          "line": 30,
        },
        "start": {
          "character": 48,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 40,
          "line": 30,
        },
        "start": {
          "character": 40,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 40,
          "line": 30,
        },
        "start": {
          "character": 40,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions reusable functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 39,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 39,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 30,
        },
        "start": {
          "character": 46,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 37,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 38,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 38,
          "line": 30,
        },
        "start": {
          "character": 37,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 48,
          "line": 30,
        },
        "start": {
          "character": 48,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 48,
          "line": 30,
        },
        "start": {
          "character": 48,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 30,
        },
        "start": {
          "character": 36,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 40,
          "line": 30,
        },
        "start": {
          "character": 40,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 40,
          "line": 30,
        },
        "start": {
          "character": 40,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 39,
          "line": 30,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 39,
          "line": 30,
        },
        "start": {
          "character": 39,
          "line": 30,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 43,
          "line": 26,
        },
        "start": {
          "character": 43,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 43,
          "line": 26,
        },
        "start": {
          "character": 43,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 35,
          "line": 26,
        },
        "start": {
          "character": 35,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 35,
          "line": 26,
        },
        "start": {
          "character": 35,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 34,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 34,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 43,
          "line": 26,
        },
        "start": {
          "character": 43,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 43,
          "line": 26,
        },
        "start": {
          "character": 43,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 35,
          "line": 26,
        },
        "start": {
          "character": 35,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 35,
          "line": 26,
        },
        "start": {
          "character": 35,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions reusable functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 34,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 34,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 41,
          "line": 26,
        },
        "start": {
          "character": 41,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 32,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 33,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 33,
          "line": 26,
        },
        "start": {
          "character": 32,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 43,
          "line": 26,
        },
        "start": {
          "character": 43,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 43,
          "line": 26,
        },
        "start": {
          "character": 43,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 31,
          "line": 26,
        },
        "start": {
          "character": 31,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 35,
          "line": 26,
        },
        "start": {
          "character": 35,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 35,
          "line": 26,
        },
        "start": {
          "character": 35,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions data filter inside on onEvents completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 34,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 34,
          "line": 26,
        },
        "start": {
          "character": 34,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions reusable functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 37,
          "line": 24,
        },
        "start": {
          "character": 37,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 28,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 28,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 27,
          "line": 24,
        },
        "start": {
          "character": 27,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions event data filter completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 60,
          "line": 28,
        },
        "start": {
          "character": 60,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 60,
          "line": 28,
        },
        "start": {
          "character": 60,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 52,
          "line": 28,
        },
        "start": {
          "character": 52,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 52,
          "line": 28,
        },
        "start": {
          "character": 52,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 51,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 51,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 60,
          "line": 28,
        },
        "start": {
          "character": 60,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 60,
          "line": 28,
        },
        "start": {
          "character": 60,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 52,
          "line": 28,
        },
        "start": {
          "character": 52,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 52,
          "line": 28,
        },
        "start": {
          "character": 52,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions reusable functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 51,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 51,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 58,
          "line": 28,
        },
        "start": {
          "character": 58,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 49,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 50,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 50,
          "line": 28,
        },
        "start": {
          "character": 49,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 60,
          "line": 28,
        },
        "start": {
          "character": 60,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 60,
          "line": 28,
        },
        "start": {
          "character": 60,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 48,
          "line": 28,
        },
        "start": {
          "character": 48,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 52,
          "line": 28,
        },
        "start": {
          "character": 52,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 52,
          "line": 28,
        },
        "start": {
          "character": 52,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions functionRef arguments completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 51,
          "line": 28,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 51,
          "line": 28,
        },
        "start": {
          "character": 51,
          "line": 28,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after a value - auto-complete the word map 3`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after a value - auto-complete the word map 4`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after some random word 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after some random word 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor before empty space 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor before empty space 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion no value/double quotes 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion built-in functions completion no value/double quotes 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after a value - auto-complete the word map 3`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after a value - auto-complete the word map 4`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after some random word 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after some random word 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor before empty space 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor before empty space 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion no value/double quotes 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion reusable functions completion no value/double quotes 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after a value - auto-complete the word map 3`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after a value - auto-complete the word map 4`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 39,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after some random word 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after some random word 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 46,
          "line": 26,
        },
        "start": {
          "character": 46,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 37,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor before empty space 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor before empty space 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 38,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 38,
          "line": 26,
        },
        "start": {
          "character": 37,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion no value/double quotes 3`] = `140`;

exports[`SWF LS JSON code completion Jq completions operations completion variables completion no value/double quotes 4`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 36,
          "line": 26,
        },
        "start": {
          "character": 36,
          "line": 26,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 41,
          "line": 24,
        },
        "start": {
          "character": 41,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 41,
          "line": 24,
        },
        "start": {
          "character": 41,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 33,
          "line": 24,
        },
        "start": {
          "character": 33,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 33,
          "line": 24,
        },
        "start": {
          "character": 33,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 32,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 32,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 41,
          "line": 24,
        },
        "start": {
          "character": 41,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 41,
          "line": 24,
        },
        "start": {
          "character": 41,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 33,
          "line": 24,
        },
        "start": {
          "character": 33,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 33,
          "line": 24,
        },
        "start": {
          "character": 33,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions reusable functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 32,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 32,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": ""map(x)"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": ""map_values(x)"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 39,
          "line": 24,
        },
        "start": {
          "character": 39,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": ""name"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": ""numberOfPods"",
      "range": {
        "end": {
          "character": 30,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)",",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 31,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": ""age"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": ""avgLoad"",
      "range": {
        "end": {
          "character": 31,
          "line": 24,
        },
        "start": {
          "character": 30,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion empty object 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion empty object 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion empty object 3`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion empty object 4`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion empty object 5`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion empty object 6`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 41,
          "line": 24,
        },
        "start": {
          "character": 41,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 41,
          "line": 24,
        },
        "start": {
          "character": 41,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": ""length"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": ""utf8bytelength"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": ""keys"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": ""keys_unsorted"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": ""has(key)"",
      "range": {
        "end": {
          "character": 29,
          "line": 24,
        },
        "start": {
          "character": 29,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 33,
          "line": 24,
        },
        "start": {
          "character": 33,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 33,
          "line": 24,
        },
        "start": {
          "character": 33,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS JSON code completion Jq completions state data filter completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": ""expressionFunc1"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 32,
          "line": 24,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": ""expressionFunc2"",
      "range": {
        "end": {
          "character": 32,
          "line": 24,
        },
        "start": {
          "character": 32,
          "line": 24,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion empty file completion empty file with a newline after the cursor 1`] = `2`;

exports[`SWF LS JSON code completion empty file completion empty file with a newline after the cursor 2`] = `
[
  {
    "detail": "Start with a simple Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Serverless Workflow Example",
    "sortText": "100_Serverless Workflow Example",
    "textEdit": {
      "newText": "{
  "id": "\${1:workflow_unique_identifier}",
  "version": "\${2:0.1}",
  "specVersion": "\${3:0.8}",
  "name": "\${4:Workflow name}",
  "description": "\${5:Workflow description}",
  "start": "\${13}",
  "functions": [
    {
      "name": "\${7:uniqueFunctionName}",
      "operation": "\${8:localhost#operation}",
      "type": "\${9:rest}"
    }
  ],
  "events": [
    {
      "name": "\${10:Unique event name}",
      "source": "\${11:CloudEvent source}",
      "type": "\${12:CloudEvent type}"
    }
  ],
  "states": [
    {
      "name": "\${13:StartState}",
      "type": "\${14:operation}",
      "actions": [
        {
          "name": "\${15:uniqueActionName}",
          "functionRef": {
            "refName": "\${7}",
            "arguments": {
              "firstArgument": "",
              "secondArgument": ""
            }
          }
        }
      ],
      "end": true
    }
  ]
}",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "{
  "id": "\${1:workflow_unique_identifier}",
  "version": "\${2:0.1}",
  "specVersion": "\${3:0.8}",
  "name": "\${4:Workflow name}",
  "description": "\${5:Workflow description}",
  "start": "\${13}",
  "functions": [],
  "events": [],
  "states": []
}",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion empty file completion empty file with a newline before the cursor 1`] = `2`;

exports[`SWF LS JSON code completion empty file completion empty file with a newline before the cursor 2`] = `
[
  {
    "detail": "Start with a simple Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Serverless Workflow Example",
    "sortText": "100_Serverless Workflow Example",
    "textEdit": {
      "newText": "{
  "id": "\${1:workflow_unique_identifier}",
  "version": "\${2:0.1}",
  "specVersion": "\${3:0.8}",
  "name": "\${4:Workflow name}",
  "description": "\${5:Workflow description}",
  "start": "\${13}",
  "functions": [
    {
      "name": "\${7:uniqueFunctionName}",
      "operation": "\${8:localhost#operation}",
      "type": "\${9:rest}"
    }
  ],
  "events": [
    {
      "name": "\${10:Unique event name}",
      "source": "\${11:CloudEvent source}",
      "type": "\${12:CloudEvent type}"
    }
  ],
  "states": [
    {
      "name": "\${13:StartState}",
      "type": "\${14:operation}",
      "actions": [
        {
          "name": "\${15:uniqueActionName}",
          "functionRef": {
            "refName": "\${7}",
            "arguments": {
              "firstArgument": "",
              "secondArgument": ""
            }
          }
        }
      ],
      "end": true
    }
  ]
}",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "{
  "id": "\${1:workflow_unique_identifier}",
  "version": "\${2:0.1}",
  "specVersion": "\${3:0.8}",
  "name": "\${4:Workflow name}",
  "description": "\${5:Workflow description}",
  "start": "\${13}",
  "functions": [],
  "events": [],
  "states": []
}",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion empty file completion total empty file 1`] = `2`;

exports[`SWF LS JSON code completion empty file completion total empty file 2`] = `
[
  {
    "detail": "Start with a simple Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Serverless Workflow Example",
    "sortText": "100_Serverless Workflow Example",
    "textEdit": {
      "newText": "{
  "id": "\${1:workflow_unique_identifier}",
  "version": "\${2:0.1}",
  "specVersion": "\${3:0.8}",
  "name": "\${4:Workflow name}",
  "description": "\${5:Workflow description}",
  "start": "\${13}",
  "functions": [
    {
      "name": "\${7:uniqueFunctionName}",
      "operation": "\${8:localhost#operation}",
      "type": "\${9:rest}"
    }
  ],
  "events": [
    {
      "name": "\${10:Unique event name}",
      "source": "\${11:CloudEvent source}",
      "type": "\${12:CloudEvent type}"
    }
  ],
  "states": [
    {
      "name": "\${13:StartState}",
      "type": "\${14:operation}",
      "actions": [
        {
          "name": "\${15:uniqueActionName}",
          "functionRef": {
            "refName": "\${7}",
            "arguments": {
              "firstArgument": "",
              "secondArgument": ""
            }
          }
        }
      ],
      "end": true
    }
  ]
}",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "{
  "id": "\${1:workflow_unique_identifier}",
  "version": "\${2:0.1}",
  "specVersion": "\${3:0.8}",
  "name": "\${4:Workflow name}",
  "description": "\${5:Workflow description}",
  "start": "\${13}",
  "functions": [],
  "events": [],
  "states": []
}",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion eventRefs completion add at the beginning of the array 1`] = `1`;

exports[`SWF LS JSON code completion eventRefs completion add at the beginning of the array 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": ""GreetEvent"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetEvent"",
    "sortText": "100_"GreetEvent"",
    "textEdit": {
      "newText": ""GreetEvent",",
      "range": {
        "end": {
          "character": 22,
          "line": 9,
        },
        "start": {
          "character": 22,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion eventRefs completion add at the end of the array 1`] = `1`;

exports[`SWF LS JSON code completion eventRefs completion add at the end of the array 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": ""GreetEvent"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetEvent"",
    "sortText": "100_"GreetEvent"",
    "textEdit": {
      "newText": ""GreetEvent"",
      "range": {
        "end": {
          "character": 26,
          "line": 9,
        },
        "start": {
          "character": 26,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion eventRefs completion add into empty array 1`] = `1`;

exports[`SWF LS JSON code completion eventRefs completion add into empty array 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": ""GreetEvent"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetEvent"",
    "sortText": "100_"GreetEvent"",
    "textEdit": {
      "newText": ""GreetEvent"",
      "range": {
        "end": {
          "character": 22,
          "line": 9,
        },
        "start": {
          "character": 22,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion eventRefs completion pointing after the array 1`] = `0`;

exports[`SWF LS JSON code completion eventRefs completion pointing after the array 2`] = `[]`;

exports[`SWF LS JSON code completion eventRefs completion pointing before the array 1`] = `0`;

exports[`SWF LS JSON code completion eventRefs completion pointing before the array 2`] = `[]`;

exports[`SWF LS JSON code completion eventRefs completion pointing before the array 3`] = `0`;

exports[`SWF LS JSON code completion eventRefs completion pointing before the array 4`] = `[]`;

exports[`SWF LS JSON code completion eventRefs completion pointing inside an object of the array 1`] = `1`;

exports[`SWF LS JSON code completion eventRefs completion pointing inside an object of the array 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": ""GreetEvent"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetEvent"",
    "sortText": "100_"GreetEvent"",
    "textEdit": {
      "newText": ""GreetEvent"",
      "range": {
        "end": {
          "character": 25,
          "line": 9,
        },
        "start": {
          "character": 23,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion events completion add at the beginning of the array 1`] = `1`;

exports[`SWF LS JSON code completion events completion add at the beginning of the array 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique event name}",
  "source": "\${2:CloudEvent source}",
  "type": "\${3:CloudEvent type}",
  "kind": "\${4:Eventdef kind}",
  "metadata": "\${5:Eventdef metdata}"
},",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion events completion add at the end of the array 1`] = `1`;

exports[`SWF LS JSON code completion events completion add at the end of the array 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique event name}",
  "source": "\${2:CloudEvent source}",
  "type": "\${3:CloudEvent type}",
  "kind": "\${4:Eventdef kind}",
  "metadata": "\${5:Eventdef metdata}"
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion events completion add in the middle of the array / with comma at the end 1`] = `1`;

exports[`SWF LS JSON code completion events completion add in the middle of the array / with comma at the end 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique event name}",
  "source": "\${2:CloudEvent source}",
  "type": "\${3:CloudEvent type}",
  "kind": "\${4:Eventdef kind}",
  "metadata": "\${5:Eventdef metdata}"
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion events completion add in the middle of the array 1`] = `1`;

exports[`SWF LS JSON code completion events completion add in the middle of the array 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique event name}",
  "source": "\${2:CloudEvent source}",
  "type": "\${3:CloudEvent type}",
  "kind": "\${4:Eventdef kind}",
  "metadata": "\${5:Eventdef metdata}"
},",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion events completion add into empty array 1`] = `1`;

exports[`SWF LS JSON code completion events completion add into empty array 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique event name}",
  "source": "\${2:CloudEvent source}",
  "type": "\${3:CloudEvent type}",
  "kind": "\${4:Eventdef kind}",
  "metadata": "\${5:Eventdef metdata}"
}",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion events completion pointing after the array 1`] = `0`;

exports[`SWF LS JSON code completion events completion pointing after the array 2`] = `[]`;

exports[`SWF LS JSON code completion events completion pointing before the array 1`] = `0`;

exports[`SWF LS JSON code completion events completion pointing before the array 2`] = `[]`;

exports[`SWF LS JSON code completion events completion pointing before the array 3`] = `0`;

exports[`SWF LS JSON code completion events completion pointing before the array 4`] = `[]`;

exports[`SWF LS JSON code completion events completion pointing inside an object of the array 1`] = `0`;

exports[`SWF LS JSON code completion events completion pointing inside an object of the array 2`] = `[]`;

exports[`SWF LS JSON code completion functionRef arguments completion with same level content after 1`] = `1`;

exports[`SWF LS JSON code completion functionRef arguments completion with same level content after 2`] = `
[
  {
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "'testRelativeFunction1' arguments",
    "insertTextFormat": 2,
    "kind": 9,
    "label": "'testRelativeFunction1' arguments",
    "sortText": "100_'testRelativeFunction1' arguments",
    "textEdit": {
      "newText": "{
  "argString": "\${1:}",
  "argNumber": "\${2:}",
  "argBoolean": "\${3:}"
},",
      "range": {
        "end": {
          "character": 25,
          "line": 18,
        },
        "start": {
          "character": 25,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functionRef arguments completion without same level content after 1`] = `1`;

exports[`SWF LS JSON code completion functionRef arguments completion without same level content after 2`] = `
[
  {
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "'testRelativeFunction1' arguments",
    "insertTextFormat": 2,
    "kind": 9,
    "label": "'testRelativeFunction1' arguments",
    "sortText": "100_'testRelativeFunction1' arguments",
    "textEdit": {
      "newText": "{
  "argString": "\${1:}",
  "argNumber": "\${2:}",
  "argBoolean": "\${3:}"
}",
      "range": {
        "end": {
          "character": 25,
          "line": 18,
        },
        "start": {
          "character": 25,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functionRef completion with same level content after 1`] = `1`;

exports[`SWF LS JSON code completion functionRef completion with same level content after 2`] = `
[
  {
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 9,
    "label": "testRelativeFunction1",
    "sortText": "100_testRelativeFunction1",
    "textEdit": {
      "newText": "{
  "refName": "testRelativeFunction1",
  "arguments": {
    "argString": "\${1:}",
    "argNumber": "\${2:}",
    "argBoolean": "\${3:}"
  }
},",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functionRef completion without same level content after 1`] = `1`;

exports[`SWF LS JSON code completion functionRef completion without same level content after 2`] = `
[
  {
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 9,
    "label": "testRelativeFunction1",
    "sortText": "100_testRelativeFunction1",
    "textEdit": {
      "newText": "{
  "refName": "testRelativeFunction1",
  "arguments": {
    "argString": "\${1:}",
    "argNumber": "\${2:}",
    "argBoolean": "\${3:}"
  }
}",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functionRef refName completion inside double quotes / with same level content after 1`] = `1`;

exports[`SWF LS JSON code completion functionRef refName completion inside double quotes / with same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": ""myFunc"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""myFunc"",
    "sortText": "100_"myFunc"",
    "textEdit": {
      "newText": ""myFunc",",
      "range": {
        "end": {
          "character": 23,
          "line": 17,
        },
        "start": {
          "character": 23,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functionRef refName completion inside double quotes / without same level content after 1`] = `1`;

exports[`SWF LS JSON code completion functionRef refName completion inside double quotes / without same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": ""myFunc"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""myFunc"",
    "sortText": "100_"myFunc"",
    "textEdit": {
      "newText": ""myFunc"",
      "range": {
        "end": {
          "character": 23,
          "line": 17,
        },
        "start": {
          "character": 23,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functionRef refName completion not in quotes / with same level content after 1`] = `1`;

exports[`SWF LS JSON code completion functionRef refName completion not in quotes / with same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": ""myFunc"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""myFunc"",
    "sortText": "100_"myFunc"",
    "textEdit": {
      "newText": ""myFunc",",
      "range": {
        "end": {
          "character": 23,
          "line": 17,
        },
        "start": {
          "character": 23,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functionRef refName completion not in quotes / without same level content after 1`] = `1`;

exports[`SWF LS JSON code completion functionRef refName completion not in quotes / without same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": ""myFunc"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""myFunc"",
    "sortText": "100_"myFunc"",
    "textEdit": {
      "newText": ""myFunc"",
      "range": {
        "end": {
          "character": 23,
          "line": 17,
        },
        "start": {
          "character": 23,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functions completion add at the beginning of the array 1`] = `2`;

exports[`SWF LS JSON code completion functions completion add at the beginning of the array 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.json",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "{
  "name": "\${1:testRelativeFunction1}",
  "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
  "type": "rest"
},",
      "range": {
        "end": {
          "character": 16,
          "line": 0,
        },
        "start": {
          "character": 16,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique function name}",
  "operation": "\${2:localhost#operation}",
  "type": "\${3:Function type}"
},",
      "range": {
        "end": {
          "character": 16,
          "line": 0,
        },
        "start": {
          "character": 16,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functions completion add at the end of the array 1`] = `2`;

exports[`SWF LS JSON code completion functions completion add at the end of the array 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.json",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "{
  "name": "\${1:testRelativeFunction1}",
  "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
  "type": "rest"
}",
      "range": {
        "end": {
          "character": 20,
          "line": 0,
        },
        "start": {
          "character": 20,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique function name}",
  "operation": "\${2:localhost#operation}",
  "type": "\${3:Function type}"
}",
      "range": {
        "end": {
          "character": 20,
          "line": 0,
        },
        "start": {
          "character": 20,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functions completion add in the middle of the array / with comma at the end 1`] = `2`;

exports[`SWF LS JSON code completion functions completion add in the middle of the array / with comma at the end 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.json",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "{
  "name": "\${1:testRelativeFunction1}",
  "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
  "type": "rest"
}",
      "range": {
        "end": {
          "character": 20,
          "line": 0,
        },
        "start": {
          "character": 20,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique function name}",
  "operation": "\${2:localhost#operation}",
  "type": "\${3:Function type}"
}",
      "range": {
        "end": {
          "character": 20,
          "line": 0,
        },
        "start": {
          "character": 20,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functions completion add in the middle of the array 1`] = `2`;

exports[`SWF LS JSON code completion functions completion add in the middle of the array 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.json",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "{
  "name": "\${1:testRelativeFunction1}",
  "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
  "type": "rest"
},",
      "range": {
        "end": {
          "character": 20,
          "line": 0,
        },
        "start": {
          "character": 20,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique function name}",
  "operation": "\${2:localhost#operation}",
  "type": "\${3:Function type}"
},",
      "range": {
        "end": {
          "character": 20,
          "line": 0,
        },
        "start": {
          "character": 20,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functions completion add into empty array 1`] = `2`;

exports[`SWF LS JSON code completion functions completion add into empty array 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.json",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "{
  "name": "\${1:testRelativeFunction1}",
  "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
  "type": "rest"
}",
      "range": {
        "end": {
          "character": 16,
          "line": 0,
        },
        "start": {
          "character": 16,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique function name}",
  "operation": "\${2:localhost#operation}",
  "type": "\${3:Function type}"
}",
      "range": {
        "end": {
          "character": 16,
          "line": 0,
        },
        "start": {
          "character": 16,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion functions completion pointing after the array 1`] = `0`;

exports[`SWF LS JSON code completion functions completion pointing after the array 2`] = `[]`;

exports[`SWF LS JSON code completion functions completion pointing before the array 1`] = `0`;

exports[`SWF LS JSON code completion functions completion pointing before the array 2`] = `[]`;

exports[`SWF LS JSON code completion functions completion pointing before the array 3`] = `0`;

exports[`SWF LS JSON code completion functions completion pointing before the array 4`] = `[]`;

exports[`SWF LS JSON code completion functions completion pointing inside an object of the array 1`] = `0`;

exports[`SWF LS JSON code completion functions completion pointing inside an object of the array 2`] = `[]`;

exports[`SWF LS JSON code completion operation completion inside double quotes / with same level content after 1`] = `1`;

exports[`SWF LS JSON code completion operation completion inside double quotes / with same level content after 2`] = `
[
  {
    "detail": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "filterText": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "insertTextFormat": 2,
    "kind": 19,
    "label": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "sortText": "100_"specs/testRelativeService1.yml#testRelativeFunction1"",
    "textEdit": {
      "newText": ""specs/testRelativeService1.yml#testRelativeFunction1",",
      "range": {
        "end": {
          "character": 21,
          "line": 4,
        },
        "start": {
          "character": 19,
          "line": 4,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion operation completion inside double quotes / without same level content after 1`] = `1`;

exports[`SWF LS JSON code completion operation completion inside double quotes / without same level content after 2`] = `
[
  {
    "detail": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "filterText": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "insertTextFormat": 2,
    "kind": 19,
    "label": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "sortText": "100_"specs/testRelativeService1.yml#testRelativeFunction1"",
    "textEdit": {
      "newText": ""specs/testRelativeService1.yml#testRelativeFunction1"",
      "range": {
        "end": {
          "character": 21,
          "line": 4,
        },
        "start": {
          "character": 19,
          "line": 4,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion operation completion not in quotes / with same level content after 1`] = `1`;

exports[`SWF LS JSON code completion operation completion not in quotes / with same level content after 2`] = `
[
  {
    "detail": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "filterText": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "insertTextFormat": 2,
    "kind": 19,
    "label": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "sortText": "100_"specs/testRelativeService1.yml#testRelativeFunction1"",
    "textEdit": {
      "newText": ""specs/testRelativeService1.yml#testRelativeFunction1",",
      "range": {
        "end": {
          "character": 19,
          "line": 4,
        },
        "start": {
          "character": 19,
          "line": 4,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion operation completion not in quotes / without same level content after 1`] = `1`;

exports[`SWF LS JSON code completion operation completion not in quotes / without same level content after 2`] = `
[
  {
    "detail": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "filterText": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "insertTextFormat": 2,
    "kind": 19,
    "label": ""specs/testRelativeService1.yml#testRelativeFunction1"",
    "sortText": "100_"specs/testRelativeService1.yml#testRelativeFunction1"",
    "textEdit": {
      "newText": ""specs/testRelativeService1.yml#testRelativeFunction1"",
      "range": {
        "end": {
          "character": 19,
          "line": 4,
        },
        "start": {
          "character": 19,
          "line": 4,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion start completion inside double quotes / with same level content after / with comma at the end 1`] = `2`;

exports[`SWF LS JSON code completion start completion inside double quotes / with same level content after / with comma at the end 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": ""GreetInEnglish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInEnglish"",
    "sortText": "100_"GreetInEnglish"",
    "textEdit": {
      "newText": ""GreetInEnglish"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": ""GreetInSpanish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInSpanish"",
    "sortText": "100_"GreetInSpanish"",
    "textEdit": {
      "newText": ""GreetInSpanish"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion start completion inside double quotes / with same level content after / with spaces and comma at the end 1`] = `2`;

exports[`SWF LS JSON code completion start completion inside double quotes / with same level content after / with spaces and comma at the end 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": ""GreetInEnglish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInEnglish"",
    "sortText": "100_"GreetInEnglish"",
    "textEdit": {
      "newText": ""GreetInEnglish"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": ""GreetInSpanish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInSpanish"",
    "sortText": "100_"GreetInSpanish"",
    "textEdit": {
      "newText": ""GreetInSpanish"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion start completion inside double quotes / with same level content after 1`] = `2`;

exports[`SWF LS JSON code completion start completion inside double quotes / with same level content after 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": ""GreetInEnglish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInEnglish"",
    "sortText": "100_"GreetInEnglish"",
    "textEdit": {
      "newText": ""GreetInEnglish",",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": ""GreetInSpanish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInSpanish"",
    "sortText": "100_"GreetInSpanish"",
    "textEdit": {
      "newText": ""GreetInSpanish",",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion start completion inside double quotes / without same level content after 1`] = `2`;

exports[`SWF LS JSON code completion start completion inside double quotes / without same level content after 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": ""GreetInEnglish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInEnglish"",
    "sortText": "100_"GreetInEnglish"",
    "textEdit": {
      "newText": ""GreetInEnglish"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": ""GreetInSpanish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInSpanish"",
    "sortText": "100_"GreetInSpanish"",
    "textEdit": {
      "newText": ""GreetInSpanish"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion start completion not in quotes / with same level content after 1`] = `2`;

exports[`SWF LS JSON code completion start completion not in quotes / with same level content after 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": ""GreetInEnglish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInEnglish"",
    "sortText": "100_"GreetInEnglish"",
    "textEdit": {
      "newText": ""GreetInEnglish",",
      "range": {
        "end": {
          "character": 11,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": ""GreetInSpanish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInSpanish"",
    "sortText": "100_"GreetInSpanish"",
    "textEdit": {
      "newText": ""GreetInSpanish",",
      "range": {
        "end": {
          "character": 11,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion start completion not in quotes / without same level content after 1`] = `2`;

exports[`SWF LS JSON code completion start completion not in quotes / without same level content after 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": ""GreetInEnglish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInEnglish"",
    "sortText": "100_"GreetInEnglish"",
    "textEdit": {
      "newText": ""GreetInEnglish"",
      "range": {
        "end": {
          "character": 11,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": ""GreetInSpanish"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""GreetInSpanish"",
    "sortText": "100_"GreetInSpanish"",
    "textEdit": {
      "newText": ""GreetInSpanish"",
      "range": {
        "end": {
          "character": 11,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion states completion add at the beginning of the array 1`] = `4`;

exports[`SWF LS JSON code completion states completion add at the beginning of the array 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "operation",
  "actions": [
    {
      "name": "\${5:Unique Action name}",
      "functionRef": {}
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
},",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "event",
  "onEvents": [
    {
      "eventRefs": [
        "\${5:Unique event names}"
      ]
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
},",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "switch",
  "dataConditions": [
    {
      "condition": "\${5:Workflow expression evaluated against state data}",
      "transition": "\${6:Transition to another state if condition is true}"
    }
  ],
  "defaultCondition": {
    "transition": "\${7:Default transition of the workflow}"
  }
},",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "inject",
  "data": {},
  "transition": "\${10:Next transition of the workflow}",
  "end": false
},",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion states completion add at the end of the array 1`] = `4`;

exports[`SWF LS JSON code completion states completion add at the end of the array 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "operation",
  "actions": [
    {
      "name": "\${5:Unique Action name}",
      "functionRef": {}
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "event",
  "onEvents": [
    {
      "eventRefs": [
        "\${5:Unique event names}"
      ]
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "switch",
  "dataConditions": [
    {
      "condition": "\${5:Workflow expression evaluated against state data}",
      "transition": "\${6:Transition to another state if condition is true}"
    }
  ],
  "defaultCondition": {
    "transition": "\${7:Default transition of the workflow}"
  }
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "inject",
  "data": {},
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion states completion add in the middle of the array / with comma at the end 1`] = `4`;

exports[`SWF LS JSON code completion states completion add in the middle of the array / with comma at the end 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "operation",
  "actions": [
    {
      "name": "\${5:Unique Action name}",
      "functionRef": {}
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "event",
  "onEvents": [
    {
      "eventRefs": [
        "\${5:Unique event names}"
      ]
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "switch",
  "dataConditions": [
    {
      "condition": "\${5:Workflow expression evaluated against state data}",
      "transition": "\${6:Transition to another state if condition is true}"
    }
  ],
  "defaultCondition": {
    "transition": "\${7:Default transition of the workflow}"
  }
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "inject",
  "data": {},
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion states completion add in the middle of the array 1`] = `4`;

exports[`SWF LS JSON code completion states completion add in the middle of the array 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "operation",
  "actions": [
    {
      "name": "\${5:Unique Action name}",
      "functionRef": {}
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
},",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "event",
  "onEvents": [
    {
      "eventRefs": [
        "\${5:Unique event names}"
      ]
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
},",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "switch",
  "dataConditions": [
    {
      "condition": "\${5:Workflow expression evaluated against state data}",
      "transition": "\${6:Transition to another state if condition is true}"
    }
  ],
  "defaultCondition": {
    "transition": "\${7:Default transition of the workflow}"
  }
},",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "inject",
  "data": {},
  "transition": "\${10:Next transition of the workflow}",
  "end": false
},",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion states completion add into empty array 1`] = `4`;

exports[`SWF LS JSON code completion states completion add into empty array 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "operation",
  "actions": [
    {
      "name": "\${5:Unique Action name}",
      "functionRef": {}
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "event",
  "onEvents": [
    {
      "eventRefs": [
        "\${5:Unique event names}"
      ]
    }
  ],
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "switch",
  "dataConditions": [
    {
      "condition": "\${5:Workflow expression evaluated against state data}",
      "transition": "\${6:Transition to another state if condition is true}"
    }
  ],
  "defaultCondition": {
    "transition": "\${7:Default transition of the workflow}"
  }
}",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "{
  "name": "\${1:Unique State name}",
  "type": "inject",
  "data": {},
  "transition": "\${10:Next transition of the workflow}",
  "end": false
}",
      "range": {
        "end": {
          "character": 13,
          "line": 0,
        },
        "start": {
          "character": 13,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion states completion pointing after the array 1`] = `0`;

exports[`SWF LS JSON code completion states completion pointing after the array 2`] = `[]`;

exports[`SWF LS JSON code completion states completion pointing before the array 1`] = `0`;

exports[`SWF LS JSON code completion states completion pointing before the array 2`] = `[]`;

exports[`SWF LS JSON code completion states completion pointing before the array 3`] = `0`;

exports[`SWF LS JSON code completion states completion pointing before the array 4`] = `[]`;

exports[`SWF LS JSON code completion states completion pointing inside an object of the array 1`] = `0`;

exports[`SWF LS JSON code completion states completion pointing inside an object of the array 2`] = `[]`;

exports[`SWF LS JSON code completion transition completion dataConditions transition completion simple case 1`] = `1`;

exports[`SWF LS JSON code completion transition completion dataConditions transition completion simple case 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": ""Inject Mantra"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""Inject Mantra"",
    "sortText": "100_"Inject Mantra"",
    "textEdit": {
      "newText": ""Inject Mantra"",
      "range": {
        "end": {
          "character": 26,
          "line": 6,
        },
        "start": {
          "character": 26,
          "line": 6,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion transition completion defaultCondition transition completion simple case 1`] = `1`;

exports[`SWF LS JSON code completion transition completion defaultCondition transition completion simple case 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": ""Inject Mantra"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""Inject Mantra"",
    "sortText": "100_"Inject Mantra"",
    "textEdit": {
      "newText": ""Inject Mantra"",
      "range": {
        "end": {
          "character": 24,
          "line": 5,
        },
        "start": {
          "character": 24,
          "line": 5,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion transition completion eventConditions transition completion simple case 1`] = `1`;

exports[`SWF LS JSON code completion transition completion eventConditions transition completion simple case 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": ""Inject Mantra"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""Inject Mantra"",
    "sortText": "100_"Inject Mantra"",
    "textEdit": {
      "newText": ""Inject Mantra"",
      "range": {
        "end": {
          "character": 24,
          "line": 5,
        },
        "start": {
          "character": 24,
          "line": 5,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion transition completion state transition completion inside double quotes / with same level content after 1`] = `1`;

exports[`SWF LS JSON code completion transition completion state transition completion inside double quotes / with same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": ""Inject Mantra"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""Inject Mantra"",
    "sortText": "100_"Inject Mantra"",
    "textEdit": {
      "newText": ""Inject Mantra",",
      "range": {
        "end": {
          "character": 22,
          "line": 4,
        },
        "start": {
          "character": 22,
          "line": 4,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion transition completion state transition completion inside double quotes / without same level content after 1`] = `1`;

exports[`SWF LS JSON code completion transition completion state transition completion inside double quotes / without same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": ""Inject Mantra"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""Inject Mantra"",
    "sortText": "100_"Inject Mantra"",
    "textEdit": {
      "newText": ""Inject Mantra"",
      "range": {
        "end": {
          "character": 22,
          "line": 4,
        },
        "start": {
          "character": 22,
          "line": 4,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion transition completion state transition completion not in quotes / with same level content after 1`] = `1`;

exports[`SWF LS JSON code completion transition completion state transition completion not in quotes / with same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": ""Inject Mantra"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""Inject Mantra"",
    "sortText": "100_"Inject Mantra"",
    "textEdit": {
      "newText": ""Inject Mantra",",
      "range": {
        "end": {
          "character": 22,
          "line": 4,
        },
        "start": {
          "character": 22,
          "line": 4,
        },
      },
    },
  },
]
`;

exports[`SWF LS JSON code completion transition completion state transition completion not in quotes / without same level content after 1`] = `1`;

exports[`SWF LS JSON code completion transition completion state transition completion not in quotes / without same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": ""Inject Mantra"",
    "insertTextFormat": 2,
    "kind": 12,
    "label": ""Inject Mantra"",
    "sortText": "100_"Inject Mantra"",
    "textEdit": {
      "newText": ""Inject Mantra"",
      "range": {
        "end": {
          "character": 22,
          "line": 4,
        },
        "start": {
          "character": 22,
          "line": 4,
        },
      },
    },
  },
]
`;
