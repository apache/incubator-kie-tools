// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 44,
          "line": 18,
        },
        "start": {
          "character": 44,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 44,
          "line": 18,
        },
        "start": {
          "character": 44,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 36,
          "line": 18,
        },
        "start": {
          "character": 36,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 36,
          "line": 18,
        },
        "start": {
          "character": 36,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 35,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 35,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions built-in functions completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 35,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 35,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 42,
          "line": 18,
        },
        "start": {
          "character": 42,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 33,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 34,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 34,
          "line": 18,
        },
        "start": {
          "character": 33,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 44,
          "line": 18,
        },
        "start": {
          "character": 44,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 44,
          "line": 18,
        },
        "start": {
          "character": 44,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 18,
        },
        "start": {
          "character": 32,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 36,
          "line": 18,
        },
        "start": {
          "character": 36,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 36,
          "line": 18,
        },
        "start": {
          "character": 36,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 35,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 35,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions action data filter completions variables completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 35,
          "line": 18,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 35,
          "line": 18,
        },
        "start": {
          "character": 35,
          "line": 18,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 44,
          "line": 16,
        },
        "start": {
          "character": 44,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 44,
          "line": 16,
        },
        "start": {
          "character": 44,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 36,
          "line": 16,
        },
        "start": {
          "character": 36,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 36,
          "line": 16,
        },
        "start": {
          "character": 36,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion built-in functions completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 42,
          "line": 16,
        },
        "start": {
          "character": 42,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 33,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 34,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 34,
          "line": 16,
        },
        "start": {
          "character": 33,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 44,
          "line": 16,
        },
        "start": {
          "character": 44,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 44,
          "line": 16,
        },
        "start": {
          "character": 44,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 16,
        },
        "start": {
          "character": 32,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 36,
          "line": 16,
        },
        "start": {
          "character": 36,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 36,
          "line": 16,
        },
        "start": {
          "character": 36,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions data condition completion variables completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions built-in functions completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 35,
          "line": 16,
        },
        "start": {
          "character": 35,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 26,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 26,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 25,
          "line": 16,
        },
        "start": {
          "character": 25,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter completions variables completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 41,
          "line": 17,
        },
        "start": {
          "character": 41,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 41,
          "line": 17,
        },
        "start": {
          "character": 41,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion built-in functions completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 39,
          "line": 17,
        },
        "start": {
          "character": 39,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 41,
          "line": 17,
        },
        "start": {
          "character": 41,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 41,
          "line": 17,
        },
        "start": {
          "character": 41,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 17,
        },
        "start": {
          "character": 29,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions event data filter inside onEvents completion variables completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 50,
          "line": 19,
        },
        "start": {
          "character": 50,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 50,
          "line": 19,
        },
        "start": {
          "character": 50,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 42,
          "line": 19,
        },
        "start": {
          "character": 42,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 42,
          "line": 19,
        },
        "start": {
          "character": 42,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 41,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 41,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions built-in functions completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 41,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 41,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 48,
          "line": 19,
        },
        "start": {
          "character": 48,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 39,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 40,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 40,
          "line": 19,
        },
        "start": {
          "character": 39,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 50,
          "line": 19,
        },
        "start": {
          "character": 50,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 50,
          "line": 19,
        },
        "start": {
          "character": 50,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 38,
          "line": 19,
        },
        "start": {
          "character": 38,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 42,
          "line": 19,
        },
        "start": {
          "character": 42,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 42,
          "line": 19,
        },
        "start": {
          "character": 42,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 41,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 41,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions functionRef arguments completions variables completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 41,
          "line": 19,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 41,
          "line": 19,
        },
        "start": {
          "character": 41,
          "line": 19,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion fn: after some value 1`] = `3`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 42,
          "line": 17,
        },
        "start": {
          "character": 42,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 42,
          "line": 17,
        },
        "start": {
          "character": 42,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc3",
    "insertText": "expressionFunc3",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc3",
    "sortText": "100_expressionFunc3",
    "textEdit": {
      "newText": "'expressionFunc3'",
      "range": {
        "end": {
          "character": 42,
          "line": 17,
        },
        "start": {
          "character": 42,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion space before fn: 1`] = `3`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 34,
          "line": 17,
        },
        "start": {
          "character": 34,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 34,
          "line": 17,
        },
        "start": {
          "character": 34,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc3",
    "insertText": "expressionFunc3",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc3",
    "sortText": "100_expressionFunc3",
    "textEdit": {
      "newText": "'expressionFunc3'",
      "range": {
        "end": {
          "character": 34,
          "line": 17,
        },
        "start": {
          "character": 34,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion value fn:/double quotes 1`] = `3`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc3",
    "insertText": "expressionFunc3",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc3",
    "sortText": "100_expressionFunc3",
    "textEdit": {
      "newText": "'expressionFunc3'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion value fn:/single quotes 1`] = `3`;

exports[`SWF LS YAML code completion Jq completions operation completions built-in functions completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc3",
    "insertText": "expressionFunc3",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc3",
    "sortText": "100_expressionFunc3",
    "textEdit": {
      "newText": "'expressionFunc3'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 40,
          "line": 17,
        },
        "start": {
          "character": 40,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 31,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 32,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 32,
          "line": 17,
        },
        "start": {
          "character": 31,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion fn: after some value 1`] = `3`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 42,
          "line": 17,
        },
        "start": {
          "character": 42,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 42,
          "line": 17,
        },
        "start": {
          "character": 42,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc3",
    "insertText": "expressionFunc3",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc3",
    "sortText": "100_expressionFunc3",
    "textEdit": {
      "newText": "'expressionFunc3'",
      "range": {
        "end": {
          "character": 42,
          "line": 17,
        },
        "start": {
          "character": 42,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 30,
          "line": 17,
        },
        "start": {
          "character": 30,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion space before fn: 1`] = `3`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 34,
          "line": 17,
        },
        "start": {
          "character": 34,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 34,
          "line": 17,
        },
        "start": {
          "character": 34,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc3",
    "insertText": "expressionFunc3",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc3",
    "sortText": "100_expressionFunc3",
    "textEdit": {
      "newText": "'expressionFunc3'",
      "range": {
        "end": {
          "character": 34,
          "line": 17,
        },
        "start": {
          "character": 34,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion value fn:/double quotes 1`] = `3`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc3",
    "insertText": "expressionFunc3",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc3",
    "sortText": "100_expressionFunc3",
    "textEdit": {
      "newText": "'expressionFunc3'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion value fn:/single quotes 1`] = `3`;

exports[`SWF LS YAML code completion Jq completions operation completions variables completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc3",
    "insertText": "expressionFunc3",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc3",
    "sortText": "100_expressionFunc3",
    "textEdit": {
      "newText": "'expressionFunc3'",
      "range": {
        "end": {
          "character": 33,
          "line": 17,
        },
        "start": {
          "character": 33,
          "line": 17,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 39,
          "line": 16,
        },
        "start": {
          "character": 39,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 39,
          "line": 16,
        },
        "start": {
          "character": 39,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 31,
          "line": 16,
        },
        "start": {
          "character": 31,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 31,
          "line": 16,
        },
        "start": {
          "character": 31,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 30,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 30,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions built-in functions completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 30,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 30,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor after a value - auto-complete the word map 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor after a value - auto-complete the word map 2`] = `
[
  {
    "detail": "For any filter x, map(x) will run that filter for each element of the input array, and return the outputs in a new array. map(.+1) will increment each element of an array of numbers.",
    "filterText": "map",
    "insertText": "map(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map(x)",
    "sortText": "100_map(x)",
    "textEdit": {
      "newText": "map(x)",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "map_values(x) will run that filter for each element, but it will return an object when an object is passed.",
    "filterText": "map",
    "insertText": "map_values(x)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "map_values(x)",
    "sortText": "100_map_values(x)",
    "textEdit": {
      "newText": "map_values(x)",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor after some random word 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor after some random word 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 37,
          "line": 16,
        },
        "start": {
          "character": 37,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor after the dot(variable):/double quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor after the dot(variable):/double quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor after the dot(variable):/single quotes 1`] = `4`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor after the dot(variable):/single quotes 2`] = `
[
  {
    "detail": "string",
    "filterText": "name",
    "insertText": "name",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "name",
    "sortText": "100_name",
    "textEdit": {
      "newText": "name",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "age",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "avgLoad",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "1",
    "filterText": "numberOfPods",
    "insertText": "numberOfPods",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "numberOfPods",
    "sortText": "100_numberOfPods",
    "textEdit": {
      "newText": "numberOfPods",
      "range": {
        "end": {
          "character": 28,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor before empty space 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor before empty space 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor before the dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor before the dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor with a space after the  dot(variable) 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor with a space after the  dot(variable) 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 29,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor with a value following the  dot(variable) 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion cursor with a value following the  dot(variable) 2`] = `
[
  {
    "detail": "1",
    "filterText": "a",
    "insertText": "age",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "age",
    "sortText": "100_age",
    "textEdit": {
      "newText": "age",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "string",
    "filterText": "a",
    "insertText": "avgLoad",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "avgLoad",
    "sortText": "100_avgLoad",
    "textEdit": {
      "newText": "avgLoad",
      "range": {
        "end": {
          "character": 29,
          "line": 16,
        },
        "start": {
          "character": 28,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion empty object 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion empty object 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion empty object 3`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion empty object 4`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion empty object 5`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion empty object 6`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion fn: after some value 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion fn: after some value 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 39,
          "line": 16,
        },
        "start": {
          "character": 39,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 39,
          "line": 16,
        },
        "start": {
          "character": 39,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion fn: starting with a 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion fn: starting with a 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion fn: starting with r 1`] = `0`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion fn: starting with r 2`] = `[]`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion no value/double quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion no value/double quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion no value/single quotes 1`] = `140`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion no value/single quotes 2`] = `
[
  {
    "detail": "The builtin function length gets the length of various different types of value.",
    "filterText": "length",
    "insertText": "length",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "length",
    "sortText": "100_length",
    "textEdit": {
      "newText": "length",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function utf8bytelength outputs the number of bytes used to encode a string in UTF-8.",
    "filterText": "utf8bytelength",
    "insertText": "utf8bytelength",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "utf8bytelength",
    "sortText": "100_utf8bytelength",
    "textEdit": {
      "newText": "'utf8bytelength'",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function keys, when given an object, returns its keys in an array.",
    "filterText": "keys",
    "insertText": "keys",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys",
    "sortText": "100_keys",
    "textEdit": {
      "newText": "keys",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The keys_unsorted function is just like keys, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order.",
    "filterText": "keys_unsorted",
    "insertText": "keys_unsorted",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "keys_unsorted",
    "sortText": "100_keys_unsorted",
    "textEdit": {
      "newText": "keys_unsorted",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "The builtin function has returns whether the input object has the given key, or the input array has an element at the given index.",
    "filterText": "has(key)",
    "insertText": "has(key)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "has(key)",
    "sortText": "100_has(key)",
    "textEdit": {
      "newText": "has(key)",
      "range": {
        "end": {
          "character": 27,
          "line": 16,
        },
        "start": {
          "character": 27,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion space before fn: 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion space before fn: 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 31,
          "line": 16,
        },
        "start": {
          "character": 31,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 31,
          "line": 16,
        },
        "start": {
          "character": 31,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion value fn:/double quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion value fn:/double quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 30,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 30,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion value fn:/single quotes 1`] = `2`;

exports[`SWF LS YAML code completion Jq completions state data filter completions variables completion value fn:/single quotes 2`] = `
[
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc1",
    "insertText": "expressionFunc1",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc1",
    "sortText": "100_expressionFunc1",
    "textEdit": {
      "newText": "'expressionFunc1'",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 30,
          "line": 16,
        },
      },
    },
  },
  {
    "detail": "Reusable functions(expressions) defined in the functions array",
    "filterText": "expressionFunc2",
    "insertText": "expressionFunc2",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "expressionFunc2",
    "sortText": "100_expressionFunc2",
    "textEdit": {
      "newText": "'expressionFunc2'",
      "range": {
        "end": {
          "character": 30,
          "line": 16,
        },
        "start": {
          "character": 30,
          "line": 16,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion empty file completion empty file with a newline after the cursor 1`] = `2`;

exports[`SWF LS YAML code completion empty file completion empty file with a newline after the cursor 2`] = `
[
  {
    "detail": "Start with a simple Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Serverless Workflow Example",
    "sortText": "100_Serverless Workflow Example",
    "textEdit": {
      "newText": "id: '\${1:workflow_unique_identifier}'
version: '\${2:0.1}'
specVersion: '\${3:0.8}'
name: '\${4:Workflow name}'
description: '\${5:Workflow description}'
start: '\${13}'
functions:
  - name: '\${7:uniqueFunctionName}'
    operation: '\${8:localhost#operation}'
    type: '\${9:rest}'
events:
  - name: '\${10:Unique event name}'
    source: '\${11:CloudEvent source}'
    type: '\${12:CloudEvent type}'
states:
  - name: '\${13:StartState}'
    type: '\${14:operation}'
    actions:
      - name: '\${15:uniqueActionName}'
        functionRef:
          refName: '\${7}'
          arguments:
            firstArgument: ''
            secondArgument: ''
    end: true",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "id: '\${1:workflow_unique_identifier}'
version: '\${2:0.1}'
specVersion: '\${3:0.8}'
name: '\${4:Workflow name}'
description: '\${5:Workflow description}'
start: '\${13}'
functions: []
events: []
states: []",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion empty file completion empty file with a newline before the cursor 1`] = `2`;

exports[`SWF LS YAML code completion empty file completion empty file with a newline before the cursor 2`] = `
[
  {
    "detail": "Start with a simple Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Serverless Workflow Example",
    "sortText": "100_Serverless Workflow Example",
    "textEdit": {
      "newText": "id: '\${1:workflow_unique_identifier}'
version: '\${2:0.1}'
specVersion: '\${3:0.8}'
name: '\${4:Workflow name}'
description: '\${5:Workflow description}'
start: '\${13}'
functions:
  - name: '\${7:uniqueFunctionName}'
    operation: '\${8:localhost#operation}'
    type: '\${9:rest}'
events:
  - name: '\${10:Unique event name}'
    source: '\${11:CloudEvent source}'
    type: '\${12:CloudEvent type}'
states:
  - name: '\${13:StartState}'
    type: '\${14:operation}'
    actions:
      - name: '\${15:uniqueActionName}'
        functionRef:
          refName: '\${7}'
          arguments:
            firstArgument: ''
            secondArgument: ''
    end: true",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "id: '\${1:workflow_unique_identifier}'
version: '\${2:0.1}'
specVersion: '\${3:0.8}'
name: '\${4:Workflow name}'
description: '\${5:Workflow description}'
start: '\${13}'
functions: []
events: []
states: []",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion empty file completion total empty file 1`] = `2`;

exports[`SWF LS YAML code completion empty file completion total empty file 2`] = `
[
  {
    "detail": "Start with a simple Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Serverless Workflow Example",
    "sortText": "100_Serverless Workflow Example",
    "textEdit": {
      "newText": "id: '\${1:workflow_unique_identifier}'
version: '\${2:0.1}'
specVersion: '\${3:0.8}'
name: '\${4:Workflow name}'
description: '\${5:Workflow description}'
start: '\${13}'
functions:
  - name: '\${7:uniqueFunctionName}'
    operation: '\${8:localhost#operation}'
    type: '\${9:rest}'
events:
  - name: '\${10:Unique event name}'
    source: '\${11:CloudEvent source}'
    type: '\${12:CloudEvent type}'
states:
  - name: '\${13:StartState}'
    type: '\${14:operation}'
    actions:
      - name: '\${15:uniqueActionName}'
        functionRef:
          refName: '\${7}'
          arguments:
            firstArgument: ''
            secondArgument: ''
    end: true",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "id: '\${1:workflow_unique_identifier}'
version: '\${2:0.1}'
specVersion: '\${3:0.8}'
name: '\${4:Workflow name}'
description: '\${5:Workflow description}'
start: '\${13}'
functions: []
events: []
states: []",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion eventRefs completion add at the beginning / with extra indentation / using the code lenses 1`] = `1`;

exports[`SWF LS YAML code completion eventRefs completion add at the beginning / with extra indentation / using the code lenses 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": "GreetEvent",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetEvent",
    "sortText": "100_GreetEvent",
    "textEdit": {
      "newText": "GreetEvent",
      "range": {
        "end": {
          "character": 6,
          "line": 5,
        },
        "start": {
          "character": 6,
          "line": 5,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion eventRefs completion add at the beginning 1`] = `1`;

exports[`SWF LS YAML code completion eventRefs completion add at the beginning 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": "GreetEvent",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetEvent",
    "sortText": "100_GreetEvent",
    "textEdit": {
      "newText": "GreetEvent",
      "range": {
        "end": {
          "character": 6,
          "line": 5,
        },
        "start": {
          "character": 6,
          "line": 5,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion eventRefs completion add at the beginning, using the code lenses 1`] = `1`;

exports[`SWF LS YAML code completion eventRefs completion add at the beginning, using the code lenses 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": "GreetEvent",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetEvent",
    "sortText": "100_GreetEvent",
    "textEdit": {
      "newText": "GreetEvent",
      "range": {
        "end": {
          "character": 4,
          "line": 5,
        },
        "start": {
          "character": 4,
          "line": 5,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion eventRefs completion add at the end 1`] = `1`;

exports[`SWF LS YAML code completion eventRefs completion add at the end 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": "GreetEvent",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetEvent",
    "sortText": "100_GreetEvent",
    "textEdit": {
      "newText": "GreetEvent",
      "range": {
        "end": {
          "character": 6,
          "line": 6,
        },
        "start": {
          "character": 6,
          "line": 6,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion eventRefs completion add in the middle / without dash character 1`] = `0`;

exports[`SWF LS YAML code completion eventRefs completion add in the middle / without dash character 2`] = `[]`;

exports[`SWF LS YAML code completion eventRefs completion add in the middle 1`] = `1`;

exports[`SWF LS YAML code completion eventRefs completion add in the middle 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": "GreetEvent",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetEvent",
    "sortText": "100_GreetEvent",
    "textEdit": {
      "newText": "GreetEvent",
      "range": {
        "end": {
          "character": 6,
          "line": 6,
        },
        "start": {
          "character": 6,
          "line": 6,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion eventRefs completion empty completion items / with extra space 1`] = `1`;

exports[`SWF LS YAML code completion eventRefs completion empty completion items / with extra space 2`] = `
[
  {
    "detail": ""GreetEvent"",
    "filterText": "GreetEvent",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetEvent",
    "sortText": "100_GreetEvent",
    "textEdit": {
      "newText": "GreetEvent",
      "range": {
        "end": {
          "character": 6,
          "line": 5,
        },
        "start": {
          "character": 6,
          "line": 5,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion eventRefs completion empty completion items 1`] = `0`;

exports[`SWF LS YAML code completion eventRefs completion empty completion items 2`] = `[]`;

exports[`SWF LS YAML code completion events completion add at the beginning / with double extra indentation / using the code lenses 1`] = `1`;

exports[`SWF LS YAML code completion events completion add at the beginning / with double extra indentation / using the code lenses 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "- name: '\${1:Unique event name}'
  source: '\${2:CloudEvent source}'
  type: '\${3:CloudEvent type}'
  kind: '\${4:Eventdef kind}'
  metadata: '\${5:Eventdef metdata}'
",
      "range": {
        "end": {
          "character": 4,
          "line": 1,
        },
        "start": {
          "character": 4,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion events completion add at the beginning / with extra indentation / using the code lenses 1`] = `1`;

exports[`SWF LS YAML code completion events completion add at the beginning / with extra indentation / using the code lenses 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "- name: '\${1:Unique event name}'
  source: '\${2:CloudEvent source}'
  type: '\${3:CloudEvent type}'
  kind: '\${4:Eventdef kind}'
  metadata: '\${5:Eventdef metdata}'
",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion events completion add at the beginning 1`] = `1`;

exports[`SWF LS YAML code completion events completion add at the beginning 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "name: '\${1:Unique event name}'
  source: '\${2:CloudEvent source}'
  type: '\${3:CloudEvent type}'
  kind: '\${4:Eventdef kind}'
  metadata: '\${5:Eventdef metdata}'",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion events completion add at the beginning, using the code lenses 1`] = `1`;

exports[`SWF LS YAML code completion events completion add at the beginning, using the code lenses 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "- name: '\${1:Unique event name}'
  source: '\${2:CloudEvent source}'
  type: '\${3:CloudEvent type}'
  kind: '\${4:Eventdef kind}'
  metadata: '\${5:Eventdef metdata}'
",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion events completion add at the end 1`] = `1`;

exports[`SWF LS YAML code completion events completion add at the end 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "name: '\${1:Unique event name}'
  source: '\${2:CloudEvent source}'
  type: '\${3:CloudEvent type}'
  kind: '\${4:Eventdef kind}'
  metadata: '\${5:Eventdef metdata}'",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion events completion add in the middle / without dash character 1`] = `0`;

exports[`SWF LS YAML code completion events completion add in the middle / without dash character 2`] = `[]`;

exports[`SWF LS YAML code completion events completion add in the middle 1`] = `1`;

exports[`SWF LS YAML code completion events completion add in the middle 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "name: '\${1:Unique event name}'
  source: '\${2:CloudEvent source}'
  type: '\${3:CloudEvent type}'
  kind: '\${4:Eventdef kind}'
  metadata: '\${5:Eventdef metdata}'",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion events completion empty completion items / with extra space 1`] = `1`;

exports[`SWF LS YAML code completion events completion empty completion items / with extra space 2`] = `
[
  {
    "detail": "Add a new event",
    "filterText": "New event",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event",
    "sortText": "100_New event",
    "textEdit": {
      "newText": "name: '\${1:Unique event name}'
  source: '\${2:CloudEvent source}'
  type: '\${3:CloudEvent type}'
  kind: '\${4:Eventdef kind}'
  metadata: '\${5:Eventdef metdata}'",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion events completion empty completion items 1`] = `0`;

exports[`SWF LS YAML code completion events completion empty completion items 2`] = `[]`;

exports[`SWF LS YAML code completion functionRef arguments completion using JSON format 1`] = `0`;

exports[`SWF LS YAML code completion functionRef arguments completion using JSON format 2`] = `[]`;

exports[`SWF LS YAML code completion functionRef arguments completion with same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef arguments completion with same level content after 2`] = `
[
  {
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "'testRelativeFunction1' arguments",
    "insertTextFormat": 2,
    "kind": 9,
    "label": "'testRelativeFunction1' arguments",
    "sortText": "100_'testRelativeFunction1' arguments",
    "textEdit": {
      "newText": "
  argString: '\${1:}'
  argNumber: '\${2:}'
  argBoolean: '\${3:}'",
      "range": {
        "end": {
          "character": 17,
          "line": 13,
        },
        "start": {
          "character": 17,
          "line": 13,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef arguments completion without any function arguments to complete 1`] = `0`;

exports[`SWF LS YAML code completion functionRef arguments completion without any function arguments to complete 2`] = `[]`;

exports[`SWF LS YAML code completion functionRef arguments completion without same level content after / without space after property name 1`] = `0`;

exports[`SWF LS YAML code completion functionRef arguments completion without same level content after / without space after property name 2`] = `[]`;

exports[`SWF LS YAML code completion functionRef arguments completion without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef arguments completion without same level content after 2`] = `
[
  {
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "'testRelativeFunction1' arguments",
    "insertTextFormat": 2,
    "kind": 9,
    "label": "'testRelativeFunction1' arguments",
    "sortText": "100_'testRelativeFunction1' arguments",
    "textEdit": {
      "newText": "
  argString: '\${1:}'
  argNumber: '\${2:}'
  argBoolean: '\${3:}'",
      "range": {
        "end": {
          "character": 17,
          "line": 13,
        },
        "start": {
          "character": 17,
          "line": 13,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef completion with same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef completion with same level content after 2`] = `
[
  {
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 9,
    "label": "testRelativeFunction1",
    "sortText": "100_testRelativeFunction1",
    "textEdit": {
      "newText": "
  refName: 'testRelativeFunction1'
  arguments:
    argString: '\${1:}'
    argNumber: '\${2:}'
    argBoolean: '\${3:}'",
      "range": {
        "end": {
          "character": 17,
          "line": 10,
        },
        "start": {
          "character": 17,
          "line": 10,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef completion without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef completion without same level content after 2`] = `
[
  {
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 9,
    "label": "testRelativeFunction1",
    "sortText": "100_testRelativeFunction1",
    "textEdit": {
      "newText": "
  refName: 'testRelativeFunction1'
  arguments:
    argString: '\${1:}'
    argNumber: '\${2:}'
    argBoolean: '\${3:}'",
      "range": {
        "end": {
          "character": 17,
          "line": 11,
        },
        "start": {
          "character": 17,
          "line": 11,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef refName completion inside double quotes / with same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef refName completion inside double quotes / with same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": "myFunc",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "myFunc",
    "sortText": "100_myFunc",
    "textEdit": {
      "newText": "myFunc",
      "range": {
        "end": {
          "character": 17,
          "line": 12,
        },
        "start": {
          "character": 15,
          "line": 12,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef refName completion inside double quotes / without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef refName completion inside double quotes / without same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": "myFunc",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "myFunc",
    "sortText": "100_myFunc",
    "textEdit": {
      "newText": "myFunc",
      "range": {
        "end": {
          "character": 17,
          "line": 12,
        },
        "start": {
          "character": 15,
          "line": 12,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef refName completion inside single quotes / without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef refName completion inside single quotes / without same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": "myFunc",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "myFunc",
    "sortText": "100_myFunc",
    "textEdit": {
      "newText": "myFunc",
      "range": {
        "end": {
          "character": 17,
          "line": 12,
        },
        "start": {
          "character": 15,
          "line": 12,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef refName completion not in quotes / with same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef refName completion not in quotes / with same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": "myFunc",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "myFunc",
    "sortText": "100_myFunc",
    "textEdit": {
      "newText": "myFunc",
      "range": {
        "end": {
          "character": 15,
          "line": 12,
        },
        "start": {
          "character": 15,
          "line": 12,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef refName completion not in quotes / without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion functionRef refName completion not in quotes / without same level content after 2`] = `
[
  {
    "detail": ""myFunc"",
    "filterText": "myFunc",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "myFunc",
    "sortText": "100_myFunc",
    "textEdit": {
      "newText": "myFunc",
      "range": {
        "end": {
          "character": 15,
          "line": 12,
        },
        "start": {
          "character": 15,
          "line": 12,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functionRef refName completion not in quotes / without space after property name 1`] = `0`;

exports[`SWF LS YAML code completion functionRef refName completion not in quotes / without space after property name 2`] = `[]`;

exports[`SWF LS YAML code completion functions completion add at the beginning / with double extra indentation / using the code lenses 1`] = `2`;

exports[`SWF LS YAML code completion functions completion add at the beginning / with double extra indentation / using the code lenses 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.yaml",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "- name: '\${1:testRelativeFunction1}'
  operation: 'specs/testRelativeService1.yml#testRelativeFunction1'
  type: rest
",
      "range": {
        "end": {
          "character": 4,
          "line": 1,
        },
        "start": {
          "character": 4,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "- name: '\${1:Unique function name}'
  operation: '\${2:localhost#operation}'
  type: '\${3:Function type}'
",
      "range": {
        "end": {
          "character": 4,
          "line": 1,
        },
        "start": {
          "character": 4,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functions completion add at the beginning / with extra indentation / using the code lenses 1`] = `2`;

exports[`SWF LS YAML code completion functions completion add at the beginning / with extra indentation / using the code lenses 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.yaml",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "- name: '\${1:testRelativeFunction1}'
  operation: 'specs/testRelativeService1.yml#testRelativeFunction1'
  type: rest
",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "- name: '\${1:Unique function name}'
  operation: '\${2:localhost#operation}'
  type: '\${3:Function type}'
",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functions completion add at the beginning 1`] = `2`;

exports[`SWF LS YAML code completion functions completion add at the beginning 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.yaml",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "name: '\${1:testRelativeFunction1}'
  operation: 'specs/testRelativeService1.yml#testRelativeFunction1'
  type: rest",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "name: '\${1:Unique function name}'
  operation: '\${2:localhost#operation}'
  type: '\${3:Function type}'",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functions completion add at the beginning, using the code lenses 1`] = `2`;

exports[`SWF LS YAML code completion functions completion add at the beginning, using the code lenses 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.yaml",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "- name: '\${1:testRelativeFunction1}'
  operation: 'specs/testRelativeService1.yml#testRelativeFunction1'
  type: rest
",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "- name: '\${1:Unique function name}'
  operation: '\${2:localhost#operation}'
  type: '\${3:Function type}'
",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functions completion add at the end 1`] = `2`;

exports[`SWF LS YAML code completion functions completion add at the end 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.yaml",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "name: '\${1:testRelativeFunction1}'
  operation: 'specs/testRelativeService1.yml#testRelativeFunction1'
  type: rest",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "name: '\${1:Unique function name}'
  operation: '\${2:localhost#operation}'
  type: '\${3:Function type}'",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functions completion add in the middle / without dash character 1`] = `0`;

exports[`SWF LS YAML code completion functions completion add in the middle / without dash character 2`] = `[]`;

exports[`SWF LS YAML code completion functions completion add in the middle 1`] = `2`;

exports[`SWF LS YAML code completion functions completion add in the middle 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.yaml",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "name: '\${1:testRelativeFunction1}'
  operation: 'specs/testRelativeService1.yml#testRelativeFunction1'
  type: rest",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "name: '\${1:Unique function name}'
  operation: '\${2:localhost#operation}'
  type: '\${3:Function type}'",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functions completion empty completion items / with extra space 1`] = `2`;

exports[`SWF LS YAML code completion functions completion empty completion items / with extra space 2`] = `
[
  {
    "command": {
      "arguments": [
        {
          "containingService": {
            "events": [],
            "functions": [
              {
                "arguments": {
                  "argBoolean": "boolean",
                  "argNumber": "number",
                  "argString": "string",
                },
                "name": "testRelativeFunction1",
                "operation": "specs/testRelativeService1.yml#testRelativeFunction1",
                "source": {
                  "serviceFileAbsolutePath": "/Users/tiago/Desktop/testRelativeService1.yml",
                  "type": "LOCAL_FS",
                },
                "type": "rest",
              },
            ],
            "name": "testRelativeService1",
            "rawContent": "",
            "source": {
              "absoluteFilePath": "/Users/tiago/Desktop/testRelativeService1.yml",
              "type": "LOCAL_FS",
            },
            "type": "rest",
          },
          "documentUri": "test.sw.yaml",
        },
      ],
      "command": "swf.ls.commands.ImportFunctionFromCompletionItem",
      "title": "Import function from completion item",
    },
    "detail": "specs/testRelativeService1.yml#testRelativeFunction1",
    "filterText": "specs»testRelativeService1.yml#testRelativeFunction1",
    "insertTextFormat": 2,
    "kind": 18,
    "label": "specs»testRelativeService1.yml#testRelativeFunction1",
    "sortText": "100_specs»testRelativeService1.yml#testRelativeFunction1",
    "textEdit": {
      "newText": "name: '\${1:testRelativeFunction1}'
  operation: 'specs/testRelativeService1.yml#testRelativeFunction1'
  type: rest",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new function",
    "filterText": "New function",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function",
    "sortText": "100_New function",
    "textEdit": {
      "newText": "name: '\${1:Unique function name}'
  operation: '\${2:localhost#operation}'
  type: '\${3:Function type}'",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion functions completion empty completion items 1`] = `0`;

exports[`SWF LS YAML code completion functions completion empty completion items 2`] = `[]`;

exports[`SWF LS YAML code completion operation completion inside double quotes / without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion operation completion inside double quotes / without same level content after 2`] = `
[
  {
    "detail": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "filterText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "insertTextFormat": 2,
    "kind": 19,
    "label": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "sortText": "100_'specs/testRelativeService1.yml#testRelativeFunction1'",
    "textEdit": {
      "newText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
      "range": {
        "end": {
          "character": 15,
          "line": 2,
        },
        "start": {
          "character": 13,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion operation completion inside single quotes / with same level content after 1`] = `1`;

exports[`SWF LS YAML code completion operation completion inside single quotes / with same level content after 2`] = `
[
  {
    "detail": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "filterText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "insertTextFormat": 2,
    "kind": 19,
    "label": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "sortText": "100_'specs/testRelativeService1.yml#testRelativeFunction1'",
    "textEdit": {
      "newText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
      "range": {
        "end": {
          "character": 15,
          "line": 2,
        },
        "start": {
          "character": 13,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion operation completion inside single quotes / without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion operation completion inside single quotes / without same level content after 2`] = `
[
  {
    "detail": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "filterText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "insertTextFormat": 2,
    "kind": 19,
    "label": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "sortText": "100_'specs/testRelativeService1.yml#testRelativeFunction1'",
    "textEdit": {
      "newText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
      "range": {
        "end": {
          "character": 15,
          "line": 2,
        },
        "start": {
          "character": 13,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion operation completion not in quotes / with same level content after 1`] = `1`;

exports[`SWF LS YAML code completion operation completion not in quotes / with same level content after 2`] = `
[
  {
    "detail": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "filterText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "insertTextFormat": 2,
    "kind": 19,
    "label": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "sortText": "100_'specs/testRelativeService1.yml#testRelativeFunction1'",
    "textEdit": {
      "newText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
      "range": {
        "end": {
          "character": 13,
          "line": 2,
        },
        "start": {
          "character": 13,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion operation completion not in quotes / without space after property name 1`] = `1`;

exports[`SWF LS YAML code completion operation completion not in quotes / without space after property name 2`] = `
[
  {
    "detail": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "filterText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "insertTextFormat": 2,
    "kind": 19,
    "label": "'specs/testRelativeService1.yml#testRelativeFunction1'",
    "sortText": "100_'specs/testRelativeService1.yml#testRelativeFunction1'",
    "textEdit": {
      "newText": "'specs/testRelativeService1.yml#testRelativeFunction1'",
      "range": {
        "end": {
          "character": 13,
          "line": 2,
        },
        "start": {
          "character": 13,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion start completion inside double quotes 1`] = `2`;

exports[`SWF LS YAML code completion start completion inside double quotes 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": "GreetInEnglish",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetInEnglish",
    "sortText": "100_GreetInEnglish",
    "textEdit": {
      "newText": "GreetInEnglish",
      "range": {
        "end": {
          "character": 9,
          "line": 0,
        },
        "start": {
          "character": 7,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": "GreetInSpanish",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetInSpanish",
    "sortText": "100_GreetInSpanish",
    "textEdit": {
      "newText": "GreetInSpanish",
      "range": {
        "end": {
          "character": 9,
          "line": 0,
        },
        "start": {
          "character": 7,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion start completion inside single quotes 1`] = `2`;

exports[`SWF LS YAML code completion start completion inside single quotes 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": "GreetInEnglish",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetInEnglish",
    "sortText": "100_GreetInEnglish",
    "textEdit": {
      "newText": "GreetInEnglish",
      "range": {
        "end": {
          "character": 9,
          "line": 0,
        },
        "start": {
          "character": 7,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": "GreetInSpanish",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetInSpanish",
    "sortText": "100_GreetInSpanish",
    "textEdit": {
      "newText": "GreetInSpanish",
      "range": {
        "end": {
          "character": 9,
          "line": 0,
        },
        "start": {
          "character": 7,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion start completion not in quotes / without space after property name 1`] = `0`;

exports[`SWF LS YAML code completion start completion not in quotes / without space after property name 2`] = `[]`;

exports[`SWF LS YAML code completion start completion not in quotes 1`] = `2`;

exports[`SWF LS YAML code completion start completion not in quotes 2`] = `
[
  {
    "detail": ""GreetInEnglish"",
    "filterText": "GreetInEnglish",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetInEnglish",
    "sortText": "100_GreetInEnglish",
    "textEdit": {
      "newText": "GreetInEnglish",
      "range": {
        "end": {
          "character": 7,
          "line": 0,
        },
        "start": {
          "character": 7,
          "line": 0,
        },
      },
    },
  },
  {
    "detail": ""GreetInSpanish"",
    "filterText": "GreetInSpanish",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "GreetInSpanish",
    "sortText": "100_GreetInSpanish",
    "textEdit": {
      "newText": "GreetInSpanish",
      "range": {
        "end": {
          "character": 7,
          "line": 0,
        },
        "start": {
          "character": 7,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion states completion add at the beginning / with double extra indentation / using the code lenses 1`] = `4`;

exports[`SWF LS YAML code completion states completion add at the beginning / with double extra indentation / using the code lenses 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: operation
  actions:
    - name: '\${5:Unique Action name}'
      functionRef: {}
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 4,
          "line": 1,
        },
        "start": {
          "character": 4,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: event
  onEvents:
    - eventRefs:
        - '\${5:Unique event names}'
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 4,
          "line": 1,
        },
        "start": {
          "character": 4,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: switch
  dataConditions:
    - condition: '\${5:Workflow expression evaluated against state data}'
      transition: '\${6:Transition to another state if condition is true}'
  defaultCondition:
    transition: '\${7:Default transition of the workflow}'
",
      "range": {
        "end": {
          "character": 4,
          "line": 1,
        },
        "start": {
          "character": 4,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: inject
  data: {}
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 4,
          "line": 1,
        },
        "start": {
          "character": 4,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion states completion add at the beginning / with extra indentation / using the code lenses 1`] = `4`;

exports[`SWF LS YAML code completion states completion add at the beginning / with extra indentation / using the code lenses 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: operation
  actions:
    - name: '\${5:Unique Action name}'
      functionRef: {}
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: event
  onEvents:
    - eventRefs:
        - '\${5:Unique event names}'
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: switch
  dataConditions:
    - condition: '\${5:Workflow expression evaluated against state data}'
      transition: '\${6:Transition to another state if condition is true}'
  defaultCondition:
    transition: '\${7:Default transition of the workflow}'
",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: inject
  data: {}
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion states completion add at the beginning 1`] = `4`;

exports[`SWF LS YAML code completion states completion add at the beginning 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: operation
  actions:
    - name: '\${5:Unique Action name}'
      functionRef: {}
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: event
  onEvents:
    - eventRefs:
        - '\${5:Unique event names}'
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: switch
  dataConditions:
    - condition: '\${5:Workflow expression evaluated against state data}'
      transition: '\${6:Transition to another state if condition is true}'
  defaultCondition:
    transition: '\${7:Default transition of the workflow}'",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: inject
  data: {}
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion states completion add at the beginning, using the code lenses 1`] = `4`;

exports[`SWF LS YAML code completion states completion add at the beginning, using the code lenses 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: operation
  actions:
    - name: '\${5:Unique Action name}'
      functionRef: {}
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: event
  onEvents:
    - eventRefs:
        - '\${5:Unique event names}'
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: switch
  dataConditions:
    - condition: '\${5:Workflow expression evaluated against state data}'
      transition: '\${6:Transition to another state if condition is true}'
  defaultCondition:
    transition: '\${7:Default transition of the workflow}'
",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "- name: '\${1:Unique State name}'
  type: inject
  data: {}
  transition: '\${10:Next transition of the workflow}'
  end: false
",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion states completion add at the end 1`] = `4`;

exports[`SWF LS YAML code completion states completion add at the end 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: operation
  actions:
    - name: '\${5:Unique Action name}'
      functionRef: {}
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: event
  onEvents:
    - eventRefs:
        - '\${5:Unique event names}'
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: switch
  dataConditions:
    - condition: '\${5:Workflow expression evaluated against state data}'
      transition: '\${6:Transition to another state if condition is true}'
  defaultCondition:
    transition: '\${7:Default transition of the workflow}'",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: inject
  data: {}
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion states completion add in the middle / without dash character 1`] = `0`;

exports[`SWF LS YAML code completion states completion add in the middle / without dash character 2`] = `[]`;

exports[`SWF LS YAML code completion states completion add in the middle 1`] = `4`;

exports[`SWF LS YAML code completion states completion add in the middle 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: operation
  actions:
    - name: '\${5:Unique Action name}'
      functionRef: {}
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: event
  onEvents:
    - eventRefs:
        - '\${5:Unique event names}'
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: switch
  dataConditions:
    - condition: '\${5:Workflow expression evaluated against state data}'
      transition: '\${6:Transition to another state if condition is true}'
  defaultCondition:
    transition: '\${7:Default transition of the workflow}'",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: inject
  data: {}
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 2,
        },
        "start": {
          "character": 2,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion states completion empty completion items / with extra space 1`] = `4`;

exports[`SWF LS YAML code completion states completion empty completion items / with extra space 2`] = `
[
  {
    "detail": "Add a new operation state",
    "filterText": "New operation state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New operation state",
    "sortText": "100_New operation state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: operation
  actions:
    - name: '\${5:Unique Action name}'
      functionRef: {}
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new event state",
    "filterText": "New event state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New event state",
    "sortText": "100_New event state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: event
  onEvents:
    - eventRefs:
        - '\${5:Unique event names}'
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new switch state",
    "filterText": "New switch state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New switch state",
    "sortText": "100_New switch state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: switch
  dataConditions:
    - condition: '\${5:Workflow expression evaluated against state data}'
      transition: '\${6:Transition to another state if condition is true}'
  defaultCondition:
    transition: '\${7:Default transition of the workflow}'",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
  {
    "detail": "Add a new inject state",
    "filterText": "New inject state",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New inject state",
    "sortText": "100_New inject state",
    "textEdit": {
      "newText": "name: '\${1:Unique State name}'
  type: inject
  data: {}
  transition: '\${10:Next transition of the workflow}'
  end: false",
      "range": {
        "end": {
          "character": 2,
          "line": 1,
        },
        "start": {
          "character": 2,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion states completion empty completion items 1`] = `0`;

exports[`SWF LS YAML code completion states completion empty completion items 2`] = `[]`;

exports[`SWF LS YAML code completion transition completion dataConditions transition completion simple case 1`] = `1`;

exports[`SWF LS YAML code completion transition completion dataConditions transition completion simple case 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": "Inject Mantra",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "Inject Mantra",
    "sortText": "100_Inject Mantra",
    "textEdit": {
      "newText": "Inject Mantra",
      "range": {
        "end": {
          "character": 16,
          "line": 3,
        },
        "start": {
          "character": 16,
          "line": 3,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion transition completion defaultCondition transition completion simple case 1`] = `1`;

exports[`SWF LS YAML code completion transition completion defaultCondition transition completion simple case 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": "Inject Mantra",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "Inject Mantra",
    "sortText": "100_Inject Mantra",
    "textEdit": {
      "newText": "Inject Mantra",
      "range": {
        "end": {
          "character": 16,
          "line": 3,
        },
        "start": {
          "character": 16,
          "line": 3,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion transition completion eventConditions transition completion simple case 1`] = `1`;

exports[`SWF LS YAML code completion transition completion eventConditions transition completion simple case 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": "Inject Mantra",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "Inject Mantra",
    "sortText": "100_Inject Mantra",
    "textEdit": {
      "newText": "Inject Mantra",
      "range": {
        "end": {
          "character": 16,
          "line": 3,
        },
        "start": {
          "character": 16,
          "line": 3,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion transition completion state transition completion inside double quotes / with same level content after 1`] = `1`;

exports[`SWF LS YAML code completion transition completion state transition completion inside double quotes / with same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": "Inject Mantra",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "Inject Mantra",
    "sortText": "100_Inject Mantra",
    "textEdit": {
      "newText": "Inject Mantra",
      "range": {
        "end": {
          "character": 16,
          "line": 2,
        },
        "start": {
          "character": 14,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion transition completion state transition completion inside double quotes / without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion transition completion state transition completion inside double quotes / without same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": "Inject Mantra",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "Inject Mantra",
    "sortText": "100_Inject Mantra",
    "textEdit": {
      "newText": "Inject Mantra",
      "range": {
        "end": {
          "character": 16,
          "line": 2,
        },
        "start": {
          "character": 14,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion transition completion state transition completion inside single quotes / without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion transition completion state transition completion inside single quotes / without same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": "Inject Mantra",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "Inject Mantra",
    "sortText": "100_Inject Mantra",
    "textEdit": {
      "newText": "Inject Mantra",
      "range": {
        "end": {
          "character": 16,
          "line": 2,
        },
        "start": {
          "character": 14,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion transition completion state transition completion not in quotes / with same level content after 1`] = `1`;

exports[`SWF LS YAML code completion transition completion state transition completion not in quotes / with same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": "Inject Mantra",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "Inject Mantra",
    "sortText": "100_Inject Mantra",
    "textEdit": {
      "newText": "Inject Mantra",
      "range": {
        "end": {
          "character": 14,
          "line": 2,
        },
        "start": {
          "character": 14,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion transition completion state transition completion not in quotes / without same level content after 1`] = `1`;

exports[`SWF LS YAML code completion transition completion state transition completion not in quotes / without same level content after 2`] = `
[
  {
    "detail": ""Inject Mantra"",
    "filterText": "Inject Mantra",
    "insertTextFormat": 2,
    "kind": 12,
    "label": "Inject Mantra",
    "sortText": "100_Inject Mantra",
    "textEdit": {
      "newText": "Inject Mantra",
      "range": {
        "end": {
          "character": 14,
          "line": 2,
        },
        "start": {
          "character": 14,
          "line": 2,
        },
      },
    },
  },
]
`;

exports[`SWF LS YAML code completion transition completion state transition completion not in quotes / without space after property name 1`] = `0`;

exports[`SWF LS YAML code completion transition completion state transition completion not in quotes / without space after property name 2`] = `[]`;
