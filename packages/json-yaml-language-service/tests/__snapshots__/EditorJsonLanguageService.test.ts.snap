// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TEST LS JSON code completion empty file completion empty file with a newline after the cursor 1`] = `1`;

exports[`TEST LS JSON code completion empty file completion empty file with a newline after the cursor 2`] = `
[
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "{
  "id": "Empty code completion test"
}",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion empty file completion empty file with a newline before the cursor 1`] = `1`;

exports[`TEST LS JSON code completion empty file completion empty file with a newline before the cursor 2`] = `
[
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "{
  "id": "Empty code completion test"
}",
      "range": {
        "end": {
          "character": 0,
          "line": 1,
        },
        "start": {
          "character": 0,
          "line": 1,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion empty file completion total empty file 1`] = `1`;

exports[`TEST LS JSON code completion empty file completion total empty file 2`] = `
[
  {
    "detail": "Start with an empty Serverless Workflow",
    "insertTextFormat": 2,
    "kind": 1,
    "label": "Empty Serverless Workflow",
    "sortText": "100_Empty Serverless Workflow",
    "textEdit": {
      "newText": "{
  "id": "Empty code completion test"
}",
      "range": {
        "end": {
          "character": 0,
          "line": 0,
        },
        "start": {
          "character": 0,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion functions completion add at the beginning of the array 1`] = `0`;

exports[`TEST LS JSON code completion functions completion add at the beginning of the array 2`] = `[]`;

exports[`TEST LS JSON code completion functions completion add at the end of the array 1`] = `0`;

exports[`TEST LS JSON code completion functions completion add at the end of the array 2`] = `[]`;

exports[`TEST LS JSON code completion functions completion add in the middle of the array / with comma at the end 1`] = `0`;

exports[`TEST LS JSON code completion functions completion add in the middle of the array / with comma at the end 2`] = `[]`;

exports[`TEST LS JSON code completion functions completion add in the middle of the array 1`] = `0`;

exports[`TEST LS JSON code completion functions completion add in the middle of the array 2`] = `[]`;

exports[`TEST LS JSON code completion functions completion add into empty array 1`] = `0`;

exports[`TEST LS JSON code completion functions completion add into empty array 2`] = `[]`;

exports[`TEST LS JSON code completion functions completion pointing after the array 1`] = `1`;

exports[`TEST LS JSON code completion functions completion pointing after the array 2`] = `
[
  {
    "detail": "Add a new function",
    "filterText": "New function completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function completion",
    "sortText": "100_New function completion",
    "textEdit": {
      "newText": ""Function Code completed!"",
      "range": {
        "end": {
          "character": 17,
          "line": 0,
        },
        "start": {
          "character": 17,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion functions completion pointing before the array 1`] = `1`;

exports[`TEST LS JSON code completion functions completion pointing before the array 2`] = `
[
  {
    "detail": "Add a new function",
    "filterText": "New function completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function completion",
    "sortText": "100_New function completion",
    "textEdit": {
      "newText": ""Function Code completed!",",
      "range": {
        "end": {
          "character": 14,
          "line": 0,
        },
        "start": {
          "character": 14,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion functions completion pointing before the array 3`] = `1`;

exports[`TEST LS JSON code completion functions completion pointing before the array 4`] = `
[
  {
    "detail": "Add a new function",
    "filterText": "New function completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New function completion",
    "sortText": "100_New function completion",
    "textEdit": {
      "newText": ""Function Code completed!",",
      "range": {
        "end": {
          "character": 15,
          "line": 0,
        },
        "start": {
          "character": 15,
          "line": 0,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion functions completion pointing inside an object of the array 1`] = `0`;

exports[`TEST LS JSON code completion functions completion pointing inside an object of the array 2`] = `[]`;

exports[`TEST LS JSON code completion start completion inside double quotes / with same level content after / with comma at the end 1`] = `1`;

exports[`TEST LS JSON code completion start completion inside double quotes / with same level content after / with comma at the end 2`] = `
[
  {
    "detail": "Add a new start completion",
    "filterText": "New start completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New start completion",
    "sortText": "100_New start completion",
    "textEdit": {
      "newText": ""Start Code completed!"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion start completion inside double quotes / with same level content after / with spaces and comma at the end 1`] = `1`;

exports[`TEST LS JSON code completion start completion inside double quotes / with same level content after / with spaces and comma at the end 2`] = `
[
  {
    "detail": "Add a new start completion",
    "filterText": "New start completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New start completion",
    "sortText": "100_New start completion",
    "textEdit": {
      "newText": ""Start Code completed!"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion start completion inside double quotes / with same level content after 1`] = `1`;

exports[`TEST LS JSON code completion start completion inside double quotes / with same level content after 2`] = `
[
  {
    "detail": "Add a new start completion",
    "filterText": "New start completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New start completion",
    "sortText": "100_New start completion",
    "textEdit": {
      "newText": ""Start Code completed!",",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion start completion inside double quotes / without same level content after 1`] = `1`;

exports[`TEST LS JSON code completion start completion inside double quotes / without same level content after 2`] = `
[
  {
    "detail": "Add a new start completion",
    "filterText": "New start completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New start completion",
    "sortText": "100_New start completion",
    "textEdit": {
      "newText": ""Start Code completed!"",
      "range": {
        "end": {
          "character": 13,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion start completion not in quotes / with same level content after 1`] = `1`;

exports[`TEST LS JSON code completion start completion not in quotes / with same level content after 2`] = `
[
  {
    "detail": "Add a new start completion",
    "filterText": "New start completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New start completion",
    "sortText": "100_New start completion",
    "textEdit": {
      "newText": ""Start Code completed!",",
      "range": {
        "end": {
          "character": 11,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code completion start completion not in quotes / without same level content after 1`] = `1`;

exports[`TEST LS JSON code completion start completion not in quotes / without same level content after 2`] = `
[
  {
    "detail": "Add a new start completion",
    "filterText": "New start completion",
    "insertTextFormat": 2,
    "kind": 8,
    "label": "New start completion",
    "sortText": "100_New start completion",
    "textEdit": {
      "newText": ""Start Code completed!"",
      "range": {
        "end": {
          "character": 11,
          "line": 9,
        },
        "start": {
          "character": 11,
          "line": 9,
        },
      },
    },
  },
]
`;

exports[`TEST LS JSON code lenses functions code lenses add function - unformatted 1`] = `
{
  "command": {
    "arguments": [
      {
        "newCursorPosition": {
          "character": 14,
          "line": 0,
        },
      },
    ],
    "command": "editor.ls.commands.OpenCompletionItems",
    "title": "+ Add function...",
  },
  "range": {
    "end": {
      "character": 13,
      "line": 0,
    },
    "start": {
      "character": 13,
      "line": 0,
    },
  },
}
`;

exports[`TEST LS JSON diagnostic empty file 1`] = `0`;

exports[`TEST LS JSON diagnostic empty file 2`] = `[]`;

exports[`TEST LS JSON diagnostic missing property value 1`] = `2`;

exports[`TEST LS JSON diagnostic missing property value 2`] = `
[
  {
    "message": "Missing property "type".",
    "range": {
      "end": {
        "character": 11,
        "line": 5,
      },
      "start": {
        "character": 10,
        "line": 5,
      },
    },
    "severity": 2,
  },
  {
    "code": 516,
    "message": "Value expected",
    "range": {
      "end": {
        "character": 11,
        "line": 10,
      },
      "start": {
        "character": 10,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "json",
  },
]
`;

exports[`TEST LS JSON diagnostic missing state type 1`] = `1`;

exports[`TEST LS JSON diagnostic missing state type 2`] = `
[
  {
    "message": "Missing property "type".",
    "range": {
      "end": {
        "character": 11,
        "line": 5,
      },
      "start": {
        "character": 10,
        "line": 5,
      },
    },
    "severity": 2,
  },
]
`;

exports[`TEST LS JSON diagnostic unclosed brackets 1`] = `2`;

exports[`TEST LS JSON diagnostic unclosed brackets 2`] = `
[
  {
    "code": 514,
    "message": "Expected comma",
    "range": {
      "end": {
        "character": 9,
        "line": 10,
      },
      "start": {
        "character": 8,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "json",
  },
  {
    "code": 517,
    "message": "Expected comma or closing bracket",
    "range": {
      "end": {
        "character": 7,
        "line": 11,
      },
      "start": {
        "character": 6,
        "line": 11,
      },
    },
    "severity": 1,
    "source": "json",
  },
]
`;

exports[`TEST LS JSON diagnostic valid 1`] = `0`;

exports[`TEST LS JSON diagnostic valid 2`] = `[]`;

exports[`TEST LS JSON diagnostic wrong start state 1`] = `1`;

exports[`TEST LS JSON diagnostic wrong start state 2`] = `
[
  {
    "message": "Missing 'Wrong state name' in 'states'",
    "range": {
      "end": {
        "character": 35,
        "line": 3,
      },
      "start": {
        "character": 17,
        "line": 3,
      },
    },
  },
]
`;

exports[`TEST LS JSON diagnostic wrong states type 1`] = `1`;

exports[`TEST LS JSON diagnostic wrong states type 2`] = `
[
  {
    "message": "Incorrect type. Expected "array".",
    "range": {
      "end": {
        "character": 37,
        "line": 3,
      },
      "start": {
        "character": 18,
        "line": 3,
      },
    },
    "severity": 2,
  },
]
`;
