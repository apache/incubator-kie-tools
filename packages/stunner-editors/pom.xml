<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~ 
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~ 
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.      
-->
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
>

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.kie.kogito.stunner.editors</groupId>
  <artifactId>stunner-editors-parent</artifactId>
  <version>${revision}</version>
  <packaging>pom</packaging>

  <name>Stunner Editors Java - Parent</name>
  <description>Stunner Editors Java - Parent</description>

  <url>http://kogito.kie.org</url>
  <inceptionYear>2021</inceptionYear>
  <organization>
    <name>JBoss by Red Hat</name>
    <url>http://www.jboss.org/</url>
  </organization>

  <licenses>
    <license>
      <name>Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:kiegroup/kie-tools.git</connection>
    <developerConnection>scm:git:git@github.com:kiegroup/kie-tools.git</developerConnection>
    <url>scm:git:git@github.com:kiegroup/kie-tools.git</url>
  </scm>

  <developers>
    <developer>
      <name>All developers are listed in the KIE GitHub organization</name>
      <url>https://github.com/orgs/kiegroup/people</url>
    </developer>
  </developers>

  <issueManagement>
    <system>jira</system>
    <url>https://issues.redhat.com/browse/KOGITO</url>
  </issueManagement>

  <repositories>
    <repository>
      <id>jboss</id>
      <name>JBoss Public Repo</name>
      <url>https://repository.jboss.org/nexus/content/groups/public</url>
    </repository>
    <repository>
      <id>sonatype-public</id>
      <name>Sonatype Public Snapshots Repo</name>
      <url>https://oss.sonatype.org/content/repositories/public</url>
    </repository>
  </repositories>

  <modules>
    <!-- ERRAI -->
    <module>errai-bom</module>
    <module>errai-common</module>
    <module>errai-javax-enterprise</module>
    <module>errai-ioc</module>
    <module>errai-codegen</module>
    <module>errai-cdi</module>
    <module>errai-ui</module>
    <module>errai-data-binding</module>
    <module>errai-validation</module>
    <module>errai-reflections</module>
    <module>errai-config</module>
    <module>errai-codegen-gwt</module>
    <module>errai-api</module>

    <!-- APPFORMER -->
    <module>appformer-bom</module>
    <module>appformer-client-api</module>
    <module>appformer-kogito-bridge</module>
    <module>appformer-js-monaco</module>
    <module>uberfire-api</module>
    <module>uberfire-client-api</module>
    <module>uberfire-workbench</module>
    <module>uberfire-extensions</module>

    <!-- KIE-WB-COMMON -->
    <module>kie-wb-common-bom</module>
    <module>kie-wb-common-widgets</module>
    <module>kie-wb-common-forms</module>
    <module>kie-wb-common-stunner</module>
    <module>kie-wb-common-dmn</module>
    <module>kie-wb-common-kogito</module>

    <!-- DROOLS-WB -->
    <module>drools-wb-bom</module>
    <module>drools-wb-screens</module>

    <!-- LIENZO -->
    <module>lienzo-core</module>
    <module>lienzo-tests</module>
    <module>lienzo-webapp</module>

  </modules>

  <pluginRepositories>
    <pluginRepository>
      <id>jboss</id>
      <name>JBoss Public Repo</name>
      <url>https://repository.jboss.org/nexus/content/groups/public</url>
    </pluginRepository>
    <pluginRepository>
      <id>public-snapshots-repo</id>
      <url>https://oss.sonatype.org/content/repositories/public/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <properties>
    <!-- Properties from ERRAI parent POM -->
    <!-- The version from kie-parent is not compatible with errai-validation -->
    <version.javax.validation>1.0.0.GA</version.javax.validation>
    <gwtArgs />
    <argLine>-Dgwt.args="${gwtArgs}"</argLine>
    <illegaltransitivereportonly>false</illegaltransitivereportonly>

    <!-- Properties from APPFORMER parent POM -->
    <version.org.webjars.bower.org.patternfly>3.18.1</version.org.webjars.bower.org.patternfly>
    <version.org.webjars.bower.bootstrap-select>1.10.0</version.org.webjars.bower.bootstrap-select>
    <version.org.webjars.npm.moment>2.29.4</version.org.webjars.npm.moment>
    <version.org.webjars.npm.moment-timezone>0.5.43</version.org.webjars.npm.moment-timezone>
    <version.org.webjars.bower.bootstrap-daterangepicker>2.1.25</version.org.webjars.bower.bootstrap-daterangepicker>
    <version.org.webjars.bower.filesaver>1.3.3</version.org.webjars.bower.filesaver>
    <!-- Notice actually there exists a 1.3.3 version for jsPDF, but using this one
        produces a conflict with the UF ace js plugin once trying to create a new jsPDF
        instance.-->
    <version.org.webjars.bowergithub.mrrio.jspdf>2.3.1</version.org.webjars.bowergithub.mrrio.jspdf>
    <version.org.webjars.bowergithub.gliffy.canvas2svg>0.1</version.org.webjars.bowergithub.gliffy.canvas2svg>
    <version.org.webjars.bower.mustachejs>3.0.1</version.org.webjars.bower.mustachejs>
    <version.org.webjars.bower.jqueryui>1.12.1</version.org.webjars.bower.jqueryui>
    <!-- Make OSGi happy -->
    <osgi.snapshot.qualifier>${maven.build.timestamp}</osgi.snapshot.qualifier>
    <jboss.releases.repo.url
    >https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/</jboss.releases.repo.url>
    <jboss.snapshots.repo.url
    >https://repository.jboss.org/nexus/content/repositories/snapshots/</jboss.snapshots.repo.url>

    <version.org.uberfire.latestFinal.release>1.4.0.Final</version.org.uberfire.latestFinal.release>
    <revapi.oldUberFireVersion>${version.org.uberfire.latestFinal.release}</revapi.oldUberFireVersion>
    <revapi.newUberFireVersion>${project.version}</revapi.newUberFireVersion>

    <version.org.kie.kogito.lienzo>${project.version}</version.org.kie.kogito.lienzo>

    <!-- Properties from KIE-WB-COMMON parent POM -->

    <spotbugs.failOnViolation>true</spotbugs.failOnViolation>
    <checkstyle.header.template
    ><![CDATA[
^\/\*$\n^
\* Licensed to the Apache Software Foundation \(ASF\) under one$\n^
\* or more contributor license agreements\.  See the NOTICE file$\n^
\* distributed with this work for additional information$\n^
\* regarding copyright ownership\.  The ASF licenses this file$\n^
\* to you under the Apache License, Version 2\.0 \(the$\n^
\* &quot;License&quot;\); you may not use this file except in compliance$\n^
\* with the License\.  You may obtain a copy of the License at$\n^
\*$\n^
\*   http:\/\/www\.apache\.org\/licenses\/LICENSE-2\.0$\n^
\*$\n^
\* Unless required by applicable law or agreed to in writing,$\n^
\* software distributed under the License is distributed on an$\n^
\* &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY$\n^
\* KIND, either express or implied\.  See the License for the$\n^
\* specific language governing permissions and limitations$\n^
\* under the License\.$\n^
\*\/$
]]>
    </checkstyle.header.template>

    <!-- Properties from DROOLS-WB parent POM -->
    <!-- TODO: Enable these flags after fixing all checkstyle issues -->
    <checkstyle.failOnViolation>true</checkstyle.failOnViolation>
    <checkstyle.logViolationsToConsole>true</checkstyle.logViolationsToConsole>
    <jacoco.haltOnFailure>false</jacoco.haltOnFailure>
    <code.coverage.disabled>false</code.coverage.disabled>

    <!-- General -->
    <version.checkstyle>8.29</version.checkstyle>
    <maven.compiler.target>1.8</maven.compiler.target>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.testTarget>${maven.compiler.target}</maven.compiler.testTarget>
    <maven.compiler.testSource>${maven.compiler.source}</maven.compiler.testSource>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- JaCoCo coverage data file location -->
    <!--suppress UnresolvedMavenProperty -->
    <project.root.dir>${maven.multiModuleProjectDirectory}</project.root.dir>
    <jacoco.exec.file>${project.root.dir}/target/jacoco.exec</jacoco.exec.file>
    <checkstyle.header.extensions>java</checkstyle.header.extensions>

    <!-- Maven Plugins -->
    <version.antrun.plugin>1.8</version.antrun.plugin>
    <version.buildhelper.plugin>3.0.0</version.buildhelper.plugin>
    <version.bundle.plugin>3.3.0</version.bundle.plugin>
    <version.checkstyle.plugin>3.2.0</version.checkstyle.plugin>
    <version.clean.plugin>3.1.0</version.clean.plugin>
    <version.compiler.plugin>3.10.1</version.compiler.plugin>
    <version.dependency.plugin>3.3.0</version.dependency.plugin>
    <version.deploy.plugin>2.8.2</version.deploy.plugin>
    <version.enforcer.plugin>3.1.0</version.enforcer.plugin>
    <version.failsafe.plugin>${version.surefire.plugin}</version.failsafe.plugin>
    <version.install.plugin>2.5.2</version.install.plugin>
    <version.jacoco.plugin>0.8.5</version.jacoco.plugin>
    <version.jar.plugin>3.1.0</version.jar.plugin>
    <version.jarjar.plugin>1.5</version.jarjar.plugin>
    <version.org.jvnet.jaxb2.maven2.maven-jaxb2-plugin>0.15.1</version.org.jvnet.jaxb2.maven2.maven-jaxb2-plugin>
    <version.org.kie.gwthelper.maven>1.3</version.org.kie.gwthelper.maven>
    <version.replacer.plugin>1.5.2</version.replacer.plugin>
    <version.resources.plugin>3.1.0</version.resources.plugin>
    <version.shade.plugin>3.2.1</version.shade.plugin>
    <version.site.plugin>3.7.1</version.site.plugin>
    <version.spotbugs-maven-plugin>3.1.8</version.spotbugs-maven-plugin>
    <version.sonar.plugin>3.9.1.2184</version.sonar.plugin>
    <version.source.plugin>3.0.1</version.source.plugin>
    <version.surefire.plugin>2.22.2</version.surefire.plugin>
    <version.war.plugin>3.2.2</version.war.plugin>
    <version.zanata.plugin>2.3.0</version.zanata.plugin>

    <!-- KIE Libraries -->
    <version.org.kie>8.44.0.Final</version.org.kie>
    <version.org.kogito.gwt-jsonix-schema-compiler>1.3.0</version.org.kogito.gwt-jsonix-schema-compiler>

    <!-- Third party Libraries -->
    <version.ch.qos.logback>1.2.11</version.ch.qos.logback>
    <version.com.google.elemental2>1.1.0</version.com.google.elemental2>
    <version.com.google.guava>32.1.3-jre</version.com.google.guava>
    <version.org.gwtproject>2.10.0</version.org.gwtproject>
    <version.com.google.jsinterop.base>1.0.0</version.com.google.jsinterop.base>
    <version.com.thoughtworks.xstream>1.4.20</version.com.thoughtworks.xstream>
    <version.enforce-managed-deps-rule>1.3</version.enforce-managed-deps-rule>
    <version.enfore-victims-rule>1.3.4</version.enfore-victims-rule>
    <version.illegal-transitive-dependency-check>1.7.4</version.illegal-transitive-dependency-check>
    <version.javax.annotation-api>1.3.2</version.javax.annotation-api>
    <version.javax.enterprise>2.0.SP1</version.javax.enterprise>
    <version.net.bytebuddy>1.10.3</version.net.bytebuddy>
    <version.net.sourceforge.cssparser>0.9.21</version.net.sourceforge.cssparser>
    <version.org.apache.regexp>1.8.2</version.org.apache.regexp>
    <version.org.codehaus.mojo.extra-enforcer-rules>1.4</version.org.codehaus.mojo.extra-enforcer-rules>
    <version.org.codehaus.selenium.plugin>2.3</version.org.codehaus.selenium.plugin>
    <version.org.commonjava.plugin>1.0</version.org.commonjava.plugin>
    <version.org.eclipse.emf.gwt>2.9.0</version.org.eclipse.emf.gwt>
    <version.org.freemarker>2.3.31</version.org.freemarker>
    <version.org.hisrc.jsonix.jsonix-scripts>3.0.0</version.org.hisrc.jsonix.jsonix-scripts>
    <version.com.google.inject.guice>4.0</version.com.google.inject.guice>
    <version.org.gwtbootstrap3>1.0.1</version.org.gwtbootstrap3>
    <version.org.gwtbootstrap3-extras>1.0.2</version.org.gwtbootstrap3-extras>
    <version.org.javassist>3.26.0-GA</version.org.javassist>
    <version.org.jboss.arquillian.selenium>3.13.0</version.org.jboss.arquillian.selenium>
    <version.org.jboss.maven-jdocbook-plugin>2.3.5</version.org.jboss.maven-jdocbook-plugin>
    <version.org.jboss.pressbang>2.0.0</version.org.jboss.pressbang>
    <version.org.jboss.spec.javax.annotation.jboss-annotations-api_1.2_spec
    >1.0.0.Final</version.org.jboss.spec.javax.annotation.jboss-annotations-api_1.2_spec>
    <version.org.jsoup>1.15.3</version.org.jsoup>
    <version.org.ow2.asm>7.1</version.org.ow2.asm>
    <version.org.w3c.css.sac>1.3</version.org.w3c.css.sac>

    <!-- Test Libraries -->
    <version.io.github.bonigarcia>5.5.3</version.io.github.bonigarcia>
    <version.junit>4.13.2</version.junit>
    <version.org.assertj>3.22.0</version.org.assertj>
    <version.com.google.gwt.gwtmockito>1.1.9</version.com.google.gwt.gwtmockito>
    <version.org.mockito>3.12.4</version.org.mockito>
    <version.powermock.api.mockito2>2.0.9</version.powermock.api.mockito2>
    <version.org.xmlunit>2.9.0</version.org.xmlunit>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Common BOMs -->
      <dependency>
        <groupId>org.kie</groupId>
        <artifactId>kie-dmn-bom</artifactId>
        <version>${version.org.kie}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- There is no official Selenium BOM, so we are using one maintained by Arquillian.
     (contains only pure Selenium deps, no ARQ deps are leaking from this BOM) -->
      <dependency>
        <groupId>org.jboss.arquillian.selenium</groupId>
        <artifactId>selenium-bom</artifactId>
        <version>${version.org.jboss.arquillian.selenium}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- All errai's modules and third-party versions are defined in this POM -->
      <dependency>
        <groupId>org.kie.kogito.stunner.editors</groupId>
        <artifactId>errai-bom</artifactId>
        <version>${project.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- All appformer's modules and third-party versions are defined in this POM -->
      <dependency>
        <groupId>org.kie.kogito.stunner.editors</groupId>
        <artifactId>appformer-bom</artifactId>
        <version>${project.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- All kie-wb-common's modules and third-party versions are defined in this POM -->
      <dependency>
        <groupId>org.kie.kogito.stunner.editors</groupId>
        <artifactId>kie-wb-common-bom</artifactId>
        <version>${project.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- All drools-wb's modules and third-party versions are defined in this POM -->
      <dependency>
        <groupId>org.kie.kogito.stunner.editors</groupId>
        <artifactId>drools-wb-bom</artifactId>
        <version>${project.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- Lienzo artifacts for kogito stream -->
      <dependency>
        <groupId>org.kie.kogito.stunner.editors</groupId>
        <artifactId>lienzo-core</artifactId>
        <version>${version.org.kie.kogito.lienzo}</version>
      </dependency>
      <dependency>
        <groupId>org.kie.kogito.stunner.editors</groupId>
        <artifactId>lienzo-core</artifactId>
        <version>${version.org.kie.kogito.lienzo}</version>
        <classifier>sources</classifier>
      </dependency>
      <dependency>
        <groupId>org.kie.kogito.stunner.editors</groupId>
        <artifactId>lienzo-tests</artifactId>
        <version>${version.org.kie.kogito.lienzo}</version>
      </dependency>
      <dependency>
        <groupId>org.kie.kogito.stunner.editors</groupId>
        <artifactId>lienzo-tests</artifactId>
        <version>${version.org.kie.kogito.lienzo}</version>
        <classifier>sources</classifier>
      </dependency>

      <!-- KIE Libraries -->
      <dependency>
        <groupId>org.kogito</groupId>
        <artifactId>gwt-jsonix-schema-compiler</artifactId>
        <version>${version.org.kogito.gwt-jsonix-schema-compiler}</version>
      </dependency>

      <!-- Third Party Libraries -->
      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${version.ch.qos.logback}</version>
      </dependency>

      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-core</artifactId>
        <version>${version.ch.qos.logback}</version>
      </dependency>

      <dependency>
        <groupId>com.google.elemental2</groupId>
        <artifactId>elemental2-core</artifactId>
        <version>${version.com.google.elemental2}</version>
      </dependency>

      <dependency>
        <groupId>com.google.elemental2</groupId>
        <artifactId>elemental2-dom</artifactId>
        <version>${version.com.google.elemental2}</version>
      </dependency>

      <dependency>
        <groupId>com.google.elemental2</groupId>
        <artifactId>elemental2-promise</artifactId>
        <version>${version.com.google.elemental2}</version>
      </dependency>

      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>${version.com.google.guava}</version>
      </dependency>

      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava-gwt</artifactId>
        <version>${version.com.google.guava}</version>
      </dependency>

      <dependency>
        <groupId>org.gwtproject</groupId>
        <artifactId>gwt-dev</artifactId>
        <version>${version.org.gwtproject}</version>
        <exclusions>
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>
          <exclusion>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>com.google.inject</groupId>
        <artifactId>guice</artifactId>
        <version>${version.com.google.inject.guice}</version>
      </dependency>

      <dependency>
        <groupId>com.google.inject</groupId>
        <artifactId>guice</artifactId>
        <version>${version.com.google.inject.guice}</version>
        <classifier>no_aop</classifier>
      </dependency>

      <dependency>
        <groupId>com.google.jsinterop</groupId>
        <artifactId>base</artifactId>
        <version>${version.com.google.jsinterop.base}</version>
      </dependency>

      <dependency>
        <groupId>javax.enterprise</groupId>
        <artifactId>cdi-api</artifactId>
        <version>${version.javax.enterprise}</version>
        <!-- Avoid collisions with equivalent JBoss Spec APIs -->
        <exclusions>
          <exclusion>
            <groupId>javax.el</groupId>
            <artifactId>javax.el-api</artifactId>
          </exclusion>
          <exclusion>
            <groupId>javax.interceptor</groupId>
            <artifactId>javax.interceptor-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.hisrc.jsonix</groupId>
        <artifactId>jsonix-scripts</artifactId>
        <version>${version.org.hisrc.jsonix.jsonix-scripts}</version>
      </dependency>

      <dependency>
        <groupId>com.thoughtworks.xstream</groupId>
        <artifactId>xstream</artifactId>
        <version>${version.com.thoughtworks.xstream}</version>
      </dependency>

      <dependency>
        <groupId>javax.annotation</groupId>
        <artifactId>javax.annotation-api</artifactId>
        <version>${version.javax.annotation-api}</version>
      </dependency>

      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy</artifactId>
        <version>${version.net.bytebuddy}</version>
      </dependency>

      <dependency>
        <groupId>net.sourceforge.cssparser</groupId>
        <artifactId>cssparser</artifactId>
        <version>${version.net.sourceforge.cssparser}</version>
      </dependency>

      <dependency>
        <groupId>org.eclipselabs</groupId>
        <artifactId>org.eclipse.emf.gwt.ecore</artifactId>
        <version>${version.org.eclipse.emf.gwt}</version>
      </dependency>

      <dependency>
        <groupId>org.eclipselabs</groupId>
        <artifactId>org.eclipse.emf.gwt.common</artifactId>
        <version>${version.org.eclipse.emf.gwt}</version>
      </dependency>

      <dependency>
        <groupId>org.freemarker</groupId>
        <artifactId>freemarker</artifactId>
        <version>${version.org.freemarker}</version>
      </dependency>

      <dependency>
        <groupId>org.javassist</groupId>
        <artifactId>javassist</artifactId>
        <version>${version.org.javassist}</version>
      </dependency>

      <dependency>
        <groupId>org.gwtbootstrap3</groupId>
        <artifactId>gwtbootstrap3</artifactId>
        <version>${version.org.gwtbootstrap3}</version>
      </dependency>

      <dependency>
        <groupId>org.gwtbootstrap3</groupId>
        <artifactId>gwtbootstrap3-extras</artifactId>
        <version>${version.org.gwtbootstrap3-extras}</version>
      </dependency>

      <dependency>
        <groupId>org.jboss.spec.javax.annotation</groupId>
        <artifactId>jboss-annotations-api_1.2_spec</artifactId>
        <version>${version.org.jboss.spec.javax.annotation.jboss-annotations-api_1.2_spec}</version>
      </dependency>

      <dependency>
        <groupId>org.jsoup</groupId>
        <artifactId>jsoup</artifactId>
        <version>${version.org.jsoup}</version>
      </dependency>

      <dependency>
        <groupId>org.w3c.css</groupId>
        <artifactId>sac</artifactId>
        <version>${version.org.w3c.css.sac}</version>
      </dependency>

      <!-- TEST -->
      <dependency>
        <groupId>io.github.bonigarcia</groupId>
        <artifactId>webdrivermanager</artifactId>
        <version>${version.io.github.bonigarcia}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-core</artifactId>
        <version>${version.org.assertj}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${version.junit}</version>
      </dependency>

      <dependency>
        <groupId>com.google.gwt.gwtmockito</groupId>
        <artifactId>gwtmockito</artifactId>
        <version>${version.com.google.gwt.gwtmockito}</version>
        <exclusions>
          <exclusion>
            <!--  Collides with 'org.jboss.spec.javax.el:jboss-el-api_3.0_spec'  -->
            <groupId>org.mortbay.jasper</groupId>
            <artifactId>apache-el</artifactId>
          </exclusion>
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>
          <exclusion>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
          </exclusion>
          <!-- Excluding old com.google.gwt 2.8.0 gwt-user and gwt-dev assets 
               that collides with newer org.gwtproject assets in gwt 2.10+ versions -->
          <exclusion>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
          </exclusion>
          <exclusion>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>${version.org.mockito}</version>
      </dependency>

      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-inline</artifactId>
        <version>${version.org.mockito}</version>
      </dependency>

      <dependency>
        <groupId>org.powermock</groupId>
        <artifactId>powermock-api-mockito2</artifactId>
        <version>${version.powermock.api.mockito2}</version>
      </dependency>

      <dependency>
        <groupId>org.xmlunit</groupId>
        <artifactId>xmlunit-core</artifactId>
        <version>${version.org.xmlunit}</version>
      </dependency>

      <dependency>
        <groupId>org.xmlunit</groupId>
        <artifactId>xmlunit-assertj</artifactId>
        <version>${version.org.xmlunit}</version>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <build>
    <!-- include module descriptors from src/main/java in order not to break the Intellij GWT plugin -->
    <resources>
      <resource>
        <directory>src/main/java</directory>
        <filtering>true</filtering>
        <excludes>
          <!-- Only errai needs to include java sources -->
          <exclude>org/appformer/**/*.java</exclude>
          <exclude>org/uberfire/**/*.java</exclude>
          <exclude>org/kie/workbench/**/*.java</exclude>
          <exclude>org/drools/workbench/**/*.java</exclude>
        </excludes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>

    <plugins>
      <plugin>
        <!-- Entry needed to provide parsed version properties -->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}</directory>
              <includes>
                <include>www-test/**</include>
                <include>.gwt/**</include>
                <include>.errai/**</include>
                <include>war/WEB-INF/deploy/**</include>
                <include>war/WEB-INF/lib/**</include>
                <include>war/WEB-INF/classes/**</include>
                <include>src/main/webapp/WEB-INF/deploy/**</include>
                <include>src/main/webapp/WEB-INF/lib/**</include>
                <include>src/main/webapp/WEB-INF/classes/**</include>
                <include>**/*.JUnit/**</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <!--Fix translations from Zanata -->
      <plugin>
        <groupId>com.google.code.maven-replacer-plugin</groupId>
        <artifactId>replacer</artifactId>
        <version>${version.replacer.plugin}</version>
        <configuration>
          <includes>
            <include>**/*Constants_de.properties</include>
            <include>**/*Constants_es.properties</include>
            <include>**/*Constants_fr.properties</include>
            <include>**/*Constants_ja.properties</include>
            <include>**/*Constants_pt_BR.properties</include>
            <include>**/*Constants_zh_CN.properties</include>
            <include>**/*Constants_ru.properties</include>
          </includes>
          <excludes>
            <exclude>**/ErraiApp.properties</exclude>
          </excludes>
          <replacements>
            <replacement>
              <token>''</token>
              <value>'</value>
            </replacement>
            <replacement>
              <token>'</token>
              <value>''</value>
            </replacement>
          </replacements>
        </configuration>
      </plugin>

      <!-- Zanata - translations -->
      <plugin>
        <groupId>org.zanata</groupId>
        <artifactId>zanata-maven-plugin</artifactId>
        <version>${version.zanata.plugin}</version>
        <configuration>
          <excludes>**/ErraiApp.properties</excludes>
          <projectConfig>${session.executionRootDirectory}/src/main/config/zanata.xml</projectConfig>
          <srcDir>src/main/resources/</srcDir>
          <transDir>src/main/resources/</transDir>
          <includes>**/*Constants.properties</includes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <!-- Temporary workaround for https://issues.jboss.org/browse/ERRAI-1101. Needs to stay here until
          we find a general solution (e.g. moving all localized code to Errai TranslationService. -->
          <execution>
            <id>create-default-i18n-resource</id>
            <phase>process-resources</phase>
            <configuration>
              <target>
                <copy
                  todir="${project.build.directory}/classes"
                  includeemptydirs="false"
                  failonerror="false"
                  quiet="true"
                >
                  <fileset dir="${project.build.directory}/classes" />
                  <globmapper from="*Constants.properties" to="*Constants_default.properties" />
                </copy>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>1.3.0</version>
        <configuration>
          <updatePomFile>true</updatePomFile>
          <flattenMode>resolveCiFriendliesOnly</flattenMode>
        </configuration>
        <executions>
          <execution>
            <id>flatten-revision</id>
            <phase>process-resources</phase>
            <goals>
              <goal>flatten</goal>
            </goals>
          </execution>
          <execution>
            <id>flatten-revision-clean</id>
            <phase>clean</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${version.buildhelper.plugin}</version>
          <executions>
            <execution>
              <goals>
                <goal>parse-version</goal>
              </goals>
            </execution>
            <execution>
              <id>add-source</id>
              <phase>generate-sources</phase>
              <goals>
                <goal>add-source</goal>
              </goals>
              <configuration>
                <sources>
                  <source>target/generated-sources/annotations</source>
                </sources>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${version.antrun.plugin}</version>
          <dependencies>
            <dependency>
              <groupId>org.apache.ant</groupId>
              <artifactId>ant-apache-regexp</artifactId>
              <version>${version.org.apache.regexp}</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${version.checkstyle.plugin}</version>
          <executions>
            <execution>
              <id>validate</id>
              <phase>validate</phase>
              <goals>
                <goal>check</goal>
              </goals>
              <configuration>
                <checkstyleRules>
                  <module name="Checker">
                    <!-- Checks for whitespace. -->
                    <module name="FileTabCharacter">
                      <property name="severity" value="error" />
                      <property name="eachLine" value="true" />
                    </module>
                    <module name="TreeWalker">
                      <!-- Import settings: getting rid of redundant import, forbid star notation, defined order of imports. -->
                      <module name="RedundantImport" />
                      <module name="AvoidStarImport">
                        <property name="allowClassImports" value="false" />
                        <property name="allowStaticMemberImports" value="false" />
                      </module>
                      <module name="CustomImportOrder">
                        <property
                          name="customImportOrderRules"
                          value="STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STATIC"
                        />
                        <property name="specialImportsRegExp" value="^javax\." />
                        <property name="standardPackageRegExp" value="^java\." />
                        <property name="sortImportsInGroupAlphabetically" value="true" />
                        <property name="separateLineBetweenGroups" value="true" />
                      </module>
                      <module name="UnusedImports" />
                      <module name="NeedBraces">
                        <property
                          name="tokens"
                          value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"
                        />
                      </module>
                      <module name="EqualsHashCode" />
                    </module>
                    <module name="RegexpHeader">
                      <property name="header" value="${checkstyle.header.template}" />
                      <property name="fileExtensions" value="${checkstyle.header.extensions}" />
                    </module>
                  </module>
                </checkstyleRules>
                <outputFile>${project.build.directory}/checkstyle.log</outputFile>
                <includeTestSourceDirectory>true</includeTestSourceDirectory>
                <includeResources>true</includeResources>
                <includeTestResources>true</includeTestResources>
                <consoleOutput>false</consoleOutput>
                <logViolationsToConsole>${checkstyle.logViolationsToConsole}</logViolationsToConsole>
                <failsOnError>false</failsOnError>
              </configuration>
            </execution>
          </executions>
          <dependencies>
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>${version.checkstyle}</version>
              <exclusions>
                <exclusion>
                  <groupId>com.sun</groupId>
                  <artifactId>tools</artifactId>
                </exclusion>
              </exclusions>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${version.clean.plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${version.compiler.plugin}</version>
          <configuration>
            <showDeprecation>true</showDeprecation>
            <showWarnings>true</showWarnings>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
            <testSource>${maven.compiler.testSource}</testSource>
            <testTarget>${maven.compiler.testTarget}</testTarget>
            <compilerArgs>
              <arg>-Xlint:unchecked</arg>
            </compilerArgs>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${version.dependency.plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${version.deploy.plugin}</version>
          <configuration>
            <retryFailedDeploymentCount>10</retryFailedDeploymentCount>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${version.enforcer.plugin}</version>
          <executions>
            <execution>
              <id>enforce-plugin-versions</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requirePluginVersions>
                    <message>One or more plugins do not have valid version! The version needs to be
                      explicitly specified, can not be a -SNAPSHOT version and can not be one of
                      the special (and buggy) Maven versions (LATEST, RELEASE).
                    </message>
                    <unCheckedPluginList>org.kie:kie-maven-plugin</unCheckedPluginList>
                  </requirePluginVersions>
                  <requireFilesDontExist>
                    <files>
                      <file>${project.basedir}/src/main/resources/logback-test.xml</file>
                      <file>${project.basedir}/src/main/filtered-resources/logback-test.xml</file>
                    </files>
                  </requireFilesDontExist>
                </rules>
              </configuration>
            </execution>
            <execution>
              <id>no-managed-deps</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <phase>initialize</phase>
              <configuration>
                <rules>
                  <requireManagedDeps implementation="org.commonjava.maven.enforcer.rule.EnforceManagedDepsRule">
                    <checkProfiles>true</checkProfiles>
                    <failOnViolation>true</failOnViolation>
                  </requireManagedDeps>
                </rules>
              </configuration>
            </execution>
            <execution>
              <id>enforce-direct-dependencies</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <phase>none</phase>
              <configuration>
                <rules>
                  <illegalTransitiveDependencyCheck
                    implementation="de.is24.maven.enforcer.rules.IllegalTransitiveDependencyCheck"
                  >
                    <reportOnly>${illegaltransitivereportonly}</reportOnly>
                    <regexIgnoredClasses combine.children="append">
                      <!-- The marshalling classes are generated by Errai during GWT compilation. These classes
                           usually contain references to other dependencies which are not part of the project
                           (transitive dependencies), which then results in the dependency check failure.
                           From the maintenance point of view, ignoring these generated classes seems like the
                           best option. -->
                      <regexIgnoredClass>
                        org\.jboss\.errai\.marshalling\.server\.impl\.ServerMarshallingFactory.*
                      </regexIgnoredClass>
                      <!-- The maven-shade-plugin needs these classes to be compile-scope in guvnor-ala-openshift-client to be picked up, and
                           then referenced in guvnor-ala-openshift-provider. When we don't need to shade anymore, we can remove these lines. -->
                      <regexIgnoredClass>io\.fabric8\.kubernetes.*</regexIgnoredClass>
                      <regexIgnoredClass>io\.fabric8\.openshift.*</regexIgnoredClass>
                      <regexIgnoredClass>com\.sun\.net\.httpserver\..+</regexIgnoredClass>
                      <regexIgnoredClass>javax\..+</regexIgnoredClass>
                      <regexIgnoredClass>org\.w3c\.dom\..+</regexIgnoredClass>
                      <regexIgnoredClass>org\.xml\.sax\..+</regexIgnoredClass>
                    </regexIgnoredClasses>
                  </illegalTransitiveDependencyCheck>
                </rules>
              </configuration>
            </execution>
            <execution>
              <id>ban-blacklisted-dependencies</id>
              <phase>validate</phase>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <bannedDependencies>
                    <excludes combine.children="append">
                      <!-- Ban blacklisted logging deps (we only use SLF4J + Logback) -->
                      <!-- In case of transitive dependency, exclude it and use 'org.slf4j:jcl-over-slf4j' instead -->
                      <exclude>commons-logging:commons-log*</exclude>
                      <!-- In case of transitive dependency, exclude it and use 'org.slf4j:log4j-over-slf4j' instead -->
                      <exclude>log4j:log4j</exclude>
                      <!-- In case of transitive dependency, exclude it and use 'org.javassist:javassist' instead -->
                      <exclude>javassist:javassist</exclude>
                      <exclude>org.apache.cxf:cxf-bundle-jaxrs</exclude>
                      <exclude>org.jboss.weld.se:weld-se
                      </exclude><!-- Use weld-se-core instead -->
                      <exclude>org.jboss.weld.servlet:weld-servlet
                      </exclude><!-- Use weld-servlet-core instead -->
                      <exclude>org.mockito:mockito-all</exclude><!-- Use mockito-core instead -->
                    </excludes>
                  </bannedDependencies>
                </rules>
                <fail>true</fail>
              </configuration>
            </execution>
            <execution>
              <id>ban-duplicated-classes</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <phase>validate</phase>
              <configuration>
                <rules>
                  <banDuplicateClasses>
                    <ignoreClasses>
                      <!-- Ban 'org.elasticsearch:elasticsearch' internal classes, as the artifact contains
                        some duplicated classes for Joda time ones and it has the joda artifact
                        as transitive dependency as well. -->
                      <ignoreClass>org.joda.time.*</ignoreClass>
                      <!-- Classes bundled in errai-javax-enterprise which are GWT friendly.
                           See https://github.com/kiegroup/kie-tools/blob/main/packages/stunner-editors/errai-javax-enterprise/README -->
                      <ignoreClass>javax.interceptor.InvocationContext</ignoreClass>
                      <ignoreClass>javax.inject.Provider</ignoreClass>
                      <ignoreClass>javax.inject.Named</ignoreClass>
                      <ignoreClass>javax.inject.Scope</ignoreClass>
                      <ignoreClass>javax.inject.Qualifier</ignoreClass>
                      <ignoreClass>javax.inject.Singleton</ignoreClass>
                      <ignoreClass>javax.enterprise.*</ignoreClass>

                      <!-- TODO: Fix and remove these ignores -->
                      <ignoreClass>org.slf4j.*</ignoreClass>

                      <!-- Classes from gwt-user duplicated in errai-uibinder -->
                      <ignoreClass>com.google.gwt.uibinder.rebind.UiBinderWriter</ignoreClass>
                      <ignoreClass>com.google.gwt.uibinder.rebind.UiBinderGenerator</ignoreClass>
                      <!-- Duplicated by XStream's transitive deps, with very little chance to get properly fixed -->
                      <ignoreClass>org.xmlpull.v1.XmlPullParserException</ignoreClass>
                      <ignoreClass>org.xmlpull.v1.XmlPullParser</ignoreClass>
                      <!-- Duplicated in xml-apis:xml-apis:jar:1.4.01 and xerces:xercesImpl:jar:2.11.0.SP4. The class is identical
                           and there is very little chance this will get ever fixed. -->
                      <ignoreClass>org.w3c.dom.ElementTraversal</ignoreClass>
                      <ignoreClass>org.w3c.dom.UserDataHandler</ignoreClass>
                    </ignoreClasses>
                    <dependencies>
                      <!-- gwt-user bundles javax.servlet classes which usually conflicts with the servlet dependencies
                           in -webapp modules. -->
                      <dependency>
                        <groupId>org.gwtproject</groupId>
                        <artifactId>gwt-user</artifactId>
                        <type>jar</type>
                        <ignoreClasses>
                          <ignoreClass>javax.servlet.*</ignoreClass>
                        </ignoreClasses>
                      </dependency>
                      <!-- gwt-dev bundles dozens of different 3rd party dependencies, but can not be usually excluded
                           as e.g. GWT Mockito tests are using the com.google.gwt classes inside. Ignoring it for the
                           duplicate classes check seems to be the only way. -->
                      <dependency>
                        <groupId>org.gwtproject</groupId>
                        <artifactId>gwt-dev</artifactId>
                        <type>jar</type>
                        <ignoreClasses>
                          <ignoreClass>*</ignoreClass>
                        </ignoreClasses>
                      </dependency>
                      <!-- netty-all duplicates many netty-* jars but they are managed to the same version -->
                      <dependency>
                        <groupId>io.netty</groupId>
                        <artifactId>netty-all</artifactId>
                        <type>jar</type>
                        <ignoreClasses>
                          <ignoreClass>*</ignoreClass>
                        </ignoreClasses>
                      </dependency>
                      <dependency>
                        <groupId>org.apache.xmlbeans</groupId>
                        <artifactId>xmlbeans</artifactId>
                        <type>jar</type>
                        <ignoreClasses>
                          <!-- Classes duplicated by the jar itself (bug), see https://issues.apache.org/jira/browse/XMLBEANS-499 -->
                          <ignoreClass>org.apache.xmlbeans.xml.stream.XMLName</ignoreClass>
                          <ignoreClass>org.apache.xmlbeans.xml.stream.XMLInputStream</ignoreClass>
                          <ignoreClass>org.apache.xmlbeans.xml.stream.utils.NestedThrowable</ignoreClass>
                          <ignoreClass>org.apache.xmlbeans.xml.stream.utils.NestedThrowable$Util</ignoreClass>
                          <ignoreClass>org.apache.xmlbeans.xml.stream.XMLStreamException</ignoreClass>
                          <ignoreClass>org.apache.xmlbeans.xml.stream.ReferenceResolver</ignoreClass>
                          <ignoreClass>org.apache.xmlbeans.xml.stream.XMLEvent</ignoreClass>
                          <ignoreClass>org.apache.xmlbeans.xml.stream.Location</ignoreClass>
                        </ignoreClasses>
                      </dependency>
                    </dependencies>
                    <findAllDuplicates>true</findAllDuplicates>
                  </banDuplicateClasses>
                </rules>
                <fail>true</fail>
              </configuration>
            </execution>
            <execution>
              <id>no-duplicate-declared-dependencies</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <banDuplicatePomDependencyVersions />
                </rules>
              </configuration>
            </execution>
            <execution>
              <id>ban-unwanted-deps</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <phase>validate</phase>
              <configuration>
                <rules>
                  <bannedDependencies>
                    <excludes>
                      <!-- Ban unwanted logging deps -->
                      <!-- In case of transitive dependency, exclude it and use jcl-over-slf4j instead -->
                      <exclude>commons-logging:commons-log*</exclude>
                      <!-- In case of transitive dependency, exclude it and use log4j-over-slf4j instead -->
                      <exclude>log4j:log4j</exclude>
                      <!-- Ban 'javassist:javassist' in favor of 'org.javassist:javassist' -->
                      <exclude>javassist:javassist</exclude>
                    </excludes>
                  </bannedDependencies>
                </rules>
              </configuration>
            </execution>
          </executions>
          <dependencies>
            <dependency>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>extra-enforcer-rules</artifactId>
              <version>${version.org.codehaus.mojo.extra-enforcer-rules}</version>
            </dependency>
            <dependency>
              <groupId>org.ow2.asm</groupId>
              <artifactId>asm-analysis</artifactId>
              <version>${version.org.ow2.asm}</version>
            </dependency>
            <dependency>
              <groupId>de.is24.maven.enforcer.rules</groupId>
              <artifactId>illegal-transitive-dependency-check</artifactId>
              <version>${version.illegal-transitive-dependency-check}</version>
            </dependency>
            <dependency>
              <groupId>com.redhat.victims</groupId>
              <artifactId>enforce-victims-rule</artifactId>
              <version>${version.enfore-victims-rule}</version>
            </dependency>
            <dependency>
              <groupId>org.commonjava.maven.enforcer</groupId>
              <artifactId>enforce-managed-deps-rule</artifactId>
              <version>${version.enforce-managed-deps-rule}</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${version.failsafe.plugin}</version>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
              <configuration>
                <includes>
                  <include>org/appformer/**/*IntegrationTest.java</include>
                  <include>org/uberfire/**/*IntegrationTest.java</include>
                  <include>org/kie/workbench/**/*IntegrationTest.java</include>
                  <include>org/kie/workbench/**/*IT.java</include>
                  <include>org/drools/workbench/**/*IntegrationTest.java</include>
                  <include>org/drools/workbench/**/*IT.java</include>
                </includes>
                <argLine>-Xmx1024m -Dfile.encoding=${project.build.sourceEncoding}</argLine>
              </configuration>
            </execution>
          </executions>
          <configuration>
            <includes>
              <!-- Include integration tests from appformer and uberfire -->
              <include>org/appformer/**/*IntegrationTest.java</include>
              <include>org/uberfire/**/*IntegrationTest.java</include>
              <!-- Include integration tests from kie-wb-common -->
              <include>org/kie/workbench/**/*IntegrationTest.java</include>
              <include>org/kie/workbench/**/*IT.java</include>
              <!-- Include integration tests from drools-wb -->
              <include>org/drools/workbench/**/*IntegrationTest.java</include>
              <include>org/drools/workbench/**/*IT.java</include>
            </includes>
            <argLine>-Xmx1024m -Dfile.encoding=${project.build.sourceEncoding}</argLine>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>${version.install.plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${version.jar.plugin}</version>
          <executions>
            <execution>
              <id>default-jar</id>
              <configuration>
                <archive>
                  <manifestEntries combine.children="append">
                    <Automatic-Module-Name>${java.module.name}</Automatic-Module-Name>
                  </manifestEntries>
                </archive>
              </configuration>
            </execution>
            <!-- No OSGi manifestEntries for <goal>jar</goal>: if it supported, then felix has already added them -->
            <execution>
              <id>test-jar</id>
              <goals>
                <goal>test-jar</goal>
              </goals>
              <configuration>
                <skipIfEmpty>true</skipIfEmpty>
                <excludes>
                  <exclude>**/logback-test.xml</exclude>
                  <exclude>**/jndi.properties</exclude>
                </excludes>
                <archive>
                  <manifestEntries>
                    <Bundle-SymbolicName>${java.module.name}.tests</Bundle-SymbolicName>
                    <Bundle-Version>
                      ${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.${osgi.snapshot.qualifier}
                    </Bundle-Version>
                    <Bundle-Name>${project.name}</Bundle-Name>
                    <Bundle-Vendor>${project.organization.name}</Bundle-Vendor>
                  </manifestEntries>
                </archive>
              </configuration>
            </execution>
          </executions>
          <configuration>
            <archive>
              <index>true</index>
              <manifest>
                <addDefaultSpecificationEntries>
                  true
                </addDefaultSpecificationEntries>
                <addDefaultImplementationEntries>
                  true
                </addDefaultImplementationEntries>
              </manifest>
              <manifestEntries>
                <Implementation-URL>${project.url}</Implementation-URL>
                <Java-Version>${java.version}</Java-Version>
                <Java-Vendor>${java.vendor}</Java-Vendor>
                <Os-Name>${os.name}</Os-Name>
                <Os-Arch>${os.arch}</Os-Arch>
                <Os-Version>${os.version}</Os-Version>
                <Scm-Url>${project.scm.url}</Scm-Url>
                <Scm-Connection>${project.scm.connection}</Scm-Connection>
                <Scm-Revision>${buildNumber}</Scm-Revision>
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${version.jacoco.plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.jvnet.jaxb2.maven2</groupId>
          <artifactId>maven-jaxb2-plugin</artifactId>
          <version>${version.org.jvnet.jaxb2.maven2.maven-jaxb2-plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.kie</groupId>
          <artifactId>kie-gwthelper-maven-plugin</artifactId>
          <version>${version.org.kie.gwthelper.maven}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${version.resources.plugin}</version>
          <configuration>
            <encoding>${project.build.sourceEncoding}</encoding>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>${version.site.plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${version.shade.plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>${version.source.plugin}</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <goals>
                <goal>jar-no-fork</goal>
              </goals>
              <configuration>
                <archive>
                  <manifestEntries>
                    <Bundle-ManifestVersion>2</Bundle-ManifestVersion>
                    <Bundle-SymbolicName>${project.artifactId}.source</Bundle-SymbolicName>
                    <Bundle-Version>
                      ${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.${osgi.snapshot.qualifier}
                    </Bundle-Version>
                    <Bundle-Name>${project.name}</Bundle-Name>
                    <Bundle-Vendor>${project.organization.name}</Bundle-Vendor>
                    <Eclipse-SourceBundle>
                      ${project.artifactId};version="${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.${osgi.snapshot.qualifier}";roots:="."
                    </Eclipse-SourceBundle>
                  </manifestEntries>
                </archive>
              </configuration>
            </execution>
            <execution>
              <id>attach-test-sources</id>
              <goals>
                <goal>test-jar-no-fork</goal>
              </goals>
              <configuration>
                <archive>
                  <manifestEntries>
                    <Bundle-ManifestVersion>2</Bundle-ManifestVersion>
                    <Bundle-SymbolicName>${project.artifactId}.tests.source</Bundle-SymbolicName>
                    <Bundle-Version>
                      ${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.${osgi.snapshot.qualifier}
                    </Bundle-Version>
                    <Bundle-Name>${project.name}</Bundle-Name>
                    <Bundle-Vendor>${project.organization.name}</Bundle-Vendor>
                    <Eclipse-SourceBundle>
                      ${project.artifactId}.tests;version="${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.${osgi.snapshot.qualifier}";roots:="."
                    </Eclipse-SourceBundle>
                  </manifestEntries>
                </archive>
              </configuration>
            </execution>
          </executions>
          <configuration>
            <archive>
              <index>true</index>
              <manifest>
                <addDefaultSpecificationEntries>
                  true
                </addDefaultSpecificationEntries>
                <addDefaultImplementationEntries>
                  true
                </addDefaultImplementationEntries>
              </manifest>
              <manifestEntries>
                <Implementation-URL>${project.url}</Implementation-URL>
                <Java-Version>${java.version}</Java-Version>
                <Java-Vendor>${java.vendor}</Java-Vendor>
                <Os-Name>${os.name}</Os-Name>
                <Os-Arch>${os.arch}</Os-Arch>
                <Os-Version>${os.version}</Os-Version>
                <Scm-Url>${project.scm.url}</Scm-Url>
                <Scm-Connection>${project.scm.connection}</Scm-Connection>
                <Scm-Revision>${buildNumber}</Scm-Revision>
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${version.surefire.plugin}</version>
          <configuration>
            <includes>
              <!-- Include all from appformer and uberfire -->
              <include>org/appformer/**/*Test.java</include>
              <include>org/uberfire/**/*Test.java</include>
              <!-- Include all from kie-wb-common -->
              <include>org/kie/workbench/**/*Test.java</include>
              <!-- Include all from drools-wb -->
              <include>org/drools/workbench/**/*Test.java</include>
            </includes>
            <excludes>
              <!-- Exclude all from errai as each module has its own configuration -->
              <exclude>org/jboss/errai/**/*.java</exclude>
              <!-- Exclude integration tests from appformer and uberfire -->
              <exclude>org/appformer/**/*IntegrationTest.java</exclude>
              <exclude>org/uberfire/**/*IntegrationTest.java</exclude>
              <!-- Exclude integration tests from kie-wb-common -->
              <exclude>org/kie/workbench/**/*IntegrationTest.java</exclude>
              <exclude>org/kie/workbench/**/*IT.java</exclude>
              <!-- Exclude integration tests from drools-wb -->
              <exclude>org/drools/workbench/**/*IntegrationTest.java</exclude>
              <exclude>org/drools/workbench/**/*IT.java</exclude>
            </excludes>
            <argLine>-Dfile.encoding=${project.build.sourceEncoding}</argLine>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>gwt-maven-plugin</artifactId>
          <version>${version.org.gwtproject}</version>
          <executions>
            <execution>
              <goals>
                <goal>resources</goal>
                <goal>compile</goal>
              </goals>
            </execution>
            <execution>
              <id>clean</id>
              <phase>clean</phase>
              <goals>
                <goal>clean</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>${version.war.plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.jboss.maven.plugins</groupId>
          <artifactId>maven-jdocbook-plugin</artifactId>
          <version>${version.org.jboss.maven-jdocbook-plugin}</version>
          <extensions>true</extensions>
          <dependencies>
            <dependency>
              <groupId>org.jboss.pressgang</groupId>
              <artifactId>pressgang-jdocbook-style</artifactId>
              <type>jdocbook-style</type>
              <version>${version.org.jboss.pressbang}</version>
            </dependency>
            <dependency>
              <groupId>org.jboss.pressgang</groupId>
              <!--Non-namespaced version for DocBook 4.5 compatibility. For XSD namespaced version, use pressgang-xslt-ns -->
              <artifactId>pressgang-xslt</artifactId>
              <version>${version.org.jboss.pressbang}</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>jarjar-maven-plugin</artifactId>
          <version>${version.jarjar.plugin}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.felix</groupId>
          <artifactId>maven-bundle-plugin</artifactId>
          <version>${version.bundle.plugin}</version>
          <extensions>true</extensions>
          <configuration>
            <!-- Split packages in combination with <Export-Package> causes bloated jars otherwise -->
            <excludeDependencies>true</excludeDependencies>
            <instructions>
              <_removeheaders>Ignore-Package</_removeheaders>
              <_nouses>true</_nouses>
              <_snapshot>${osgi.snapshot.qualifier}</_snapshot>
              <Bundle-Version>
                ${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}.${osgi.snapshot.qualifier}
              </Bundle-Version>
            </instructions>
            <obrRepository>NONE</obrRepository>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.commonjava.maven.plugins</groupId>
          <artifactId>project-sources-maven-plugin</artifactId>
          <version>${version.org.commonjava.plugin}</version>
          <executions>
            <execution>
              <id>project-sources-archive</id>
              <phase>initialize</phase>
              <goals>
                <goal>archive</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>selenium-maven-plugin</artifactId>
          <version>${version.org.codehaus.selenium.plugin}</version>
        </plugin>

        <plugin>
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <version>${version.spotbugs-maven-plugin}</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <profiles>
    <!-- ERRAI profiles -->
    <profile>
      <id>macJvm6Settings</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <!-- If we could limit this profile to JDK <=6 on Mac, we'd include -d32 in argLine. But we can't, because profile activation settings are ORed rather than ANDed together. See http://jira.codehaus.org/browse/MNG-4565 -->
      <properties>
        <argLine>-XX:CompileThreshold=1000 -Djava.awt.headless=true</argLine>
      </properties>
    </profile>

    <profile>
      <id>firefox-test</id>
      <properties>
        <gwtArgs>-prod -userAgents gecko1_8 -runStyle Selenium:127.0.0.1:4444/*firefox</gwtArgs>
        <argLine>-Dgwt.args="${gwtArgs}"</argLine>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>selenium-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start-server</goal>
                </goals>
                <configuration>
                  <background>true</background>
                </configuration>
              </execution>

              <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop-server</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>org.seleniumhq.selenium</groupId>
          <artifactId>selenium-firefox-driver</artifactId>
          <scope>test</scope>
          <exclusions>
            <exclusion>
              <groupId>commons-logging</groupId>
              <artifactId>commons-logging</artifactId>
            </exclusion>
            <exclusion>
              <groupId>com.squareup.okio</groupId>
              <artifactId>okio</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <dependency>
          <groupId>org.seleniumhq.selenium</groupId>
          <artifactId>selenium-java</artifactId>
          <scope>test</scope>
          <exclusions>
            <exclusion>
              <groupId>commons-logging</groupId>
              <artifactId>commons-logging</artifactId>
            </exclusion>
            <exclusion>
              <groupId>com.squareup.okio</groupId>
              <artifactId>okio</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>integration-test</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <skipTests>false</skipTests>
              <useSystemClassLoader>false</useSystemClassLoader>
              <useManifestOnlyJar>false</useManifestOnlyJar>
              <!--               <forkMode>pertest</forkMode> this is the same as below -->
              <!-- http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html#Migrating_the_Deprecated_forkMode_Parameter_to_forkCount_and_reuseForks -->
              <forkCount>1</forkCount>
              <reuseForks>false</reuseForks>
              <argLine>${argLine}</argLine>
              <additionalClasspathElements>
                <additionalClasspathElement>${basedir}/target/classes/</additionalClasspathElement>
                <additionalClasspathElement>${basedir}/test-classes/</additionalClasspathElement>
                <additionalClasspathElement>${basedir}/src/main/java/</additionalClasspathElement>
                <additionalClasspathElement>${basedir}/src/test/java/</additionalClasspathElement>
              </additionalClasspathElements>
              <systemProperties>
                <!-- Must disable long polling for automated tests to succeed -->
                <property>
                  <name>errai.hosted_mode_testing</name>
                  <value>true</value>
                </property>
              </systemProperties>
              <includes>
                <include>**/*Test.java</include>
                <include>**/*Tests.java</include>
              </includes>
              <argLine>-Xmx1024m -Dfile.encoding=${project.build.sourceEncoding}</argLine>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>quick-hosted-mode</id>
      <activation>
        <property>
          <name>hosted</name>
        </property>
      </activation>
      <properties>
        <google.webtoolkit.compileSkip>true</google.webtoolkit.compileSkip>
        <o>true</o>
        <!-- offline -->
      </properties>
    </profile>

    <!-- APPFORMER profiles -->
    <profile>
      <id>graph</id>
      <build>
        <plugins>
          <!-- Important: you need to have Graphviz installed on your system to make the plugin work! -->
          <plugin>
            <groupId>org.fusesource.mvnplugins</groupId>
            <artifactId>maven-graph-plugin</artifactId>
            <version>1.38</version>
            <executions>
              <execution>
                <id>dependency-graph-reactor</id>
                <phase>install</phase>
                <goals>
                  <goal>reactor</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <hideExternal>true</hideExternal>
            </configuration>
          </plugin>
          <!-- Copied from kie-parent -->
          <plugin>
            <groupId>org.revapi</groupId>
            <artifactId>revapi-maven-plugin</artifactId>
            <version>0.8.1</version>
            <dependencies>
              <dependency>
                <groupId>org.revapi</groupId>
                <artifactId>revapi-java</artifactId>
                <version>0.13.1</version>
              </dependency>
            </dependencies>
            <configuration>
              <oldArtifacts>
                <artifact>${project.groupId}:${project.artifactId}:${revapi.oldUberFireVersion}</artifact>
              </oldArtifacts>
              <newArtifacts>
                <artifact>${project.groupId}:${project.artifactId}:${revapi.newUberFireVersion}</artifact>
              </newArtifacts>
              <!-- By default revapi will check the oldArtifact against the currently executed build -->
              <analysisConfigurationFiles>
                <configurationFile>
                  <path>src/build/revapi-config.json</path>
                  <roots>
                    <root>filters</root>
                    <root>ignores</root>
                  </roots>
                </configurationFile>
              </analysisConfigurationFiles>
              <!-- By default, revapi will only fail the build if there are potentially breaking or breaking changes. However, in the report
                   we want even non breaking changes to be present. -->
              <reportSeverity>nonBreaking</reportSeverity>
              <failSeverity>potentiallyBreaking</failSeverity>
            </configuration>
            <!-- Running two executions is a workaround to make sure we get a HTML report in case revapi finds
                 some incompatible changes. The "check" goal will simply fail the whole build before it could get
                 to the report. To make sure we always get a HTML report, the "report" goal needs to be executed
                 before the "check" goal.
                 Once https://github.com/revapi/revapi/issues/11 is fixed it should be possible to use single execution. -->
            <executions>
              <execution>
                <id>check</id>
                <goals>
                  <goal>check</goal>
                </goals>
                <phase>verify</phase>
              </execution>
              <execution>
                <!-- report can be found in ${build.directory}/site/revapi-report.html -->
                <id>report</id>
                <goals>
                  <goal>report</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>run-code-coverage</id>
      <properties>
        <jacoco.excludes>*Lexer</jacoco.excludes>
        <code.coverage.disabled>false</code.coverage.disabled>
        <gwt.compiler.skip>true</gwt.compiler.skip> <!-- org.codehaus.mojo:gwt-maven-plugin -->
        <gwt.skipCompilation>true</gwt.skipCompilation> <!-- net.ltgt.gwt.maven:gwt-maven-plugin -->
      </properties>

      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.jacoco</groupId>
            <artifactId>org.jacoco.agent</artifactId>
            <classifier>runtime</classifier>
            <version>${version.jacoco.plugin}</version>
            <scope>test</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>org.jacoco</groupId>
          <artifactId>org.jacoco.agent</artifactId>
          <classifier>runtime</classifier>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.jacoco</groupId>
              <artifactId>jacoco-maven-plugin</artifactId>
              <version>${version.jacoco.plugin}</version>
              <configuration>
                <append>true</append>
                <dataFile>${jacoco.exec.file}</dataFile>
                <excludes>
                  <exclude>${jacoco.excludes}</exclude>
                </excludes>
              </configuration>
              <executions>
                <execution>
                  <id>default-instrument</id>
                  <goals>
                    <goal>instrument</goal>
                  </goals>
                </execution>
                <execution>
                  <id>default-restore-instrumented-classes</id>
                  <goals>
                    <goal>restore-instrumented-classes</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
            <plugin>
              <artifactId>maven-surefire-plugin</artifactId>
              <configuration>
                <systemPropertyVariables>
                  <jacoco-agent.destfile>${jacoco.exec.file}</jacoco-agent.destfile>
                </systemPropertyVariables>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <configuration>
              <skip>${code.coverage.disabled}</skip>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>fullProfile</id>
      <activation>
        <property>
          <name>full</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>ban-duplicated-classes</id>
                <!-- The execution's configuration is part of the pluginManagement. This piece here only makes sure the
                     execution is enabled (by specifying a phase) for full profile builds. -->
                <phase>validate</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>spotbugs-check</id>
                <phase>compile</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!--
     Creates JaCoCo XML reports and invokes the Sonar scanner, which uploads code quality data into the SonarCloud.
   -->
    <profile>
      <id>sonarcloud-analysis</id>
      <properties>
        <sonar.coverage.jacoco.xmlReportPaths
        >${project.reporting.outputDirectory}/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.organization>kiegroup</sonar.organization>
        <!--suppress UnresolvedMavenProperty -->
        <sonar.login>${env.SONARCLOUD_TOKEN}</sonar.login>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>generate-aggregated-jacoco-report</id>
                <phase>validate</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <!--
                    Jacoco ant "report" task provides control over scope of the generated report. The report task
                    requires access to sources, classes and .exec file containing coverage data. The configuration
                    below uses sources and classes of the entire project (each of its modules) and a single jacoco.exec
                    file placed in project root directory.
                    Jacoco maven plugin does not provide such a level of control and requires an artificial module that
                    depends on all modules in the project to generate an aggregated report for all the modules.
                    This necessity of creating a reporting module in every project is rather intrusive.
                    See:
                    https://www.jacoco.org/jacoco/trunk/doc/report-aggregate-mojo.html and
                    https://groups.google.com/forum/#!topic/jacoco/oMxNZs_DNII
                  -->
                  <target>
                    <echo message="Generating JaCoCo Reports" />
                    <taskdef name="report" classname="org.jacoco.ant.ReportTask" />
                    <mkdir dir="${project.reporting.outputDirectory}/jacoco" />
                    <report>
                      <executiondata>
                        <fileset dir="${project.root.dir}/target">
                          <!--
                            Include a single jacoco.exec file, which should be used in append mode by every module.
                          -->
                          <include name="jacoco.exec" />
                        </fileset>
                      </executiondata>
                      <structure name="Coverage Report">
                        <group name="${project.artifactId}">
                          <classfiles>
                            <fileset dir="${project.root.dir}">
                              <!--
                                Include class files from every module.
                              -->
                              <include name="**/target/classes/**/*.class" />
                              <!--
                                Following classes are excluded as they are present in multiple modules. Usually they
                                are a product of tests or 3rd party dependencies that got unwrapped in target/classes
                                folder during the build. These are not a subject of test coverage measurement.
                              -->
                              <exclude name="**/target/**/target/classes/**/*.class" />
                              <exclude name="**/.errai/**/*.class" />
                              <exclude name="**/target/classes/org/jboss/errai/**/*.class" />
                              <!--
                                TODO: there are multiple classes of the same fully qualified name in kie-server modules.
                                They need to be renamed to enable coverage reporting for them.
                                -->
                              <exclude name="**/target/classes/**/org/kie/server/gateway/KieServerGateway.class" />
                              <exclude
                                name="**/target/classes/**/org/kie/server/springboot/samples/KieServerApplication.class"
                              />
                            </fileset>
                          </classfiles>
                          <sourcefiles encoding="UTF-8">
                            <fileset dir="${project.root.dir}">
                              <!--
                                Include source files from every module.
                              -->
                              <include name="**/src/main/**/*.java" />
                            </fileset>
                          </sourcefiles>
                        </group>
                      </structure>
                      <!-- The same report is generated in each module -->
                      <xml destfile="${project.reporting.outputDirectory}/jacoco/jacoco.xml" />
                    </report>
                  </target>
                </configuration>
              </execution>
            </executions>
            <dependencies>
              <dependency>
                <groupId>org.jacoco</groupId>
                <artifactId>org.jacoco.ant</artifactId>
                <!-- Keep the version in sync with jacoco-maven-plugin -->
                <version>${version.jacoco.plugin}</version>
              </dependency>
            </dependencies>
          </plugin>
          <plugin>
            <groupId>org.sonarsource.scanner.maven</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
            <version>${version.sonar.plugin}</version>
            <executions>
              <execution>
                <goals>
                  <goal>sonar</goal>
                </goals>
                <phase>validate</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>sonarcloud-analysis-pull-request</id>
      <activation>
        <property>
          <name>env.ghprbPullId</name>
        </property>
      </activation>
      <properties>
        <sonar.pullrequest.provider>GitHub</sonar.pullrequest.provider>
        <!--suppress UnresolvedMavenProperty -->
        <sonar.pullrequest.branch>${env.ghprbSourceBranch}</sonar.pullrequest.branch>
        <!--suppress UnresolvedMavenProperty -->
        <sonar.pullrequest.key>${env.ghprbPullId}</sonar.pullrequest.key>
        <!--suppress UnresolvedMavenProperty -->
        <sonar.pullrequest.base>${env.ghprbTargetBranch}</sonar.pullrequest.base>
      </properties>
    </profile>
  </profiles>
</project>
