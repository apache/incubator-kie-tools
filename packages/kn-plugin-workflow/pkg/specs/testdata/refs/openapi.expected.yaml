info:
  title: Example API
  version: 1.0.0
openapi: 3.0.3
paths:
  /items:
    get:
      operationId: getItems
      parameters:
        - in: query
          name: filter
          schema:
            $ref: "#/components/schemas/FilterSchema"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Item"
                type: array
          description: Successful response
        "201":
          description: Created
          links:
            GetItemById:
              $ref: "#/components/links/GetItemById"
      summary: Get a list of items
      tags:
        - items
  /orders:
    get:
      operationId: getOrders
      parameters:
        - $ref: "#/components/parameters/OrderId"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrdersList"
          description: List of orders
          headers:
            X-Rate-Limit-Remaining:
              $ref: "#/components/headers/RateLimitHeader"
      summary: Get a list of orders
    post:
      operationId: createOrder
      requestBody:
        $ref: "#/components/requestBodies/CreateOrderRequest"
      responses:
        "201":
          $ref: "#/components/responses/OrderCreatedResponse"
      summary: Create a new order
  /orders/{orderId}:
    get:
      operationId: getOrder
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/OrderResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
      summary: Get order information
components:
  examples:
    OrderExample:
      summary: Order example
      value:
        id: "12345"
        status: processing
  headers:
    RateLimitHeader:
      description: Remaining request limit
      schema:
        type: integer
  links:
    GetItemById:
      operationId: getItem
      parameters:
        itemId: $response.body#/id
  parameters:
    Limit:
      description: Record limit
      in: query
      name: limit
      schema:
        type: integer
    OrderId:
      description: Order identifier
      in: query
      name: orderId
      required: true
      schema:
        type: string
  requestBodies:
    CreateOrderRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateOrderSchema"
      description: Data to create a new order
  responses:
    NotFoundResponse:
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
            type: object
      description: Resource not found
    OrderCreatedResponse:
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
            type: object
      description: Order created
    OrderResponse:
      content:
        application/json:
          examples:
            orderExample:
              $ref: "#/components/examples/OrderExample"
          schema:
            $ref: "#/components/schemas/Order"
      description: Order information
  schemas:
    CreateOrderSchema:
      properties:
        productId:
          type: string
        quantity:
          type: integer
      type: object
    FilterSchema:
      properties:
        category:
          type: string
        status:
          type: string
      type: object
    Item:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    Order:
      properties:
        id:
          type: string
        status:
          type: string
      type: object
    OrdersList:
      items:
        $ref: "#/components/schemas/Order"
      type: array
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
    OAuth2Security:
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          scopes:
            read: Read access
            write: Write access
          tokenUrl: https://example.com/oauth/token
      type: oauth2
tags:
  - description: Item operations
    name: items
