/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import { ReferenceDictionary, Wrapped } from "@kie-tools-core/i18n/dist/core";
import { CommonI18n } from "@kie-tools/i18n-common-dictionary";

interface DmnEditorDictionary extends ReferenceDictionary {
  autoLayout: string;
  backToDiagram: string;
  yourAnnotationsHere: string;
  filter: string;
  close: string;
  none: string;
  noneYet: string;
  name: string;
  cancel: string;
  with: string;
  dataTypes: {
    days: string;
    hours: string;
    minutes: string;
    seconds: string;
    tweakTheTimezone: string;
    selectTimezone: string;
    years: string;
    months: string;
    dataTypeConstraints: string;
    enumeration: string;
    expression: string;
    range: string;
    allValuesAllowed: string;
    addEnumValue: string;
    addValue: string;
    removeEnumValue: string;
    equivalentFeelExpression: string;
    nextValidDate: (value: string, operator: string) => string;
    nextValidDateTime: (value: string, operator: string) => string;
    nextValidNumber: (value: string, operator: string) => string;
    nextValidYearsAndMonths: (value: string, operator: string) => string;
    start: string;
    clickToRemoveValue: string;
    clickToIncludeValue: string;
    startsWith: string;
    startingValueIncluded: string;
    startingValueNotIncluded: string;
    clickToRemoveValueFromRange: string;
    clickToIncludeInRange: string;
    endsWith: string;
    endingValueIncludedInRange: string;
    endingValueNotIncludedInRange: string;
    descriptionPlaceholder: string;
    isStruct: string;
    type: string;
    collectionConstraint: string;
    collectionConstrainsTypeConstraint: string;
    collectionItemConstraint: string;
    collectionItemConstraintAllowedValues: string;
    allowedValues: string;
    creatingConstraints: string;
    noCustomDataTypes: string;
    dmnEmptyBody: string;
    duplicateDmnDetected: string;
    conflictsDetectedMessage: string;
    internalDataTypeConflicts: string;
    editableDataTypes: string;
    replaceExistingDmn: string;
    preserveExistingDmn: string;
    replace: string;
    keepBoth: string;
    remove: string;
    external: string;
    id: string;
    copy: string;
    isCollection: string;
    deprecated: string;
    newDataType: string;
    paste: string;
    createCustomDataType: string;
    or: string;
    pasteDataType: string;
    externalDataTypeConflicts: string;
    externalSources: string;
    propertiesInDefinition: (definitionName: string) => string;
    addItemComponent: string;
    expandAll: string;
    collapseAll: string;
    pasteProperty: string;
    expandCollapseItemComponent: string;
    view: string;
    extractDataType: string;
    cut: string;
    addPropertiesToDefinition: (definitionName: string) => string;
    builtIn: string;
    custom: string;
    jumpToDefinition: string;
    selectDataType: string;
    checkFeelHandbook: Array<string | Wrapped<"feelHandBook">>;
    dmnTypeConstraintText: Array<string | Wrapped<"typeConstraint" | "lineBreak">>;
    typeConstraint: string;
    constraints: string;
    identifierRenameMessage: Array<string | Wrapped<"fromIdentifier" | "toIdentifier" | "lineBreak">>;
  };
  nodes: {
    view: string;
    edit: string;
    output: string;
    encapsulated: string;
    doubleClickToName: string;
    addInformationRequirementEdge: string;
    addKnowledgeRequirementEdge: string;
    addAuthorityRequirementEdge: string;
    addAssociationEdge: string;
    addDecisionNode: string;
    addBkmNode: string;
    addKnowledgeResourceNode: string;
    addTextAnnotationNode: string;
    emptyDiagram: string;
    currentDmnAssociatedDiagram: string;
    autoGenerateDiagram: string;
    automaticallyPlaceNodes: string;
    dmnDiagramEmpty: string;
    diagramHasNodesOrOpenAnotherFile: string;
    startByDraggingNodes: string;
    newDecisionTable: string;
    newDecisionWithInputData: string;
    overlays: string;
    propertiesPanel: string;
    nodesSelected: (selectedNodesCount: number) => string;
    edgesSelected: (selectedEdgesCount: number) => string;
    nodeSelected: (nodeCount: number) => string;
    edgeSelected: (edgeCount: number) => string;
    nodes: (nodeCount: number) => string;
    edges: (edgeCount: number) => string;
    selected: string;
    dmnversion: (latestVersion: string) => string;
    originallyImportedDmn: (version: string, latestVersion: string) => string;
    drds: string;
    newDrd: string;
    versionUpgraded: string;
    newInDmn: (latestVersion: string) => string;
    defaultDrd: string;
    addingNodesMakingChanges: string;
    removeDrd: string;
    remove: string;
    inputDataNodeShape: string;
    classic: string;
    alternative: string;
    noDrgNodes: string;
    usePaletteLeftHandSide: string;
    drgNodes: string;
    selectEditDrd: string;
    inputData: string;
    decision: string;
    businessKnowledgeModel: string;
    knowledgeSource: string;
    decisionService: string;
    group: string;
    textAnnotation: string;
    externalNodes: string;
    drgnodes: string;
    unknown: string;
    empty: string;
    input: string;
  };
  evaluationHightlights: string;
  on: string;
  off: string;
  externalNodes: {
    decision: string;
    inputData: string;
    unknown: string;
    externalModelTooltip: (nodeTypeTooltipDescription: string, namespace: string) => string;
    noExternalNodesAvailable: string;
    IncludedModelsHaveNoExportedNodes: string;
    includedModels: string;
    externalNodesTitle: string;
  };
  includedModels: {
    errorOccuredParsing: (selectedPathRelativeToThisDmn: string) => string;
    includeModel: string;
    cancel: string;
    model: string;
    selectModelToInclude: string;
    allModelsAvailablewithName: (contextName: string) => string;
    noAvailableModelswithName: (contextName: string) => string;
    allModelsAvailable: string;
    noAvailableModels: string;
    loading: string;
    noExternalModelsIncluded: string;
    externalModelsEmptyMessage: string;
    actionHaveMajorImpact: string;
    removeIncludedModel: (extension: string) => string;
    removeDmnMessage: string;
    removePmmlMessage: string;
    remove: string;
    default: string;
    externalModelNotFound: string;
    namespace: string;
    uri: string;
  };
  overlaysPanel: {
    snapping: string;
    horizontal: string;
    vertical: string;
    highlightSelectedNode: string;
    showDataTypeToolbar: string;
    enableStyles: string;
    enableEvaluationHighlights: string;
    enableHighlightingDecisionTable: string;
  };
  propertiesPanel: {
    inputExpression: string;
    constraint: string;
    inputValues: string;
    id: string;
    alternativeFieldName: (name: string) => string;
    alternativeFieldType: (name: string) => string;
    defaultOutputEntry: string;
    outputValues: string;
    outputHeaderType: string;
    hitPolicy: string;
    aggregation: string;
    outputLabel: string;
    outputLabelPlaceholder: string;
    emptyParameters: string;
    parameter: Array<string | Wrapped<"name">>;
    boxedConditional: string;
    functionToBeCalled: string;
    functionNamePlaceholder: string;
    variableToIterateOver: string;
    variableNamePlaceholder: string;
    selectExpression: string;
    selectedCell: string;
    noPropertiesToDisplay: string;
    dataType: string;
    description: string;
    descriptionPlaceholder: string;
    question: string;
    questionPlaceholder: string;
    allowedAnswers: string;
    allowedAnswersPlaceholder: string;
    outputDecisions: string;
    encapsulatedDecisions: string;
    inputDecisions: string;
    inputData: string;
    empty: string;
    invokingDecisionService: string;
    placeholderUrlTitle: string;
    placeholderUrl: string;
    addDocumentationLink: string;
    emptyUrl: string;
    removeDocumentationLink: string;
    expandCollapseDocLink: string;
    content: string;
    contentPlaceholder: string;
    expressionLanguage: string;
    expressionLanguagePlaceholder: string;
    expressionContentPlaceholder: string;
    font: string;
    resetFont: string;
    globalProperties: string;
    idAndNamespace: string;
    regenerateIdNamespace: string;
    diagramIdPlaceholder: string;
    copy: string;
    copied: string;
    namespace: string;
    namespacePlaceholder: string;
    yesRegenerateIdNamespace: string;
    regeneratingIdNamespaceMessage: string;
    sureToContinue: string;
    namePlaceholder: string;
    sourceType: string;
    sourceTypePlaceHolder: string;
    locationUri: string;
    locationUriPlaceholder: string;
    multiplenodesSize: (size: number) => string;
    expandCollapseTitle: (title: string) => string;
    shape: string;
    resetShape: string;
    style: string;
    fillColor: string;
    strokeColor: string;
    width: string;
    valuePlaceholder: string;
    height: string;
    position: string;
    xValuePlaceholder: string;
    yValuePlaceHolder: string;
    format: string;
    formatPlaceholder: string;
    text: string;
    textPlaceholder: string;
    nodeReferenceMessage: string;
    externalDmnNodeReference: string;
    nameNotExists: (name: string) => string;
    goToName: (name: string) => string;
    reference: string;
    unknownNodePlaceholder: string;
    expressionLangPlaceholder: string;
  };
  boxedExpressionPropertiesPanelTitle: {
    boxedConditional: string;
    boxedContext: string;
    boxedContextVariable: string;
    decisionTable: string;
    variable: string;
    decisionTableInputHeader: string;
    decisionTableInputCell: string;
    decisionTableOutputHeader: string;
    decisionTableOutputCell: string;
    every: string;
    boxedEveryVariable: string;
    filter: string;
    for: string;
    boxedForvariable: string;
    functionDefinition: string;
    functionParameters: string;
    boxedInvocation: string;
    boxedInvocationFunction: string;
    boxedInvocationParameter: string;
    list: string;
    literalExpresssion: string;
    boxedRelation: string;
    boxedRelationHeader: string;
    boxedRelationCell: string;
    some: string;
    boxedSomeVariable: string;
  };
  renamingIdentifier: string;
  renameAndReplace: string;
  justRename: string;
  theIdentifier: string;
  renamedTo: string;
  undefined: string;
  usedByOneOrMoreExpressions: string;
  automaticallyReplaceAll: string;
  dmnEditor: {
    editor: string;
    dataTypes: string;
    includedModels: string;
    unexpectedErrorOccured: string;
    reportBug: string;
    tryUndoingLastAction: string;
    fileAnIssue: string;
  };
}

export interface DmnEditorI18n extends DmnEditorDictionary, CommonI18n {}
