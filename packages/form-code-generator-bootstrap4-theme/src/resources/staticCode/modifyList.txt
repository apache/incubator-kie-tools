function delListItem(name, minCount, itemIndex, onDelListItem) {
  const formData = getFormData();
  const value = accessObjectPath(formData, name) ?? [];

  if ((minCount ?? 0) <= value.length) {
    document.getElementById(`item-${name}.${itemIndex}`).remove();
  }
  
  // Re-organize list
  Array.from(
    document.getElementById(name).childNodes ?? []
  ).filter(node => node.nodeType === 1).forEach((element, index) => {
    const delElement = element.getElementById(`remove-item-${name}`);
    delElement.onclick = function () { onDelListItem(name, `${index}`) };
    delElement.onkeydown = function () { onDelListItem(name, `${index}`) };

    const inputOrSelect = element.querySelector("input, select")
    inputOrSelect.id = `${name}.${index}`;
    inputOrSelect.name = `${name}.${index}`;

    element.id = `${name}.${index}`;
    element.name = `${name}.${index}`;
  });
}

function addListItem(name, defaultValue, maxCount, childrenHtml, functionName) {
  const formData = getFormData();
  let value = accessObjectPath(formData, name) ?? [];
  const itemIndex = value.length;

  if (maxCount !== undefined && (maxCount > value.length)) {
    value = value.concat([defaultValue]);
  } else {
    value = value.concat([defaultValue]);
  }

  const listContainer = document.getElementById(name);

  const newItem = document.createElement("div");
  newItem.class = "row"
  newItem.id = `item-${name}.${itemIndex}`
  newItem.innerHTML = `
  <div class="col-1">
    <span id="remove-item-${name}" name="Remove Item" class="badge badge-pill" role="button" tabindex="0" onclick="onDelListItem${functionName}('${name}', ${itemIndex})" onkeydown="onDelListItem${functionName}('${name}', ${itemIndex})">
      <i className="octicon octicon-dash"><span>-</span></i>
    </span>
  </div>
  <div class="col-11">
    ${childrenHtml}
  </div>
  `

  listContainer.appendChild(newItem);
  const newItemElement = document.getElementById(newItem.id);
  [...newItemElement.querySelectorAll('input[id*="$"], select[id*="$"]')].forEach((el) => {
    if (el.id.split(".").pop() !== "$") {
      el.id = `${name}.${itemIndex}.${el.id.split(".").pop()}`;
      el.name = `${name}.${itemIndex}.${el.id.split(".").pop()}`;
    } else {
      el.id = `${name}.${itemIndex}`;
      el.name = `${name}.${itemIndex}`;
    }
  });

  const nestedListContainer = newItemElement.querySelector("div[role='list']");
  if (nestedListContainer) {
    const nestedListPathWithIndex = splitLastOccurrence(nestedListContainer.id, "$")?.[1]?.replace("$", `${itemIndex}`);
    nestedListContainer.id = nestedListPathWithIndex ? `${name}.${nestedListPathWithIndex}` : name;
    
    // Add Item
    const addItem = newItemElement.querySelector('[id^=add-item]');
    const addItemPathWithIndex = splitLastOccurrence(addItem.id, "$")?.[1]?.replace("$", `${itemIndex}`);
    addItem.id = addItemPathWithIndex ? `add-item-${name}.${addItemPathWithIndex}` : `add-item-${name}`;
    const addItemOnClick = addItem.getAttribute('onclick');
    if (addItemOnClick) {
      addItem.setAttribute('onclick', getFunctionName(addItemOnClick, itemIndex));
    }
    const addItemOnKeydown = addItem.getAttribute('onkeydown');
    if (addItemOnKeydown) {
      addItem.setAttribute('onkeydown', getFunctionName(addItemOnKeydown, itemIndex));
    }

    // Remove Item
    const removeItem = newItemElement.querySelector('[id^=remove-item]');
    const removeItemPathWithIndex = splitLastOccurrence(addItem.id, "$")?.[1]?.replace("$", `${itemIndex}`);
    removeItem.id = removeItemPathWithIndex ? `remove-item-${name}.${removeItemPathWithIndex}` : `remove-item-${name}`;
    const removeItemOnClick = removeItem.getAttribute('onclick');
    if (removeItemOnClick) {
      removeItem.setAttribute('onclick', getFunctionName(removeItemOnClick, itemIndex));
    }
    const removeItemOnKeydown = removeItem.getAttribute('onkeydown');
    if (removeItemOnKeydown) {
      removeItem.setAttribute('onkeydown', getFunctionName(removeItemOnKeydown, itemIndex));
    }
  }
}
function getFunctionName(functionCall, itemIndex) {
  const [call, argument, end] = functionCall.split('\'');
  const [argumentName, argumentNameToReplace] = splitLastOccurrence(argument, "$");
  return `${call}'${argumentName}${argumentNameToReplace?.replace("$", `${itemIndex}`) ?? ""}'${end}`
}
function splitLastOccurrence(str, char) {
    const lastIndex = str.lastIndexOf(char);
    if (lastIndex === -1) {
      return [str]
    }
    return [str.substring(0, lastIndex), str.substring(lastIndex)];
}
function recursiveGetObjectListValues(objectElement) {
  const nested = objectElement.querySelector(
    "div[role='group'], div[role='list']"
  );
  let results = {};
  const inputValues = Array.from(objectElement.childNodes)
    .filter((child) => child.nodeType === Node.ELEMENT_NODE)
    .reduce((acc, potentialFormGroups) => {
      if (!potentialFormGroups.matches(".form-group")) {
        return acc;
      }
      const inputOrSelectElement =
        potentialFormGroups.querySelector("input, select");
        if (inputOrSelectElement) {
          acc[inputOrSelectElement.id.split(".").pop()] =
            getListValues(inputOrSelectElement);
        }
      return acc;
    }, {});

  if (nested && nested.matches('[role="group"]')) {
    results = { ...results, ...recursiveGetObjectListValues(nested) };
  }
  if (nested && nested.matches('[role="list"]')) {
    results[nested.id.split(".").pop()] = recursiveGetArrayListValues(nested);
  }
  return { ...inputValues, ...results };
}

function recursiveGetArrayListValues(arrayElement) {
  return Array.from(arrayElement.childNodes)
    .filter((child) => child.nodeType === Node.ELEMENT_NODE)
    .map((childElement) => {
      const nestedGroup = childElement.querySelector("div[role='group']");
      if (nestedGroup) {
        return recursiveGetObjectListValues(nestedGroup);
      }
      const nestedList = childElement.querySelector("div[role='list']");
      if (nestedList) {
        const nestedListChilds = [...nestedList.childNodes]
          .filter((child) => child.nodeType === Node.ELEMENT_NODE)
          .filter((el) => el.matches('[role="list"]')
        );
        return Array.from(nestedListChilds).map((list) =>
          recursiveGetArrayListValues(list)
        );
      }
      return getListValues(childElement.querySelector("input, select"));
    });
}

function getListValues(inputOrSelectElement) {
  if (!inputOrSelectElement) {
    return null;
  }

  if (inputOrSelectElement.tagName === "INPUT") {
    if (
      inputOrSelectElement.type === "text" ||
      inputOrSelectElement.type === "number"
    ) {
      return inputOrSelectElement.value;
    }
    if (inputOrSelectElement.type === "checkbox") {
      return inputOrSelectElement.checked
        ? inputOrSelectElement.value || true
        : false;
    }
    if (inputOrSelectElement.type === "radio") {
      return inputOrSelectElement.checked ? inputOrSelectElement.value : null;
    }
  } else if (inputOrSelectElement.tagName === "SELECT") {
    if (inputOrSelectElement.multiple) {
      return Array.from(inputOrSelectElement.selectedOptions).map(
        (opt) => opt.value
      );
    }
    return inputOrSelectElement.value;
  }
  return null;
}
function recursiveGetListValues(element) {
  const group = element.querySelector("div[role='group']");
  if (group) {
    return recursiveGetObjectListValues(group);
  }
  const list = element.querySelector("div[role='list']");
  if (list) {
    return recursiveGetArrayListValues(list);
  }
  return getListValues(element);
}
function accessObjectPath(obj, objPath) {
  return objPath.split(".").reduce((acc, pathPiece) => acc[pathPiece], obj);
}