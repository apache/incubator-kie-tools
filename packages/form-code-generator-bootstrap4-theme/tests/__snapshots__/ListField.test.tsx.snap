// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ListField> tests <ListField> - full AutoForm rendering (TO DELETE) 1`] = `
<div>
  &lt;div&gt;
	&lt;div class=&quot;form-group&quot;&gt;
		&lt;div class=&quot;card mb-3&quot;&gt;
			&lt;div class=&quot;card-body&quot;&gt;
				&lt;div class=&quot;card-title&quot;&gt;
					&lt;label class=&quot;col-form-label&quot;&gt;Friends&lt;/label&gt;
					&lt;div
						id=&quot;add-item-friends&quot;
						name=&quot;Add Item&quot;
						class=&quot;badge badge-pill float-right&quot;
						role=&quot;button&quot;
						tabindex=&quot;0&quot;
						onclick=&quot;onAddListItemFriends(&#39;friends&#39;)&quot;
						onkeydown=&quot;onAddListItemFriends(&#39;friends&#39;)&quot;
					&gt;
						&lt;i className=&quot;octicon octicon-plus&quot;&gt;&lt;span&gt;+&lt;/span&gt;&lt;/i&gt;
					&lt;/div&gt;
				&lt;/div&gt;
				&lt;div role=&quot;list&quot; id=&quot;friends&quot;&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	&lt;script&gt;
		function delListItem(value, name, minCount, itemIndex, onDelListItem) {
			if ((minCount ?? 0) &lt;= value.length) {
				document.getElementById(\`\${name}.\${itemIndex}\`).remove();
			}
			// Re-organize list
			Array.from(document.getElementById(name).childNodes ?? [])
				.filter((node) =&gt; node.nodeType === 1)
				.forEach((element, index) =&gt; {
					const delElement = element.querySelector(\`span[name=&#39;Remove Item&#39;]\`);
					delElement.onclick = function () {
						onDelListItem(name, \`\${index}\`);
					};
					delElement.onkeydown = function () {
						onDelListItem(name, \`\${index}\`);
					};
					const inputOrSelect = element.querySelector(&quot;input, select&quot;);
					inputOrSelect.id = \`\${name}.\${index}\`;
					inputOrSelect.name = \`\${name}.\${index}\`;
					element.id = \`\${name}.\${index}\`;
					element.name = \`\${name}.\${index}\`;
				});
		}
		function addListItem(value, name, defaultValue, maxCount, childrenHtml, functionName) {
			const itemIndex = value.length;
			if (maxCount !== undefined &amp;&amp; maxCount &gt; value.length) {
				value = value.concat([defaultValue]);
			} else {
				value = value.concat([defaultValue]);
			}
			const listContainer = document.getElementById(name);
			const newItem = document.createElement(&quot;div&quot;);
			newItem.class = &quot;row&quot;;
			newItem.id = name + &quot;.&quot; + itemIndex;
			newItem.innerHTML = \`
  &lt;div class=&quot;col-1&quot;&gt;
    &lt;span id=&quot;remove-item-\${name}&quot; name=&quot;Remove Item&quot; class=&quot;badge badge-pill&quot; role=&quot;button&quot; tabindex=&quot;0&quot; onclick=&quot;onDelListItem\${functionName}(&#39;\${name}&#39;, \${itemIndex})&quot; onkeydown=&quot;onDelListItem\${functionName}(&#39;\${name}&#39;, \${itemIndex})&quot;&gt;
      &lt;i className=&quot;octicon octicon-dash&quot;&gt;&lt;span&gt;-&lt;/span&gt;&lt;/i&gt;
    &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-11&quot;&gt;
    \${childrenHtml}
  &lt;/div&gt;
  \`;
			listContainer.appendChild(newItem);
			const newItemElement = document.getElementById(newItem.id);
			[...newItemElement.querySelectorAll(&#39;input[id*=&quot;$&quot;], select[id*=&quot;$&quot;]&#39;)].forEach((el) =&gt; {
				if (el.id.split(&quot;.&quot;).pop() !== &quot;$&quot;) {
					el.id = \`\${name}.\${itemIndex}.\${el.id.split(&quot;.&quot;).pop()}\`;
					el.name = \`\${name}.\${itemIndex}.\${el.id.split(&quot;.&quot;).pop()}\`;
				} else {
					el.id = \`\${name}.\${itemIndex}\`;
					el.name = \`\${name}.\${itemIndex}\`;
				}
			});
			const nestedListContainer = newItemElement.querySelector(&quot;div[role=&#39;list&#39;]&quot;);
			if (nestedListContainer) {
				nestedListContainer.id = nestedListContainer.id.replace(\`\${name}.$\`, \`\${name}.\${itemIndex}\`);
				const addItem = newItemElement.querySelector(&quot;[id^=add-item]&quot;);
				addItem.id = addItem.id.replace(\`\${name}.$\`, \`\${name}.\${itemIndex}\`);
				const addItemOnClick = addItem.getAttribute(&quot;onclick&quot;);
				if (addItemOnClick) {
					addItem.setAttribute(&quot;onclick&quot;, addItemOnClick.replace(\`\${name}.$\`, \`\${name}.\${itemIndex}\`));
				}
				const addItemOnKeydown = addItem.getAttribute(&quot;onkeydown&quot;);
				if (addItemOnKeydown) {
					addItem.setAttribute(&quot;onkeydown&quot;, addItemOnKeydown.replace(\`\${name}.$\`, \`\${name}.\${itemIndex}\`));
				}
				const removeItem = newItemElement.querySelector(&quot;[id^=remove-item]&quot;);
				removeItem.id = removeItem.id.replace(\`\${name}.$\`, \`\${name}.\${itemIndex}\`);
				const removeItemOnClick = removeItem.getAttribute(&quot;onclick&quot;);
				if (removeItemOnClick) {
					removeItem.setAttribute(&quot;onclick&quot;, removeItemOnClick.replace(\`\${name}.$\`, \`\${name}.\${itemIndex}\`));
				}
				const removeItemOnKeydown = removeItem.getAttribute(&quot;onkeydown&quot;);
				if (removeItemOnKeydown) {
					removeItem.setAttribute(&quot;onkeydown&quot;, removeItemOnKeydown.replace(\`\${name}.$\`, \`\${name}.\${itemIndex}\`));
				}
			}
		}
		function recursiveGetObjectListValues(objectElement) {
			const nested = objectElement.querySelector(&quot;div[role=&#39;group&#39;], div[role=&#39;list&#39;]&quot;);
			let results = {};
			const inputValues = Array.from(objectElement.childNodes)
				.filter((child) =&gt; child.nodeType === Node.ELEMENT_NODE)
				.reduce((acc, potentialFormGroups) =&gt; {
					if (!potentialFormGroups.matches(&quot;.form-group&quot;)) {
						return acc;
					}
					const inputOrSelectElement = potentialFormGroups.querySelector(&quot;input, select&quot;);
					if (inputOrSelectElement) {
						acc[inputOrSelectElement.id.split(&quot;.&quot;).pop()] = getListValues(inputOrSelectElement);
					}
					return acc;
				}, {});
			if (nested &amp;&amp; nested.matches(&#39;[role=&quot;group&quot;]&#39;)) {
				results = { ...results, ...recursiveGetObjectListValues(nested) };
			}
			if (nested &amp;&amp; nested.matches(&#39;[role=&quot;list&quot;]&#39;)) {
				results[nested.id.split(&quot;.&quot;).pop()] = recursiveGetArrayListValues(nested);
			}
			return { ...inputValues, ...results };
		}
		function recursiveGetArrayListValues(arrayElement) {
			return Array.from(arrayElement.childNodes)
				.filter((child) =&gt; child.nodeType === Node.ELEMENT_NODE)
				.map((childElement) =&gt; {
					const nestedGroup = childElement.querySelector(&quot;div[role=&#39;group&#39;]&quot;);
					if (nestedGroup) {
						return recursiveGetObjectListValues(nestedGroup);
					}
					const nestedList = childElement.querySelector(&quot;div[role=&#39;list&#39;]&quot;);
					if (nestedList) {
						const nestedListChilds = [...nestedList.childNodes]
							.filter((child) =&gt; child.nodeType === Node.ELEMENT_NODE)
							.filter((el) =&gt; el.matches(&#39;[role=&quot;list&quot;]&#39;));
						return Array.from(nestedListChilds).map((list) =&gt; recursiveGetArrayListValues(list));
					}
					return getListValues(childElement.querySelector(&quot;input, select&quot;));
				});
		}
		function getListValues(inputOrSelectElement) {
			if (!inputOrSelectElement) {
				return null;
			}
			if (inputOrSelectElement.tagName === &quot;INPUT&quot;) {
				if (inputOrSelectElement.type === &quot;text&quot; || inputOrSelectElement.type === &quot;number&quot;) {
					return inputOrSelectElement.value;
				}
				if (inputOrSelectElement.type === &quot;checkbox&quot;) {
					return inputOrSelectElement.checked ? inputOrSelectElement.value || true : false;
				}
				if (inputOrSelectElement.type === &quot;radio&quot;) {
					return inputOrSelectElement.checked ? inputOrSelectElement.value : null;
				}
			} else if (inputOrSelectElement.tagName === &quot;SELECT&quot;) {
				if (inputOrSelectElement.multiple) {
					return Array.from(inputOrSelectElement.selectedOptions).map((opt) =&gt; opt.value);
				}
				return inputOrSelectElement.value;
			}
			return null;
		}
		function recursiveGetListValues(element) {
			const group = element.querySelector(&quot;div[role=&#39;group&#39;]&quot;);
			if (group) {
				return recursiveGetObjectListValues(group);
			}
			const list = element.querySelector(&quot;div[role=&#39;list&#39;]&quot;);
			if (list) {
				return recursiveGetArrayListValues(list);
			}
			return getListValues(element);
		}
		function accessObjectPath(obj, objPath) {
			return objPath.split(&quot;.&quot;).reduce((acc, pathPiece) =&gt; acc[pathPiece], obj);
		}
		function onDelListItemFriends(name, itemIndex) {
			const formData = getFormData();
			const value = accessObjectPath(formData, name) ?? [];
			const disabled = false;
			if (!disabled) {
				delListItem(value, name, undefined, itemIndex, onDelListItemFriends);
			}
		}
		function onAddListItemFriends(name) {
			const formData = getFormData();
			const value = accessObjectPath(formData, name) ?? [];
			const disabled = false;
			if (!disabled) {
				addListItem(
					value,
					name,
					undefined,
					undefined,
					\`&lt;div class=&quot;form-group&quot;&gt;
    &lt;div class=&quot;card mb-3&quot;&gt;
    &lt;div class=&quot;card-body&quot;&gt;
        &lt;div class=&quot;card-title&quot;&gt;
            &lt;label class=&quot;col-form-label&quot;&gt;Friends&lt;/label&gt;
            &lt;div id=&quot;add-item-friends.$&quot; name=&quot;Add Item&quot; class=&quot;badge badge-pill float-right&quot; role=&quot;button&quot; tabindex=&quot;0&quot; 
                onclick=&quot;onAddListItemFriends$(&#39;friends.$&#39;)&quot;
                onkeydown=&quot;onAddListItemFriends$(&#39;friends.$&#39;)&quot;&gt;
                &lt;i className=&quot;octicon octicon-plus&quot;&gt;&lt;span&gt;+&lt;/span&gt;&lt;/i&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div role=&quot;list&quot; id=&quot;friends.$&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;\`,
					&quot;Friends&quot;
				);
			}
		}
		function onDelListItemFriends$(name, itemIndex) {
			const formData = getFormData();
			const value = accessObjectPath(formData, name) ?? [];
			const disabled = false;
			if (!disabled) {
				delListItem(value, name, undefined, itemIndex, onDelListItemFriends$);
			}
		}
		function onAddListItemFriends$(name) {
			const formData = getFormData();
			const value = accessObjectPath(formData, name) ?? [];
			const disabled = false;
			if (!disabled) {
				addListItem(
					value,
					name,
					undefined,
					undefined,
					\`&lt;div class=&quot;form-group&quot;&gt;
    &lt;label for=&quot;item-friends.$.$&quot;&gt;Friends&lt;/label&gt;
    &lt;input
    type=&quot;number&quot;
    class=&quot;form-control&quot;
    id=&quot;friends.$.$&quot;
    name=&quot;friends.$.$&quot;
    step=&quot;0.01&quot;
    value=&quot;&quot;/&gt;
&lt;/div&gt;\`,
					&quot;Friends$&quot;
				);
			}
		}
		/* Utility function that fills the form with the data received from the kogito runtime */
		function setFormData(data) {
			if (!data) {
				return;
			}
			data?.friends?.forEach((value, itemIndex) =&gt; {
				const currentItem = \`friends.\${itemIndex}\`;
				value?.forEach((value, itemIndex) =&gt; {
					const currentItem = \`\${currentItem}.\${itemIndex}\`;
					document.getElementById(\`\${currentItem}\`).value = value ?? &quot;&quot;;
				});
			});
		}
		/* Utility function to generate the expected form output as a json object */
		function getFormData() {
			const formData = {};
			formData.friends = Array.from(document.getElementById(&quot;friends&quot;).childNodes).reduce((values, element) =&gt; {
				return [...values, recursiveGetListValues(element)];
			}, []);
			return formData;
		}
		/* Utility function to validate the form on the &#39;beforeSubmit&#39; Lifecycle Hook */
		function validateForm() {}
		/*
            Call to the Kogito console form engine. It will establish the connection with the console embeding the form
            and return an instance of FormAPI that will allow hook custom code into the form lifecycle.
            The \`window.Form.openForm\` call expects an object with the following entries:
                - onOpen: Callback that will be called after the connection with the console is established. The callback
                will receive the following arguments:
                    - data: the data to be bound into the form
                    - ctx: info about the context where the form is being displayed. This will contain information such as the form JSON Schema, process/task, user...
        */
		const formApi = window.Form.openForm({
			onOpen: (data, context) =&gt; {
				setFormData(data);
			},
		});
		/*
            Form Lifecycle Hook that will be executed before the form is submitted.
            Throwing an error will stop the form submit. Usually should be used to validate the form.
        */
		formApi.beforeSubmit = () =&gt; {
			validateForm();
		};
		/*
            Form Lifecycle Hook that will be executed after the form is submitted.
            It will receive a response object containing the \`type\` flag indicating if the submit has been successful and \`info\` with extra information about the submit result.
        */
		formApi.afterSubmit = (response) =&gt; {};
		/* Generates the expected form output object to be posted */
		formApi.getFormData = () =&gt; getFormData();
	&lt;/script&gt;
&lt;/div&gt;

</div>
`;
