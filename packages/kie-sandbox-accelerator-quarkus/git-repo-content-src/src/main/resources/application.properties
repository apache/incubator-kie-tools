# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

###############
# Persistence #
###############


# Tells the Kogito runtime what kind of persistence is configured.
kogito.persistence.type=jdbc

# Apache KIE provides a separate Flyway subsystem that allows Kogito's internal tables to be created and migrated
# without interfering with your application's Flyway, if you're using it.
#
# This property enables/disables running this isolated Flyway mechanism automatically when the application starts.
# If you want more control over when/how/who executes changes to your database, disable it and run the SQL scripts manually.
%prod.kie.flyway.enabled=false

%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=kogito-user
%prod.quarkus.datasource.password=kogito-pass
%prod.quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://0.0.0.0:5432/kogito}
%prod.quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL:postgresql://0.0.0.0:5432/kogito}

# Dev
%dev.kie.flyway.enabled=true
%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.username=kogito
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:default;NON_KEYWORDS=VALUE,KEY




############
# Security #
############

%prod.kogito.auth.enabled=true
%prod.quarkus.oidc.enabled=true
%prod.quarkus.oidc.discovery-enabled=true
%prod.quarkus.oidc.auth-server-url=<TODO>
%prod.quarkus.oidc.client-id=<TODO>
%prod.quarkus.oidc.credentials.secret=<TODO>

%prod.quarkus.oidc.application-type=service
%prod.quarkus.http.auth.permission.authenticated.paths=/*
%prod.quarkus.http.auth.permission.authenticated.policy=authenticated
%prod.quarkus.http.auth.permission.public.paths=/q/*,/docs/openapi.json
%prod.quarkus.http.auth.permission.public.policy=permit

%prod.quarkus.http.cors=false
%prod.quarkus.http.cors.origins=<TODO>

# Dev
%dev.kogito.auth.enabled=false
%dev.quarkus.oidc.enabled=false
%dev.quarkus.http.cors=true
%dev.quarkus.http.cors.origins=*




############
# Services #
############

# These properties are residual from Distributed Architecture, where Data-Index, Data-Audit,
# and Jobs Service are external to the Kogito Runtime application.
#
# They are still necessary, but won't be anymore in future releases.

kogito.service.url=http://0.0.0.0:8080
kogito.jobs-service.url=http://0.0.0.0:8080
kogito.data-index.url=http://0.0.0.0:8080




####################
# Containerization #
####################

# Profile to pack the application into a container image.
# To use it run a Maven build with the `container` profile (-Pcontainer)

%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=${project.version}
%container.quarkus.container-image.name=<TODO>




#############
# Misc. dev #
#############

%dev.quarkus.smallrye-openapi.path=/docs/openapi.json
%dev.quarkus.http.test-port=0
%dev.quarkus.dev-ui.cors.enabled=false
%dev.quarkus.swagger-ui.always-include=true
%dev.quarkus.kogito.data-index.graphql.ui.always-include=true