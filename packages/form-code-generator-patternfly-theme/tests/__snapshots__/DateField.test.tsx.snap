// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DateField> tests <DateField> - rendering - disabled 1`] = `
"<FormGroup
      fieldId={'id'}
      label={'Birthday'}
      isRequired={true}
    >
      <Flex
    direction={{ default: 'column' }}
    id={'id'}
  >
    <FlexItem>
      <InputGroup style={{ background: 'transparent' }}>
        <DatePicker
          id={'date-picker-id'}
          isDisabled={true}
          name={'birthday'}
          onChange={newDate => {
        set__birthday(prev => {
          if (newDate) {
            const newDate = new Date(newDate);
            const time = parseTime(prev);
            if (time !== '') {
                newDate.setHours(parseInt(time && time.split(':')[0]));
                newDate.setMinutes(parseInt(time && time.split(':')[1].split(' ')[0]));
            }
            return newDate.toISOString();
          }
          return prev;
        })
      }
      }
          value={parseDate(birthday)}
        />
        <TimePicker
          id={'time-picker-id'}
          isDisabled={true}
          name={'birthday'}
          onChange={(time, hours?, minutes?) => {
      set__birthday(prev => {
        if (prev) {
          const newDate = new Date(Date.parse(prev));
          if (hours && minutes) {
            newDate.setHours(hours);
            newDate.setMinutes(minutes);
          } else if (time !== '') {
            const localeHours = parseInt(time && time.split(':')[0]);
            const localeMinutes = parseInt(time && time.split(':')[1].split(' ')[0]);
            if (!isNaN(localeHours) && !isNaN(localeMinutes)) {
                newDate.setHours(localeHours);
                newDate.setMinutes(localeMinutes);
            }
          }
          return newDate.toISOString();
        }
        return prev;
      })
    }
    }
          style={{ width: '120px' }}
          time={parseTime(birthday)}
        />
      </InputGroup>
    </FlexItem>
  </Flex>
    </FormGroup>"
`;

exports[`<DateField> tests <DateField> - rendering 1`] = `
"<FormGroup
      fieldId={'id'}
      label={'Birthday'}
      isRequired={true}
    >
      <Flex
    direction={{ default: 'column' }}
    id={'id'}
  >
    <FlexItem>
      <InputGroup style={{ background: 'transparent' }}>
        <DatePicker
          id={'date-picker-id'}
          isDisabled={false}
          name={'birthday'}
          onChange={newDate => {
        set__birthday(prev => {
          if (newDate) {
            const newDate = new Date(newDate);
            const time = parseTime(prev);
            if (time !== '') {
                newDate.setHours(parseInt(time && time.split(':')[0]));
                newDate.setMinutes(parseInt(time && time.split(':')[1].split(' ')[0]));
            }
            return newDate.toISOString();
          }
          return prev;
        })
      }
      }
          value={parseDate(birthday)}
        />
        <TimePicker
          id={'time-picker-id'}
          isDisabled={false}
          name={'birthday'}
          onChange={(time, hours?, minutes?) => {
      set__birthday(prev => {
        if (prev) {
          const newDate = new Date(Date.parse(prev));
          if (hours && minutes) {
            newDate.setHours(hours);
            newDate.setMinutes(minutes);
          } else if (time !== '') {
            const localeHours = parseInt(time && time.split(':')[0]);
            const localeMinutes = parseInt(time && time.split(':')[1].split(' ')[0]);
            if (!isNaN(localeHours) && !isNaN(localeMinutes)) {
                newDate.setHours(localeHours);
                newDate.setMinutes(localeMinutes);
            }
          }
          return newDate.toISOString();
        }
        return prev;
      })
    }
    }
          style={{ width: '120px' }}
          time={parseTime(birthday)}
        />
      </InputGroup>
    </FlexItem>
  </Flex>
    </FormGroup>"
`;
