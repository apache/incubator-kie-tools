// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ListField> tests <ListField> 1`] = `
"<div>
      <Split hasGutter>
        <SplitItem>
          {'Friends' && (
            <label className={"pf-c-form__label"}>
              <span className={"pf-c-form__label-text"}>
                Friends
              </span>
            </label>
          )}
        </SplitItem>
        <SplitItem isFilled />
        <SplitItem>
          <Button
            name='$'
            variant='plain'
            style={{ paddingLeft: '0', paddingRight: '0' }}
            disabled={false}
            onClick={() => {
              !false && 
    set__friends((friends ?? []).concat([{}]));
            }}
          >
            <PlusCircleIcon color='#0088ce' />
          </Button>
        </SplitItem>
      </Split>
      <div>
        {friends?.map((_, itemIndex) =>
          (<div
            key={itemIndex}
            style={{
              marginBottom: '1rem',
              display: 'flex',
              justifyContent: 'space-between',
            }}
          >
            <div style={{ width: '100%', marginRight: '10px' }}><Card>
          <CardBody className="pf-c-form">
          
          <FormGroup
      fieldId={'uniforms-0000-0003'}
      label={'Name'}
      isRequired={true}
    >
      <TextInput
        name={\`friends.\${itemIndex}.name\`}
        id={'uniforms-0000-0003'}
        isDisabled={false}
        placeholder={''}
        type={'text'}
        value={friends?.[itemIndex].name}
        onChange={newValue => {
    set__friends(s => {
      const newState = [...s];
      newState[itemIndex].name = newValue;
      return newState;
    })
  }}
        />
    </FormGroup>
<FormGroup
      fieldId={'uniforms-0000-0005'}
      label={'Age'}
      isRequired={true}
    >
      <TextInput
      type={'number'}
      name={\`friends.\${itemIndex}.age\`}
      isDisabled={false}
      id={'uniforms-0000-0005'}
      placeholder={''}
      step={0.01}  
      value={friends?.[itemIndex].age}
      onChange={newValue => {
    set__friends(s => {
      const newState = [...s];
      newState[itemIndex].age = Number(newValue);
      return newState;
    })
  }}
    />
    </FormGroup>
<FormGroup
      fieldId={'uniforms-0000-0007'}
      label={'Country'}
      isRequired={true}
    ><Select
      id={'uniforms-0000-0007'}
      name={\`friends.\${itemIndex}.country\`}
      variant={SelectVariant.single}
      isDisabled={false}
      placeholderText={''}
      isOpen={friends__$__country__expanded[itemIndex]}
      selections={friends__$__country}
      onToggle={(isOpen) => set__friends__$__country__expanded(prev => {
          const newState = [...prev];
          newState[itemIndex] = isOpen
          return newState;
        })}
      onSelect={(event, value, isPlaceHolder) => {
          if (isPlaceHolder) {
            set__friends(prev => {
              const newState = [...prev];
              newState[itemIndex].country = "";
              return newState;
            })
            set__friends__$__country__expanded(prev => {
                const newState = [...prev];
                newState[itemIndex] = false;
                return newState;
            });
          } else {
            const parsedSelection = value.toString ? value.toString() : value as string;
            set__friends(prev => {
              const newState = [...prev];
              newState[itemIndex].country = parsedSelection || '';
              return newState;
            })
            set__friends__$__country__expanded(prev => {
              const newState = [...prev];
              newState[itemIndex] = false;
              return newState;
            });
          }
        }}
      value={friends?.[itemIndex].country}
    >
      <SelectOption key={'US'} value={'US'}>US</SelectOption>
<SelectOption key={'Brazil'} value={'Brazil'}>Brazil</SelectOption>
    </Select></FormGroup>
<FormGroup fieldId='uniforms-0000-0009'>
    <Checkbox
      isChecked={friends?.[itemIndex].married}
      isDisabled={false}
      id={'uniforms-0000-0009'}
      name={\`friends.\${itemIndex}.married\`}
      label={'Married'}
      onChange={newValue => {
    set__friends(s => {
      const newState = [...s];
      newState[itemIndex].married = newValue;
      return newState;
    })
  }}
    />
  </FormGroup>
<div>
      <Split hasGutter>
        <SplitItem>
          {'Know' && (
            <label className={"pf-c-form__label"}>
              <span className={"pf-c-form__label-text"}>
                Know
              </span>
            </label>
          )}
        </SplitItem>
        <SplitItem isFilled />
        <SplitItem>
          <Button
            name='$'
            variant='plain'
            style={{ paddingLeft: '0', paddingRight: '0' }}
            disabled={false}
            onClick={() => {
              !false && 
    set__friends((s) => {
  const newState = [...s];
  (newState[itemIndex].know) = [...(newState[itemIndex].know ?? []), {}];
  return newState;
});
            }}
          >
            <PlusCircleIcon color='#0088ce' />
          </Button>
        </SplitItem>
      </Split>
      <div>
        {friends?.[itemIndex].know?.map((_, nested__itemIndex) =>
          (<div
            key={nested__itemIndex}
            style={{
              marginBottom: '1rem',
              display: 'flex',
              justifyContent: 'space-between',
            }}
          >
            <div style={{ width: '100%', marginRight: '10px' }}><FormGroup
      fieldId={'uniforms-0000-000c'}
      label={'Know'}
      isRequired={false}
    >
      <TextInput
        name={\`friends?.[itemIndex].know.\${nested__itemIndex}\`}
        id={'uniforms-0000-000c'}
        isDisabled={false}
        placeholder={''}
        type={'text'}
        value={friends?.[itemIndex].know?.[nested__itemIndex]}
        onChange={newValue => {
    set__friends(s => {
      const newState = [...s];
      newState[itemIndex].know[nested__itemIndex] = newValue;
      return newState;
    })
  }}
        />
    </FormGroup></div>
            <div>
              <Button
                disabled={false}
                variant='plain'
                style={{ paddingLeft: '0', paddingRight: '0' }}
                onClick={() => {
                  const value = [...friends?.[itemIndex].know]
                  value.splice(nested__itemIndex, 1);
                  !false && 
  set__friends((s) => {
  const newState = [...s];
  (newState[itemIndex].know) = value;
  return newState;
});
                }}
              >
                <MinusCircleIcon color='#cc0000' />
              </Button>
            </div>
          </div>)
        )}
      </div>
    </div>
<FormGroup
      fieldId={'uniforms-0000-000e'}
      label={'Areas'}
      isRequired={true}
    ><Select
      id={'uniforms-0000-000e'}
      name={\`friends.\${itemIndex}.areas\`}
      variant={SelectVariant.typeaheadMulti}
      isDisabled={false}
      placeholderText={''}
      isOpen={friends__$__areas__expanded[itemIndex]}
      selections={friends__$__areas}
      onToggle={(isOpen) => set__friends__$__areas__expanded(prev => {
          const newState = [...prev];
          newState[itemIndex] = isOpen
          return newState;
        })}
      onSelect={(event, value, isPlaceHolder) => {
          if (isPlaceHolder) {
            set__friends(prev => {
              const newState = [...prev];
              newState[itemIndex].areas = [];
              return newState;
            })
          } else {
            const selectedValue = newSelection.toString ? newSelection.toString() : newSelection as string;
            set__friends(prev => {
              const newState = [...prev];
              if (newState[itemIndex].areas.indexOf(selectedValue) != -1) {
                const filtered = newState[itemIndex].areas.filter((s) => s !== selectedValue);
                return newState[itemIndex].areas = filtered;
              }
              newState[itemIndex].areas = [selectedValue, ...newState[itemIndex].areas];
              return newState;
            })
          }
        }}
      value={friends?.[itemIndex].areas}
    >
      <SelectOption key={'Developer'} value={'Developer'}>Developer</SelectOption>
<SelectOption key={'HR'} value={'HR'}>HR</SelectOption>
<SelectOption key={'UX'} value={'UX'}>UX</SelectOption>
    </Select></FormGroup>
<FormGroup
      fieldId={'uniforms-0000-000g'}
      label={'Birthday'}
      isRequired={true}
    >
      <Flex
    direction={{ default: 'column' }}
    id={'uniforms-0000-000g'}
  >
    <FlexItem>
      <InputGroup style={{ background: 'transparent' }}>
        <DatePicker
          id={'date-picker-uniforms-0000-000g'}
          isDisabled={false}
          name={\`friends.\${itemIndex}.birthday\`}
          onChange={newValue => {
    set__friends(s => {
      const newState = [...s];
      newState[itemIndex].birthday = onDateChange(newValue, set__friends__$__birthday,  friends__$__birthday);
      return newState;
    })
  }}
          value={parseDate(friends?.[itemIndex].birthday)}
        />
        <TimePicker
          id={'time-picker-uniforms-0000-000g'}
          isDisabled={false}
          name={\`friends.\${itemIndex}.birthday\`}
          onChange={(time, hours?, minutes?) => {
    set__friends(s => {
      const newState = [...s];
      newState[itemIndex].birthday = onTimeChange(time, set__friends__$__birthday, friends__$__birthday, hours, minutes);
      return newState;
    })
  }}
          style={{ width: '120px' }}
          time={parseTime(friends?.[itemIndex].birthday)}
        />
      </InputGroup>
    </FlexItem>
  </Flex>
    </FormGroup>
          </CardBody></Card></div>
            <div>
              <Button
                disabled={false}
                variant='plain'
                style={{ paddingLeft: '0', paddingRight: '0' }}
                onClick={() => {
                  const value = [...friends]
                  value.splice(itemIndex, 1);
                  !false && 
  set__friends(value);
                }}
              >
                <MinusCircleIcon color='#cc0000' />
              </Button>
            </div>
          </div>)
        )}
      </div>
    </div>"
`;

exports[`<ListField> tests <ListField> 2`] = `
"const [ friends, set__friends ] = useState<object[]>([]);


const [ friends__$__country__expanded, set__friends__$__country__expanded ] = useState<[]boolean>([]);


const [ friends__$__areas__expanded, set__friends__$__areas__expanded ] = useState<[]boolean>([]);
"
`;
