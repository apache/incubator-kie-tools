// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NestField> tests <NestField> - rendering 1`] = `
"<Card>
          <CardBody className="pf-c-form">
          <label><b>Candidate</b></label>
          <FormGroup
      fieldId={'uniforms-0000-0001'}
      label={'Name'}
      isRequired={true}
    >
      <TextInput
        name={'candidate.name'}
        id={'uniforms-0000-0001'}
        isDisabled={false}
        placeholder={''}
        type={'text'}
        value={candidate__name}
        onChange={set__candidate__name}
        />
    </FormGroup>
<FormGroup
      fieldId={'uniforms-0000-0003'}
      label={'Age'}
      isRequired={true}
    >
      <TextInput
      type={'number'}
      name={'candidate.age'}
      isDisabled={false}
      id={'uniforms-0000-0003'}
      placeholder={''}
      step={1}  
      value={candidate__age}
      onChange={(newValue) => set__candidate__age(Number(newValue))}
    />
    </FormGroup>
<FormGroup
      fieldId={'uniforms-0000-0005'}
      label={'Role'}
      isRequired={true}
    ><Select
      id={'uniforms-0000-0005'}
      name={'candidate.role'}
      variant={SelectVariant.single}
      isDisabled={false}
      placeholderText={''}
      isOpen={candidate__role__expanded}
      selections={candidate__role}
      onToggle={(isOpen) => set__candidate__role__expanded(isOpen)}
      onSelect={(event, value, isPlaceHolder) => {
        if (isPlaceHolder) {
          set__candidate__role('');
          set__candidate__role__expanded(false);
        } else {
          const parsedSelection = value.toString ? value.toString() : value as string;
          set__candidate__role(parsedSelection || '');
          set__candidate__role__expanded(false);
        }
      }}
      value={candidate__role}
    >
      <SelectOption key={'Developer'} value={'Developer'}>Developer</SelectOption>
<SelectOption key={'HR'} value={'HR'}>HR</SelectOption>
<SelectOption key={'UX'} value={'UX'}>UX</SelectOption>
    </Select></FormGroup>
<div>
      <Split hasGutter>
        <SplitItem>
          {'Skills' && (
            <label className={"pf-c-form__label"}>
              <span className={"pf-c-form__label-text"}>
                Skills
              </span>
            </label>
          )}
        </SplitItem>
        <SplitItem isFilled />
        <SplitItem>
          <Button
            name='$'
            variant='plain'
            style={{ paddingLeft: '0', paddingRight: '0' }}
            disabled={false}
            onClick={() => {
              !false && 
    set__candidate__skills((candidate__skills ?? []).concat([{}]));
            }}
          >
            <PlusCircleIcon color='#0088ce' />
          </Button>
        </SplitItem>
      </Split>
      <div>
        {candidate__skills?.map((_, itemIndex) =>
          (<div
            key={itemIndex}
            style={{
              marginBottom: '1rem',
              display: 'flex',
              justifyContent: 'space-between',
            }}
          >
            <div style={{ width: '100%', marginRight: '10px' }}><Card>
          <CardBody className="pf-c-form">
          
          <FormGroup
      fieldId={'uniforms-0000-000a'}
      label={'Name'}
      isRequired={true}
    >
      <TextInput
        name={\`candidate__skills.\${itemIndex}.name\`}
        id={'uniforms-0000-000a'}
        isDisabled={false}
        placeholder={''}
        type={'text'}
        value={candidate__skills?.[itemIndex].name}
        onChange={newValue => {
    set__candidate__skills(s => {
      const newState = [...s];
      newState[itemIndex].name = newValue;
      return newState;
    })
  }}
        />
    </FormGroup>
          </CardBody></Card></div>
            <div>
              <Button
                disabled={false}
                variant='plain'
                style={{ paddingLeft: '0', paddingRight: '0' }}
                onClick={() => {
                  const value = [...candidate__skills]
                  value.splice(itemIndex, 1);
                  !false && 
  set__candidate__skills(value);
                }}
              >
                <MinusCircleIcon color='#cc0000' />
              </Button>
            </div>
          </div>)
        )}
      </div>
    </div>
          </CardBody></Card>"
`;
