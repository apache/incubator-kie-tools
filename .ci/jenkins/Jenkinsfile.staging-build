/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        docker {
            image 'quay.io/kie-tools/kie-tools-ci-build:latest'
            args '--shm-size=2g --privileged --group-add docker'
            label util.avoidFaultyNodes()
        }
    }

    options {
        timeout(time: 600, unit: 'MINUTES')
    }

    parameters {
        booleanParam(description: 'Dry run', name: 'DRY_RUN', defaultValue: true)
        string(description: 'Base Ref', name: 'BASE_REF')
        string(description: 'Tag', name: 'TAG', defaultValue: '0.0.0')
        string(description: 'Commit SHA', name: 'COMMIT_SHA', defaultValue: 'main')
        string(description: 'Download asset url', name: 'DOWNLOAD_ASSET_URL', defaultValue: '')
        string(description: 'Upload asset url', name: 'UPLOAD_ASSET_URL', defaultValue: '')
    }

    environment {
        OPENSHIFT_NAMESPACE = 'kie-sandbox'
        OPENSHIFT_PART_OF = 'staging-kie-sandbox-app'

        DEV_DEPLOYMENT_BASE_IMAGE__registry = 'quay.io'
        DEV_DEPLOYMENT_BASE_IMAGE__account = 'kie-tools'
        DEV_DEPLOYMENT_BASE_IMAGE__name = 'dev-deployment-base-image'
        DEV_DEPLOYMENT_BASE_IMAGE__buildTags = "${params.TAG}-prerelease"
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__registry = 'quay.io'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__account = 'kie-tools'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__name = 'dev-deployment-dmn-form-webapp-image'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__buildTags = "${params.TAG}-prerelease"
        DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__registry = 'quay.io'
        DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__account = 'kie-tools'
        DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__name = 'dev-deployment-kogito-quarkus-blank-app-image'
        DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__buildTags = "${params.TAG}-prerelease"
        ONLINE_EDITOR__devDeploymentBaseImageRegistry = 'quay.io'
        ONLINE_EDITOR__devDeploymentBaseImageAccount = 'kie-tools'
        ONLINE_EDITOR__devDeploymentBaseImageName = 'dev-deployment-base-image'
        ONLINE_EDITOR__devDeploymentBaseImageTag = "${params.TAG}-prerelease"
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageRegistry = 'quay.io'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageAccount = 'kie-tools'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageName = 'dev-deployment-dmn-form-webapp-image'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageTag = "${params.TAG}-prerelease"

        KIE_SANDBOX__imageRegistry = 'quay.io'
        KIE_SANDBOX__imageAccount = 'kie-tools'
        KIE_SANDBOX__imageName = 'kie-sandbox-image'
        KIE_SANDBOX__imageBuildTags = "${params.TAG}-prerelease"

        KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry = 'quay.io'
        KIE_SANDBOX_EXTENDED_SERVICES__imageAccount = 'kie-tools'
        KIE_SANDBOX_EXTENDED_SERVICES__imageName = 'kie-sandbox-extended-services-image'
        KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags = "${params.TAG}-prerelease"

        CORS_PROXY_IMAGE__imageRegistry = 'quay.io'
        CORS_PROXY_IMAGE__imageAccount = 'kie-tools'
        CORS_PROXY_IMAGE__imageName = 'cors-proxy-image'
        CORS_PROXY_IMAGE__imageBuildTags = "${params.TAG}-prerelease"

        DEPLOY_TAG = "${params.TAG}-prerelease"

        DASHBUILDER__viewerImageRegistry = 'quay.io'
        DASHBUILDER__viewerImageAccount = 'kie-tools'
        DASHBUILDER__viewerImageName = 'dashbuilder-viewer-image'
        DASHBUILDER__viewerImageBuildTags = "${params.TAG}-prerelease"
        SERVERLESS_LOGIC_WEB_TOOLS__dashbuilderViewerImageTag = "${params.TAG}-prerelease"
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry = 'quay.io'
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount = 'kie-tools'
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName = 'serverless-logic-web-tools-swf-builder-image'
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageTag = "${params.TAG}-prerelease"
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags = "${params.TAG}-prerelease"
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry = 'quay.io'
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount = 'kie-tools'
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName = 'serverless-logic-web-tools-base-builder-image'
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageTag = "${params.TAG}-prerelease"
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags = "${params.TAG}-prerelease"
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry = 'quay.io'
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount = 'kie-tools'
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName = 'serverless-logic-web-tools-swf-dev-mode-image'
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageTag = "${params.TAG}-prerelease"
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags = "${params.TAG}-prerelease"

        KIE_SANDBOX_HELM_CHART__registry = 'quay.io'
        KIE_SANDBOX_HELM_CHART__account = 'kie-tools'
        KIE_SANDBOX_HELM_CHART__name = 'kie-sandbox-helm-chart'
        KIE_SANDBOX_HELM_CHART__tag = "${params.TAG}-prerelease"

        KOGITO_TASK_CONSOLE__registry = 'quay.io'
        KOGITO_TASK_CONSOLE__account = 'kie-tools'
        KOGITO_TASK_CONSOLE__name = 'kogito-task-console'
        KOGITO_TASK_CONSOLE__buildTags = "${params.TAG}-prerelease"

        KOGITO_MANAGEMENT_CONSOLE__registry = 'quay.io'
        KOGITO_MANAGEMENT_CONSOLE__account = 'kie-tools'
        KOGITO_MANAGEMENT_CONSOLE__name = 'kogito-management-console'
        KOGITO_MANAGEMENT_CONSOLE__buildTags = "${params.TAG}-prerelease"

        KOGITO_SWF_BUILDER_IMAGE__registry = 'quay.io'
        KOGITO_SWF_BUILDER_IMAGE__account = 'kiegroup'
        KOGITO_SWF_BUILDER_IMAGE__name = 'kogito-swf-builder'
        KOGITO_SWF_BUILDER_IMAGE__buildTag = "${params.TAG}-prerelease"

        KOGITO_SWF_DEVMODE_IMAGE__registry = 'quay.io'
        KOGITO_SWF_DEVMODE_IMAGE__account = 'kiegroup'
        KOGITO_SWF_DEVMODE_IMAGE__name = 'kogito-swf-devmode'
        KOGITO_SWF_DEVMODE_IMAGE__buildTag = "${params.TAG}-prerelease"

        DOCKER_CONFIG = "${WORKSPACE}/.docker"
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    loadLocalSharedScripts()
                }
            }
        }

        stage('Start required services for build and tests (DinD, Xvfb, Fluxbox)') {
            steps {
                script {
                    buildUtils.startRequiredServices()
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BASE_REF}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Checkout kogito-online-staging') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                dir('kogito-online-staging') {
                    script {
                        githubUtils.checkoutRepo(
                            'https://github.com/apache/incubator-kie-kogito-online-staging.git',
                            'main',
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Setup PNPM') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm()
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap()
                    }
                }
            }
        }

        stage('Build (without some images)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildPartial()
                    }
                }
            }
        }

        stage('STAGING: Push serverless-logic-web-tools-swf-builder-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushServerlessLogicWebToolsSWFBuilderImageToQuay()
                }
            }
        }

        stage('STAGING: Deploy Online Editor to kogito-online-staging') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                dir('kogito-online-staging') {
                    script {
                        deployOnlineEditor("${params.TAG}", "${pipelineVars.asfGithubPushCredentialsId}")
                    }
                }
            }
        }

        stage('STAGING: Compress Online Editor (Ubuntu only)') {
            steps {
                dir('kie-tools/packages/online-editor') {
                    script {
                        zipUtils.zipArtifact('dist.zip', 'dist/*')
                    }
                }
            }
        }

        stage('STAGING: Compress Serverless Logic Web Tools (Ubuntu only)') {
            steps {
                dir('kie-tools/packages/serverless-logic-web-tools') {
                    script {
                        zipUtils.zipArtifact('dist.zip', 'dist/*')
                    }
                }
            }
        }

        stage('STAGING: Upload Online Editor') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadOnlineEditor()
                }
            }
        }

        stage('STAGING: Upload Serverless Logic Web Tools') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadServerlessLogicWebTools()
                }
            }
        }

        stage('STAGING: Upload VS Code Extension (dev)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadVSCodeExtension()
                }
            }
        }

        stage('STAGING: Upload VS Code Extension - BPMN Editor (prod)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadVSCodeExtensionBPMNEditor()
                }
            }
        }

        stage('STAGING: Upload VS Code Extension - DMN Editor (prod)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadVSCodeExtensionDMNEditor()
                }
            }
        }

        stage('STAGING: Upload VS Code Extension - PMML Editor (prod)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadVSCodeExtensionPMMLEditor()
                }
            }
        }

        stage('STAGING: Upload VS Code Extension - Serverless Workflow Editor - KIE (prod)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadVSCodeExtensionServerlessWorkflowEditor()
                }
            }
        }

        stage('STAGING: Upload VS Code Extension - Dashbuilder Editor (prod)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadVSCodeExtensionDashbuilderEditor()
                }
            }
        }

        stage('STAGING: Upload VS Code Extension - Kogito Bundle (prod)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadVSCodeExtensionKogitoBundle()
                }
            }
        }

        stage('STAGING: Upload VS Code Extension - KIE Business Automation Bundle (prod)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadVSCodeExtensionKieBusinessAutomationBundle()
                }
            }
        }

        stage('STAGING: Upload Chrome Extension for KIE Editors') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadChromeExtensionForKieEditors()
                }
            }
        }

        stage('STAGING: Upload Chrome Extension for Serverless Workflow Editor') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadChromeExtensionForServerlessWorkflowEditor()
                }
            }
        }

        stage('STAGING: Upload Extended Services for Linux') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadExtendedServicesForLinux()
                }
            }
        }

        stage('STAGING: Upload Knative CLI Workflow Plugin for Linux') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadKnativeCliWorkflowPluginForLinux()
                }
            }
        }

        stage('STAGING: Upload Knative CLI Workflow Plugin for macOS') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadKnativeCliWorkflowPluginForMacOs()
                }
            }
        }

        stage('STAGING: Upload Knative CLI Workflow Plugin for macOS M1') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadKnativeCliWorkflowPluginForMacOsM1()
                }
            }
        }

        stage('STAGING: Upload Knative CLI Workflow Plugin for Windows') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    uploadKnativeCliWorkflowPluginForWindows()
                }
            }
        }

        stage('STAGING: Push kie-sandbox-extended-services-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushKieSandboxExtendedServicesImageToQuay()
                }
            }
        }

        stage('STAGING: Deploy kie-sandbox-extended-services-image to OpenShift') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    deployKieSandboxExtendedServicesImageToOpenshift()
                }
            }
        }

        stage('STAGING: Push cors-proxy-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushCorsProxyImageToQuay()
                }
            }
        }

        stage('STAGING: Deploy cors-proxy-image to OpenShift') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    deployCorsProxyImageToOpenshift()
                }
            }
        }

        stage('STAGING: Push kie-sandbox-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushKieSandboxImageToQuay()
                }
            }
        }

        stage('STAGING: Prepare environment variables for OpenShift deployment') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                sh """#!/bin/bash -el
                echo "KIE_SANDBOX_EXTENDED_SERVICES_URL=${env.KIE_SANDBOX_EXTENDED_SERVICES_URL}" >> deployment.env
                echo "KIE_SANDBOX_CORS_PROXY_URL=${env.KIE_SANDBOX_CORS_PROXY_URL}" >> deployment.env
                """.trim()
            }
        }

        stage('STAGING: Deploy kie-sandbox-image to OpenShift') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    deployKieSandboxImageToOpenshift()
                }
            }
        }

        stage('STAGING: Build (serverless-logic-web-tools-swf-dev-mode-image)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('serverless-logic-web-tools-swf-dev-mode-image')
                    }
                }
            }
        }

        stage('STAGING: Push serverless-logic-web-tools-swf-dev-mode-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushServerlessLogicWebToolsSWFDevModeImageToQuay()
                }
            }
        }

        stage('Build (dev-deployment-base-image and dev-deployment-kogito-quarkus-blank-app-image)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('dev-deployment-base-image')
                        buildImage('dev-deployment-kogito-quarkus-blank-app-image')
                    }
                }
            }
        }

        stage('STAGING: Push dev-deployment-base-image and dev-deployment-kogito-quarkus-blank-app-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushDevDeploymentBaseImageToQuay()
                    pushDevDeploymentKogitoQuarkusBlankAppImageToQuay()
                }
            }
        }

        stage('STAGING: Build (dev-deployment-dmn-form-webapp-image)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('dev-deployment-dmn-form-webapp-image')
                    }
                }
            }
        }

        stage('STAGING: Push dev-deployment-dmn-form-webapp-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushDevDeploymentDmnFormWebappImageToQuay()
                }
            }
        }

        stage('STAGING: Build (serverless-logic-web-tools-base-builder-image)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('serverless-logic-web-tools-base-builder-image')
                    }
                }
            }
        }

        stage('STAGING: Push serverless-logic-web-tools-base-builder-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushServerlessLogicWebToolsBaseBuilderImageToQuay()
                }
            }
        }

        stage('STAGING: Build (dashbuilder-viewer-image)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('dashbuilder-viewer-image')
                    }
                }
            }
        }

        stage('STAGING: Push dashbuilder-viewer-image to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushDashbuilderViewerImageToQuay()
                }
            }
        }

        stage('STAGING: Push kie-sandbox-helm-chart to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                dir('kie-tools') {
                    script {
                        pushKieSandboxHelmChartToQuay()
                    }
                }
            }
        }

        stage('STAGING: Build (kogito-task-console)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('kogito-task-console')
                    }
                }
            }
        }

        stage('STAGING: Push kogito-task-console to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushKogitoTaskConsoleToQuay()
                }
            }
        }

        stage('STAGING: Build (kogito-management-console)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('kogito-management-console')
                    }
                }
            }
        }

        stage('STAGING: Push kogito-management-console to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushKogitoManagementConsoleToQuay()
                }
            }
        }

        stage('STAGING: Build (kogito-swf-builder)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('kogito-swf-builder')
                    }
                }
            }
        }

        stage('STAGING: Push kogito-swf-builder to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushKogitoSwfBuilderToQuay()
                }
            }
        }

        stage('STAGING: Build (kogito-swf-devmode)') {
            steps {
                dir('kie-tools') {
                    script {
                        buildImage('kogito-swf-devmode')
                    }
                }
            }
        }

        stage('STAGING: Push kogito-swf-devmode to quay.io') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    pushKogitoSwfDevModeToQuay()
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}

def buildPartial() {
    sh """#!/bin/bash -el
    export KIE_TOOLS_BUILD__runEndToEndTests=false
    export KIE_TOOLS_BUILD__runTests=false
    export KIE_TOOLS_BUILD__runLinters=false
    export KIE_TOOLS_BUILD__buildContainerImages=true
    export WEBPACK__minimize=true
    export WEBPACK__tsLoaderTranspileOnly=false
    export CHROME_EXTENSION__routerTargetOrigin=https://apache.github.io
    export CHROME_EXTENSION__routerRelativePath=incubator-kie-kogito-online-staging/${params.TAG}-prerelease/chrome-extension
    export CHROME_EXTENSION__onlineEditorUrl=https://apache.github.io/incubator-kie-kogito-online-staging/${params.TAG}-prerelease
    export CHROME_EXTENSION__manifestFile=manifest.prod.json
    export SWF_CHROME_EXTENSION__routerTargetOrigin=https://apache.github.io
    export SWF_CHROME_EXTENSION__routerRelativePath=incubator-kie-kogito-online-staging/${params.TAG}-prerelease/swf-chrome-extension
    export SWF_CHROME_EXTENSION__manifestFile=manifest.prod.json
    export ONLINE_EDITOR__buildInfo="${params.TAG} (staging) @ ${params.COMMIT_SHA}"
    export ONLINE_EDITOR__extendedServicesDownloadUrlLinux=${params.DOWNLOAD_ASSET_URL}/STAGING__kie_sandbox_extended_services_linux_${params.TAG}.tar.gz
    export ONLINE_EDITOR__extendedServicesDownloadUrlMacOs=${params.DOWNLOAD_ASSET_URL}/STAGING__kie_sandbox_extended_services_macos_${params.TAG}.dmg
    export ONLINE_EDITOR__extendedServicesDownloadUrlWindows=${params.DOWNLOAD_ASSET_URL}/STAGING__kie_sandbox_extended_services_windows_${params.TAG}.exe
    export ONLINE_EDITOR__extendedServicesCompatibleVersion=${params.TAG}
    export ONLINE_EDITOR__gtmId=""
    export ONLINE_EDITOR__corsProxyUrl=https://staging-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud
    export EXTENDED_SERVICES__kieSandboxUrl=https://apache.github.io/incubator-kie-kogito-online-staging/${params.TAG}-prerelease
    export SERVERLESS_LOGIC_WEB_TOOLS__version=${params.TAG}-prerelease
    export SERVERLESS_LOGIC_WEB_TOOLS__samplesRepositoryRef=${params.TAG}
    export SERVERLESS_LOGIC_WEB_TOOLS__buildInfo="${params.TAG} (staging) @ ${params.COMMIT_SHA}"
    export SERVERLESS_LOGIC_WEB_TOOLS__corsProxyUrl=https://staging-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud

    pnpm -F='!@kie-tools/serverless-logic-web-tools-swf-dev-mode-image' \
    -F='!@kie-tools/dev-deployment-base-image' \
    -F='!@kie-tools/dev-deployment-dmn-form-webapp-image' \
    -F='!@kie-tools/dev-deployment-kogito-quarkus-blank-app-image' \
    -F='!@kie-tools/serverless-logic-web-tools-base-builder-image' \
    -F='!@kie-tools/dashbuilder-viewer-image' \
    -F='!@kie-tools/kogito-task-console' \
    -F='!@kie-tools/kogito-management-console' \
    -r --workspace-concurrency=1 build:prod
    """.trim()
}

def uploadKnativeCliWorkflowPluginForWindows() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        'kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-windows-amd64.exe',
        "STAGING__kn-workflow-windows-amd64-${params.TAG}.exe",
        'application/octet-stream',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadKnativeCliWorkflowPluginForMacOsM1() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        'kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-darwin-arm64',
        "STAGING__kn-workflow-darwin-arm64-${params.TAG}",
        'application/octet-stream',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadKnativeCliWorkflowPluginForMacOs() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        'kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-darwin-amd64',
        "STAGING__kn-workflow-darwin-amd64-${params.TAG}",
        'application/octet-stream',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadKnativeCliWorkflowPluginForLinux() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        'kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-linux-amd64',
        "STAGING__kn-workflow-linux-amd64-${params.TAG}",
        'application/octet-stream',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadExtendedServicesForLinux() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        'kie-tools/packages/extended-services/dist/linux/kie_sandbox_extended_services.tar.gz',
        "STAGING__kie_sandbox_extended_services_linux_${params.TAG}.tar.gz",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadChromeExtensionForServerlessWorkflowEditor() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/chrome_extension_serverless_workflow_editor_${params.TAG}.zip",
        "STAGING__chrome_extension_serverless_workflow_editor_${params.TAG}.zip",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadChromeExtensionForKieEditors() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${params.TAG}.zip",
        "STAGING__chrome_extension_kogito_kie_editors_${params.TAG}.zip",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadVSCodeExtensionKieBusinessAutomationBundle() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/vscode-extension-kie-ba-bundle/dist/vscode_extension_kie_ba_bundle_${params.TAG}.vsix",
        "STAGING__vscode_extension_kie_ba_bundle_${params.TAG}.vsix",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadVSCodeExtensionKogitoBundle() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/vscode-extension-kogito-bundle/dist/vscode_extension_kogito_bundle_${params.TAG}.vsix",
        "STAGING__vscode_extension_kogito_bundle_${params.TAG}.vsix",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadVSCodeExtensionDashbuilderEditor() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/vscode-extension-dashbuilder-editor/dist/vscode_extension_dashbuilder_editor_${params.TAG}.vsix",
        "STAGING__vscode_extension_dashbuilder_editor_${params.TAG}.vsix",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadVSCodeExtensionServerlessWorkflowEditor() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/serverless-workflow-vscode-extension/dist/serverless_workflow_vscode_extension_${params.TAG}.vsix",
        "STAGING__serverless_workflow_vscode_extension_${params.TAG}.vsix",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadVSCodeExtensionPMMLEditor() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/pmml-vscode-extension/dist/pmml_vscode_extension_${params.TAG}.vsix",
        "STAGING__pmml_vscode_extension_${params.TAG}.vsix",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadVSCodeExtensionDMNEditor() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/dmn-vscode-extension/dist/dmn_vscode_extension_${params.TAG}.vsix",
        "STAGING__dmn_vscode_extension_${params.TAG}.vsix",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadVSCodeExtension() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        "kie-tools/packages/kie-editors-dev-vscode-extension/dist/kie_editors_dev_vscode_extension_${params.TAG}.vsix",
        "STAGING__vscode_extension_dev_${params.TAG}.vsix",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadServerlessLogicWebTools() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        'kie-tools/packages/serverless-logic-web-tools/dist.zip',
        "STAGING__serverless_logic_web_tools_${params.TAG}.zip",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def uploadOnlineEditor() {
    githubUtils.uploadReleaseAsset(
        "${params.UPLOAD_ASSET_URL}",
        'kie-tools/packages/online-editor/dist.zip',
        "STAGING__online_editor_${params.TAG}.zip",
        'application/zip',
        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
    )
}

def pushKieSandboxHelmChartToQuay() {
    helmUtils.pushChartToRegistry(
        "${env.KIE_SANDBOX_HELM_CHART__registry}/${env.KIE_SANDBOX_HELM_CHART__account}",
        "packages/kie-sandbox-helm-chart/dist/${env.KIE_SANDBOX_HELM_CHART__name}-${env.KIE_SANDBOX_HELM_CHART__tag}.tgz",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def deployOnlineEditor(String tag, String credentialsId) {
    DEPLOYMENT_DIR = "${tag}-prerelease"

    sh """#!/bin/bash -el
    git config user.email asf-ci-kie@jenkins.kie.apache.org
    git config user.name asf-ci-kie

    echo "Switch to main branch"
    git checkout main

    echo "Reset deployment dir"
    rm -rf ${DEPLOYMENT_DIR}

    echo "Copy Online Editor resources to the deployment dir"
    cp -r ${WORKSPACE}/kie-tools/packages/online-editor/dist ${DEPLOYMENT_DIR}

    echo "Create dir for deploying KIE Editors Chrome Extension resources"
    mkdir ${DEPLOYMENT_DIR}/chrome-extension

    echo "Create dir for deploying SWF Editor Chrome Extension resources"
    mkdir ${DEPLOYMENT_DIR}/swf-chrome-extension

    echo "Copy KIE Editors Chrome Extension resources to the deployment directory"
    cp -r ${WORKSPACE}/kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/{bpmn,dmn,scesim,fonts,*-envelope.*} ${DEPLOYMENT_DIR}/chrome-extension

    echo "Copy SWF Editor Chrome Extension resources to the deployment directory"
    cp -r ${WORKSPACE}/kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/{fonts,diagram,*-envelope.*,*.bundle.js,*.worker.js} ${DEPLOYMENT_DIR}/swf-chrome-extension

    echo "Remove gwt-editors from the Online Editor deployment"
    rm -rf ${DEPLOYMENT_DIR}/gwt-editors

    echo "Make the Online Editor use the resources deployed by the Chrome Extension (to save space)"
    ln -s chrome-extension ${DEPLOYMENT_DIR}/gwt-editors

    echo "Commit changes and push"
    git add ${tag}-prerelease
    git commit -m "Deploy ${tag}-prerelease (staging)"
    """.trim()

    githubUtils.pushObject('origin', 'main', "${credentialsId}")
}

def deployKieSandboxExtendedServicesImageToOpenshift() {
    appName = 'staging-kie-sandbox-extended-services'
    openShiftUtils.createOrUpdateApp(
        "${env.OPENSHIFT_NAMESPACE}",
        "${appName}",
        "${env.DEPLOY_TAG}",
        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageName}:${env.DEPLOY_TAG}",
        "${env.OPENSHIFT_PART_OF}",
        'golang',
        "${pipelineVars.openshiftCredentialsId}"
    )
    env.KIE_SANDBOX_EXTENDED_SERVICES_URL = openShiftUtils.getAppRoute("${env.OPENSHIFT_NAMESPACE}", "${appName}", "${pipelineVars.openshiftCredentialsId}")
}

def deployCorsProxyImageToOpenshift() {
    appName = 'staging-cors-proxy'
    openShiftUtils.createOrUpdateApp(
        "${env.OPENSHIFT_NAMESPACE}",
        "${appName}",
        "${env.DEPLOY_TAG}",
        "${env.CORS_PROXY_IMAGE__imageRegistry}/${env.CORS_PROXY_IMAGE__imageAccount}/${env.CORS_PROXY_IMAGE__imageName}:${env.DEPLOY_TAG}",
        "${env.OPENSHIFT_PART_OF}",
        'nodejs',
        "${pipelineVars.openshiftCredentialsId}"
    )
    env.KIE_SANDBOX_CORS_PROXY_URL = openShiftUtils.getAppRoute("${env.OPENSHIFT_NAMESPACE}", "${appName}", "${pipelineVars.openshiftCredentialsId}")
}

def deployKieSandboxImageToOpenshift() {
    openShiftUtils.createOrUpdateApp(
        "${env.OPENSHIFT_NAMESPACE}",
        'staging-kie-sandbox',
        "${env.DEPLOY_TAG}",
        "${env.KIE_SANDBOX__imageRegistry}/${env.KIE_SANDBOX__imageAccount}/${env.KIE_SANDBOX__imageName}:${env.DEPLOY_TAG}",
        "${env.OPENSHIFT_PART_OF}",
        'js',
        "${pipelineVars.openshiftCredentialsId}",
        './deployment.env'
    )
}

def pushServerlessLogicWebToolsSWFBuilderImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount}",
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName}",
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushKieSandboxExtendedServicesImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount}",
        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageName}",
        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushCorsProxyImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.CORS_PROXY_IMAGE__imageRegistry}/${env.CORS_PROXY_IMAGE__imageAccount}",
        "${env.CORS_PROXY_IMAGE__imageName}",
        "${env.CORS_PROXY_IMAGE__imageBuildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushKieSandboxImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.KIE_SANDBOX__imageRegistry}/${env.KIE_SANDBOX__imageAccount}",
        "${env.KIE_SANDBOX__imageName}",
        "${env.KIE_SANDBOX__imageBuildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushServerlessLogicWebToolsSWFDevModeImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount}",
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName}",
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushDevDeploymentBaseImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.DEV_DEPLOYMENT_BASE_IMAGE__registry}/${env.DEV_DEPLOYMENT_BASE_IMAGE__account}",
        "${env.DEV_DEPLOYMENT_BASE_IMAGE__name}",
        "${env.DEV_DEPLOYMENT_BASE_IMAGE__buildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushDevDeploymentDmnFormWebappImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__registry}/${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__account}",
        "${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__name}",
        "${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__buildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushDevDeploymentKogitoQuarkusBlankAppImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__registry}/${env.DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__account}",
        "${env.DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__name}",
        "${env.DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__buildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushDashbuilderViewerImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.DASHBUILDER__viewerImageRegistry}/${env.DASHBUILDER__viewerImageAccount}",
        "${env.DASHBUILDER__viewerImageName}",
        "${env.DASHBUILDER__viewerImageBuildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushServerlessLogicWebToolsBaseBuilderImageToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount}",
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName}",
        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushKogitoTaskConsoleToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.KOGITO_TASK_CONSOLE__registry}/${env.KOGITO_TASK_CONSOLE__account}",
        "${env.KOGITO_TASK_CONSOLE__name}",
        "${env.KOGITO_TASK_CONSOLE__buildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushKogitoManagementConsoleToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.KOGITO_MANAGEMENT_CONSOLE__registry}/${env.KOGITO_MANAGEMENT_CONSOLE__account}",
        "${env.KOGITO_MANAGEMENT_CONSOLE__name}",
        "${env.KOGITO_MANAGEMENT_CONSOLE__buildTags}",
        "${pipelineVars.quayPushCredentialsId}"
    )
}

def pushKogitoSwfBuilderToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.KOGITO_SWF_BUILDER_IMAGE__registry}/${env.KOGITO_SWF_BUILDER_IMAGE__account}",
        "${env.KOGITO_SWF_BUILDER_IMAGE__name}",
        "${env.KOGITO_SWF_BUILDER_IMAGE__buildTag}",
        "${pipelineVars.quayKiegroupPushCredentialsId}"
    )
}

def pushKogitoSwfDevModeToQuay() {
    dockerUtils.pushImageToRegistry(
        "${env.KOGITO_SWF_DEVMODE_IMAGE__registry}/${env.KOGITO_SWF_DEVMODE_IMAGE__account}",
        "${env.KOGITO_SWF_DEVMODE_IMAGE__name}",
        "${env.KOGITO_SWF_DEVMODE_IMAGE__buildTag}",
        "${pipelineVars.quayKiegroupPushCredentialsId}"
    )
}

def buildImage(String packageName) {
    sh """#!/bin/bash -el
    export KIE_TOOLS_BUILD__runTests=true
    export KIE_TOOLS_BUILD__buildContainerImages=true
    docker system prune -af
    echo "Build @kie-tools/${packageName}"
    pnpm -F @kie-tools/${packageName}... --workspace-concurrency=1 build:prod
    """.trim()
}

def loadLocalSharedScripts() {
    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
    openShiftUtils = load '.ci/jenkins/shared-scripts/openShiftUtils.groovy'
    dockerUtils = load '.ci/jenkins/shared-scripts/dockerUtils.groovy'
    helmUtils = load '.ci/jenkins/shared-scripts/helmUtils.groovy'
    zipUtils = load '.ci/jenkins/shared-scripts/zipUtils.groovy'
}
