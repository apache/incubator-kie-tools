/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'quay.io/kie-tools/kie-tools-ci-build:latest'
        }
    }

    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    checkout scm
                }
            }
        }

        stage('Parse `tag`') {
            steps {
                dir('kie-tools') {
                    script {
                        env.TAG = sh(returnStdout: true, script: "#!/bin/bash -el \n node -p \"'\${GIT_BRANCH}'.match(/(.+)-prerelease/)[1]\"").trim()
                        env.PACKAGE_VERSION = sh(returnStdout: true, script: "#!/bin/bash -el \n node -p \"require('./package.json').version\"").trim()
                        env.COMMIT_SHA = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    }
                }
            }
        }

        stage('Check `tag` against `package.json.version`') {
            steps {
                dir('kie-tools') {
                    sh """#!/bin/bash -el
                    [[ "${env.TAG}" == "${env.PACKAGE_VERSION}" ]]
                    """.trim()
                }
            }
        }

        stage('Create Release (draft)') {
            steps {
                script {
                    response = githubUtils.createRelease(
                        "${pipelineVars.githubRepositorySlug}",
                        "${env.TAG} @ (alpha)",
                        "${env.TAG}",
                        "${env.COMMIT_SHA}",
                        true,
                        true,
                        "${pipelineVars.kieToolsBotGithubTokenCredentialsId}"
                    )

                    respJSON = readJSON text: response

                    env.RELEASE_ID = respJSON.id
                    env.RELEASE_HTML_URL = respJSON.html_url
                    env.RELEASE_UPLOAD_ASSET_URL = githubUtils.parseReleaseAssetUploadUrl(respJSON.upload_url)
                }
            }
        }

        stage('Generate download URL for Release assets') {
            steps {
                script {
                    env.RELEASE_DOWNLOAD_ASSET_URL = sh(returnStdout: true, script: "echo ${env.RELEASE_HTML_URL} | sed \"s#/tag/#/download/#\"").trim()
                }
            }
        }

        stage('Staging Build and Publish') {
            steps {
                build job: 'KIE/kie-tools/kie-tools-staging-build', parameters: [
                    booleanParam(name: 'DRY_RUN', value: false),
                    string(name: 'BASE_REF', value: "${GIT_BRANCH}"),
                    string(name: 'TAG', value: "${env.TAG}"),
                    string(name: 'COMMIT_SHA', value: "${env.COMMIT_SHA}"),
                    string(name: 'DOWNLOAD_ASSET_URL', value: "${env.RELEASE_DOWNLOAD_ASSET_URL}"),
                    string(name: 'UPLOAD_ASSET_URL', value: "${env.RELEASE_UPLOAD_ASSET_URL}")
                ]
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}
