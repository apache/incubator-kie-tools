/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:main'
            args '--shm-size=2g --privileged --group-add docker'
            label util.avoidFaultyNodes()
        }
    }

    options {
        timeout(time: 180, unit: 'MINUTES')
    }

    parameters {
        string(name: 'BRANCH_NAME', description: 'Set the Git branch to checkout (0.0.x)', trim: true)
        string(name: 'RELEASE_VERSION', description: 'Release version', trim: true)
        string(name: 'TAG_NAME', description: 'Tag name to be created', trim: true)
        string(description: 'Runners', name: 'RUNNERS', defaultValue: '{"chrome_extensions":"true","cors_proxy_image":"true","dashbuilder_viewer_image":"true","dev_deployment_base_image":"true","dev_deployment_dmn_form_webapp_image":"true","dev_deployment_kogito_quakus_blank_app_image":"true","dev_deployment_upload_service":"true","extended_services":"true","jbpm_quarkus_devui":"true","kie_sandbox_extended_services_image":"true","kie_sandbox_helm_chart":"true","kie_sandbox_image":"true","kn_plugin_workflow":"true","kogito_task_console":"true","kogito_management_console":"true","kogito_swf_builder":"true","kogito_swf_devmode":"true","kogito_serverless_operator":"true","npm_packages":"true","online_editor":"true","runtime_tools_consoles_helm_chart":"true","serverless_logic_web_tools":"true","serverless_logic_web_tools_base_builder_image":"true","serverless_logic_web_tools_swf_builder_image":"true","serverless_logic_web_tools_swf_dev_mode_image":"true","standalone_editors_cdn":"true","sonataflow_quarkus_devui":"true","vscode_extensions_dev":"true","vscode_extensions_prod":"true"}')
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BRANCH_NAME}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Setup PNPM') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm("${pipelineVars.mavenSettingsReleaseConfigFileId}")
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap()
                    }
                }
            }
        }

        stage('Setup Git repository') {
            steps {
                dir('kie-tools') {
                    script {
                        sh """#!/bin/bash -el
                        git config user.email asf-ci-kie@jenkins.kie.apache.org
                        git config user.name asf-ci-kie
                        git checkout ${params.BRANCH_NAME}
                        """.trim()
                    }
                }
            }
        }

        stage('Update project version') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmUpdateProjectVersion(params.RELEASE_VERSION)
                    }
                }
            }
        }

        stage('Update kogito version') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmUpdateKogitoVersion(params.RELEASE_VERSION, params.RELEASE_VERSION)
                    }
                }
            }
        }

        stage('Update stream name') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmUpdateStreamName(params.RELEASE_VERSION)
                    }
                }
            }
        }

        stage('Commit changes') {
            steps {
                dir('kie-tools') {
                    script {
                        sh """#!/bin/bash -el
                        git add .
                        git commit --allow-empty -am "Apache KIE ${params.RELEASE_VERSION} release"
                        """.trim()
                    }
                }
            }
        }

        stage('Check `release version` against `package.json.version`') {
            steps {
                dir('kie-tools') {
                    script {
                        packageVersion = sh(returnStdout: true, script: "#!/bin/bash -el \n node -p \"require('./package.json').version\"").trim()
                        sh """#!/bin/bash -el
                        [[ "${params.RELEASE_VERSION}" == "${packageVersion}" ]]
                        """.trim()
                    }
                }
            }
        }

        stage('Create a new tag') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.createTag("${params.TAG_NAME}")
                        githubUtils.pushObject('origin', "${params.TAG_NAME}", "${pipelineVars.asfGithubPushCredentialsId}")
                    }
                }
            }
        }

        stage('Build and Publish release candidate artifacts') {
            steps {
                build job: 'KIE/kie-tools/kie-tools-release-build', parameters: [
                    booleanParam(name: 'DRY_RUN', value: false),
                    string(name: 'BASE_REF', value: "${env.TAG_NAME}"),
                    string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
                    string(name: 'RUNNERS', value: "${params.RUNNERS}"),
                    string(name: 'RELEASE_CANDIDATE_VERSION', value: "${TAG_NAME}")
                ]
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}
