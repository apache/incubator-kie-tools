@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

changeAuthor = env.ghprbAuthorRepoGitUrl ? util.getGroup(env.ghprbAuthorRepoGitUrl) : (env.ghprbPullAuthorLogin ?: CHANGE_AUTHOR)
changeBranch = env.ghprbSourceBranch ?: CHANGE_BRANCH
changeTarget = env.ghprbTargetBranch ?: CHANGE_TARGET

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem8g'
    }
    tools {
        nodejs 'nodejs-16.2.0'
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk11'
    }
    options {
        timestamps()
        timeout(time: getTimeoutValue(), unit: 'MINUTES')
    }
    environment {
        SONARCLOUD_TOKEN = credentials('SONARCLOUD_TOKEN')
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    mailer.buildLogScriptPR()

                    checkoutRepo('kie-tools')
                }
            }
        }
        stage('Build KIE Tools java modules') {
            steps {
                script {
                    mvnCmd = getMavenCommand('kie-tools/packages/dashbuilder')
                    mvnCmd.run('wrapper:wrapper')
                }
                script {
                    mvnCmd = getMavenCommand('kie-tools/packages/dashbuilder')
                    mvnCmd.withProfiles(['full'])
                    mvnCmd.withProperty('gwt.compiler.skip', true)
                    mvnCmd.withProperty('skipTests', true)
                    mvnCmd.run('clean package')
                }
                script {
                    mvnCmd = getMavenCommand('kie-tools/packages/stunner-editors')
                    mvnCmd.withProperty('gwt.compiler.skip', true)
                    mvnCmd.withProperty('skipTests', true)
                    mvnCmd.run('clean package')
                }
            }
            post {
                cleanup {
                    script {
                        cleanContainers()
                    }
                }
            }
        }
        stage('Analyze KIE Tools by SonarCloud') {
            when {
                expression { isNormalPRCheck() && isSonarCloudEnabled() }
            }
            steps {
                script {
                    if (isSonarCloudEnabled()) {
                        sh "yarn sonar-scanner -Dsonar.projectKey=kiegroup_kie-tools -Dsonar.organization=kiegroup -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${SONARCLOUD_TOKEN} -Dsonar.sources=packages -Dsonar.java.binaries=packages/dashbuilder,packages/stunner-editors -Dsonar.exclusions=**/uberfire-widgets-core-ace/**,**/test-resources/**"
                    }
                }
            }
            post {
                cleanup {
                    script {
                        cleanContainers()
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sh '$WORKSPACE/trace.sh'
                junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
            }
        }
        failure {
            script {
                mailer.sendEmail_failedPR()
            }
        }
        unstable {
            script {
                mailer.sendEmail_unstablePR()
            }
        }
        fixed {
            script {
                mailer.sendEmail_fixedPR()
            }
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void checkoutRepo(String repo, String dirName=repo) {
    dir(dirName) {
        checkout(githubscm.resolveRepository('kie-tools', changeAuthor, changeBranch, false))
    }
}

MavenCommand getMavenCommand(String directory) {
    mvnCmd = new MavenCommand(this, ['-fae'])
                .withSettingsXmlId('kogito_release_settings')
                .withSnapshotsDisabledInSettings()
                .withProperty('java.net.preferIPv4Stack', true)
                .inDirectory(directory)
    return mvnCmd
}

void cleanContainers() {
    cloud.cleanContainersAndImages('docker')
}

boolean isDownstreamJob() {
    return env['DOWNSTREAM_BUILD'] && env['DOWNSTREAM_BUILD'].toBoolean()
}

String getUpstreamTriggerProject() {
    return env['UPSTREAM_TRIGGER_PROJECT']
}

boolean isNormalPRCheck() {
    return !isDownstreamJob()
}

boolean isSonarCloudEnabled() {
    return env['ENABLE_SONARCLOUD'] && env['ENABLE_SONARCLOUD'].toBoolean()
}

Integer getTimeoutValue() {
    return 240
}