@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

changeAuthor = env.ghprbAuthorRepoGitUrl ? util.getGroup(env.ghprbAuthorRepoGitUrl) : (env.ghprbPullAuthorLogin ?: CHANGE_AUTHOR)
changeBranch = env.ghprbSourceBranch ?: CHANGE_BRANCH
changeTarget = env.ghprbTargetBranch ?: CHANGE_TARGET

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem8g && !built-in'
    }
    tools {
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk11'
    }
    options {
        timestamps()
        timeout(time: getTimeoutValue(), unit: 'MINUTES')
    }
    environment {
        SONARCLOUD_TOKEN = credentials('SONARCLOUD_TOKEN')
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    mailer.buildLogScriptPR()

                    checkoutRepo('kie-tools')
                }
            }
        }
        stage('Build KIE Tools - Stunner Editors') {
            steps {
                script {
                    mvnCmd = getMavenCommand('kie-tools/packages/stunner-editors')
                    if (isNormalPRCheck() && isSonarCloudEnabled()) {
                        mvnCmd.withProfiles(['run-code-coverage'])
                    }
                    mvnCmd.withOptions(["-pl '!kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime,!kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing,!lienzo-webapp'"])
                    mvnCmd.withProperty('revision', '0.0.0')
                    mvnCmd.run('clean install')
                }
            }
            post {
                cleanup {
                    script {
                        cleanContainers()
                    }
                }
            }
        }
        stage('Analyze KIE Tools - Stunner Editors by SonarCloud') {
            when {
                expression { isNormalPRCheck() && isSonarCloudEnabled() }
            }
            steps {
                script {
                    if (isSonarCloudEnabled()) {
                        getMavenCommand('kie-tools/packages/stunner-editors')
                                .withOptions(['-Drevision=0.0.0', '-e', '-nsu', "-pl '!kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime,!kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing,!lienzo-webapp'"])
                                .withProperty('sonar.projectKey', 'org.kie.kogito:kogito-tooling')
                                .withProperty('sonar.organization', 'kiegroup')
                                .withProperty('sonar.host.url', 'https://sonarcloud.io')
                                .withProperty('sonar.login', env['SONARCLOUD_TOKEN'])
                                .run('validate org.sonarsource.scanner.maven:sonar-maven-plugin:sonar')
                    }
                }
            }
            post {
                cleanup {
                    script {
                        cleanContainers()
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sh '$WORKSPACE/trace.sh'
                junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
            }
        }
        failure {
            script {
                mailer.sendEmail_failedPR()
            }
        }
        unstable {
            script {
                mailer.sendEmail_unstablePR()
            }
        }
        fixed {
            script {
                mailer.sendEmail_fixedPR()
            }
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void checkoutRepo(String repo, String dirName=repo) {
    dir(dirName) {
        checkout(githubscm.resolveRepository('kie-tools', changeAuthor, changeBranch, false))
    }
}

MavenCommand getMavenCommand(String directory) {
    mvnCmd = new MavenCommand(this, ['-fae'])
                .withSettingsXmlId('kogito_release_settings')
                .withSnapshotsDisabledInSettings()
                .withProperty('java.net.preferIPv4Stack', true)
                .inDirectory(directory)
    return mvnCmd
}

void cleanContainers() {
    cloud.cleanContainersAndImages('docker')
}

boolean isDownstreamJob() {
    return env['DOWNSTREAM_BUILD'] && env['DOWNSTREAM_BUILD'].toBoolean()
}

String getUpstreamTriggerProject() {
    return env['UPSTREAM_TRIGGER_PROJECT']
}

boolean isNormalPRCheck() {
    return !isDownstreamJob()
}

boolean isSonarCloudEnabled() {
    return env['ENABLE_SONARCLOUD'] && env['ENABLE_SONARCLOUD'].toBoolean()
}

Integer getTimeoutValue() {
    return 240
}