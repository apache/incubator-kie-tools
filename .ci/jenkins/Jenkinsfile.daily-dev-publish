/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        docker {
            image 'quay.io/kie-tools/kie-tools-ci-build:latest'
            args '--shm-size=2g --privileged --group-add docker'
            label util.avoidFaultyNodes()
        }
    }

    options {
        timeout(time: 240, unit: 'MINUTES')
    }

    environment {
        KIE_SANDBOX_EXTENDED_SERVICES_VERSION = '0.0.0'

        KIE_TOOLS_BUILD__buildContainerImages = 'true'
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'

        DEV_DEPLOYMENT_BASE_IMAGE__registry = 'quay.io'
        DEV_DEPLOYMENT_BASE_IMAGE__account = 'kie-tools'
        DEV_DEPLOYMENT_BASE_IMAGE__name = 'dev-deployment-base-image'
        DEV_DEPLOYMENT_BASE_IMAGE__buildTags = 'daily-dev'

        DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__registry = 'quay.io'
        DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__account = 'kie-tools'
        DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__name = 'dev-deployment-kogito-quarkus-blank-app-image'
        DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__buildTags = 'daily-dev'

        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__registry = 'quay.io'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__account = 'kie-tools'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__name = 'dev-deployment-dmn-form-webapp-image'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__buildTags = 'daily-dev'

        ONLINE_EDITOR__devDeploymentBaseImageRegistry = 'quay.io'
        ONLINE_EDITOR__devDeploymentBaseImageAccount = 'kie-tools'
        ONLINE_EDITOR__devDeploymentBaseImageName = 'dev-deployment-base-image'
        ONLINE_EDITOR__devDeploymentBaseImageTag = 'daily-dev'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageRegistry = 'quay.io'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageAccount = 'kie-tools'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageName = 'dev-deployment-dmn-form-webapp-image'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageTag = 'daily-dev'
        ONLINE_EDITOR__corsProxyUrl = 'https://daily-dev-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud'

        EXTENDED_SERVICES__kieSandboxUrl = 'https://apache.github.io/incubator-kie-kogito-online/dev'

        KIE_SANDBOX__imageRegistry = 'quay.io'
        KIE_SANDBOX__imageAccount = 'kie-tools'
        KIE_SANDBOX__imageName = 'kie-sandbox-image'
        KIE_SANDBOX__imageBuildTags = 'daily-dev'

        KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry = 'quay.io'
        KIE_SANDBOX_EXTENDED_SERVICES__imageAccount = 'kie-tools'
        KIE_SANDBOX_EXTENDED_SERVICES__imageName = 'kie-sandbox-extended-services-image'
        KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags = 'daily-dev'

        CORS_PROXY_IMAGE__imageRegistry = 'quay.io'
        CORS_PROXY_IMAGE__imageAccount = 'kie-tools'
        CORS_PROXY_IMAGE__imageName = 'cors-proxy-image'
        CORS_PROXY_IMAGE__imageBuildTags = 'daily-dev'

        KIE_SANDBOX_HELM_CHART__registry = 'quay.io'
        KIE_SANDBOX_HELM_CHART__account = 'kie-tools'
        KIE_SANDBOX_HELM_CHART__name = 'kie-sandbox-helm-chart'
        KIE_SANDBOX_HELM_CHART__tag = '0.0.0-daily-dev'

        OPENSHIFT_NAMESPACE = 'kie-sandbox'
        OPENSHIFT_PART_OF = 'daily-dev-kie-sandbox-app'
        DEPLOY_TAG = 'daily-dev'

        DASHBUILDER__viewerImageRegistry = 'quay.io'
        DASHBUILDER__viewerImageAccount = 'kie-tools'
        DASHBUILDER__viewerImageName = 'dashbuilder-viewer-image'
        DASHBUILDER__viewerImageBuildTags = 'daily-dev'

        SERVERLESS_LOGIC_WEB_TOOLS__dashbuilderViewerImageTag = 'daily-dev'
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry = 'quay.io'
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount = 'kie-tools'
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName = 'serverless-logic-web-tools-swf-builder-image'
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageTag = 'daily-dev'
        SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags = 'daily-dev'
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry = 'quay.io'
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount = 'kie-tools'
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName = 'serverless-logic-web-tools-base-builder-image'
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageTag = 'daily-dev'
        SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags = 'daily-dev'
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry = 'quay.io'
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount = 'kie-tools'
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName = 'serverless-logic-web-tools-swf-dev-mode-image'
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageTag = 'daily-dev'
        SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags = 'daily-dev'
        SERVERLESS_LOGIC_WEB_TOOLS__corsProxyUrl = 'https://daily-dev-cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud'

        KOGITO_TASK_CONSOLE__registry = 'quay.io'
        KOGITO_TASK_CONSOLE__account = 'kie-tools'
        KOGITO_TASK_CONSOLE__name = 'kogito-task-console'
        KOGITO_TASK_CONSOLE__buildTags = 'daily-dev'

        KOGITO_MANAGEMENT_CONSOLE__registry = 'quay.io'
        KOGITO_MANAGEMENT_CONSOLE__account = 'kie-tools'
        KOGITO_MANAGEMENT_CONSOLE__name = 'kogito-management-console'
        KOGITO_MANAGEMENT_CONSOLE__buildTags = 'daily-dev'

        KOGITO_SWF_BUILDER_IMAGE__registry = 'quay.io'
        KOGITO_SWF_BUILDER_IMAGE__account = 'kiegroup'
        KOGITO_SWF_BUILDER_IMAGE__name = 'kogito-swf-builder-nightly'
        KOGITO_SWF_BUILDER_IMAGE__buildTag = 'latest'

        KOGITO_SWF_DEVMODE_IMAGE__registry = 'quay.io'
        KOGITO_SWF_DEVMODE_IMAGE__account = 'kiegroup'
        KOGITO_SWF_DEVMODE_IMAGE__name = 'kogito-swf-devmode-nightly'
        KOGITO_SWF_DEVMODE_IMAGE__buildTag = 'latest'

        BUILD_DATE = sh(script: "echo `date +'%Y-%m-%d %T'`", returnStdout: true).trim()

        DOCKER_CONFIG = "${WORKSPACE}/.docker"
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                    openShiftUtils = load '.ci/jenkins/shared-scripts/openShiftUtils.groovy'
                    dockerUtils = load '.ci/jenkins/shared-scripts/dockerUtils.groovy'
                    helmUtils = load '.ci/jenkins/shared-scripts/helmUtils.groovy'
                }
            }
        }

        stage('Start required services for build and tests (DinD, Xvfb, Fluxbox)') {
            steps {
                script {
                    buildUtils.startRequiredServices()
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    checkout scm
                }
            }
        }

        stage('Output version') {
            steps {
                dir('kie-tools') {
                    script {
                        env.VERSION = sh(returnStdout: true, script: "#!/bin/bash -el \n node -e \"console.log(require('./package.json').version);\"").trim()
                    }
                }
            }
        }

        stage('Setup PNPM') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm()
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap()
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('kie-tools') {
                    sh """#!/bin/bash -el
                    export WEBPACK__minimize=true
                    export WEBPACK__tsLoaderTranspileOnly=false
                    export CHROME_EXTENSION__routerTargetOrigin=https://apache.github.io
                    export CHROME_EXTENSION__routerRelativePath=incubator-kie-kogito-online/dev/editors/
                    export SWF_CHROME_EXTENSION__routerTargetOrigin=https://apache.github.io
                    export SWF_CHROME_EXTENSION__routerRelativePath=incubator-kie-kogito-online/dev/editors/
                    export ONLINE_EDITOR__extendedServicesDownloadUrlLinux=https://github.com/apache/incubator-kie-tools/releases/download/${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}/kie_sandbox_extended_services_linux_${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}.tar.gz
                    export ONLINE_EDITOR__extendedServicesDownloadUrlMacOs=https://github.com/apache/incubator-kie-tools/releases/download/${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}/kie_sandbox_extended_services_macos_${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}.dmg
                    export ONLINE_EDITOR__extendedServicesDownloadUrlWindows=https://github.com/apache/incubator-kie-tools/releases/download/${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}/kie_sandbox_extended_services_windows_${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}.exe
                    export ONLINE_EDITOR__extendedServicesCompatibleVersion=${env.KIE_SANDBOX_EXTENDED_SERVICES_VERSION}
                    export ONLINE_EDITOR__buildInfo="${env.VERSION} (daily-dev) @ ${env.GIT_COMMIT} (${env.BUILD_DATE})"
                    export SERVERLESS_LOGIC_WEB_TOOLS__buildInfo="${env.VERSION} (daily-dev) @ ${env.GIT_COMMIT} (${env.BUILD_DATE})"
                    pnpm -r --workspace-concurrency=1 build:prod
                    """.trim()
                }
            }
        }

        stage('Push kogito-swf-builder to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.KOGITO_SWF_BUILDER_IMAGE__registry}/${env.KOGITO_SWF_BUILDER_IMAGE__account}",
                        "${env.KOGITO_SWF_BUILDER_IMAGE__name}",
                        "${env.KOGITO_SWF_BUILDER_IMAGE__buildTag}",
                        "${pipelineVars.quayKiegroupPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push kogito-swf-devmode to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.KOGITO_SWF_DEVMODE_IMAGE__registry}/${env.KOGITO_SWF_DEVMODE_IMAGE__account}",
                        "${env.KOGITO_SWF_DEVMODE_IMAGE__name}",
                        "${env.KOGITO_SWF_DEVMODE_IMAGE__buildTag}",
                        "${pipelineVars.quayKiegroupPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push dev-deployment-base-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.DEV_DEPLOYMENT_BASE_IMAGE__registry}/${env.DEV_DEPLOYMENT_BASE_IMAGE__account}",
                        "${env.DEV_DEPLOYMENT_BASE_IMAGE__name}",
                        "${env.DEV_DEPLOYMENT_BASE_IMAGE__buildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push dev-deployment-dmn-form-webapp-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__registry}/${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__account}",
                        "${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__name}",
                        "${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__buildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push dev-deployment-kogito-quarkus-blank-app-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__registry}/${env.DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__account}",
                        "${env.DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__name}",
                        "${env.DEV_DEPLOYMENT_KOGITO_QUARKUS_BLANK_APP_IMAGE__buildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push kie-sandbox-extended-services-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount}",
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageName}",
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Deploy kie-sandbox-extended-services-image to OpenShift') {
            steps {
                script {
                    appName = 'daily-dev-kie-sandbox-extended-services'
                    openShiftUtils.createOrUpdateApp(
                        "${env.OPENSHIFT_NAMESPACE}",
                        "${appName}",
                        "${env.DEPLOY_TAG}",
                        "${env.KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageAccount}/${env.KIE_SANDBOX_EXTENDED_SERVICES__imageName}:${env.DEPLOY_TAG}",
                        "${env.OPENSHIFT_PART_OF}",
                        'golang',
                        "${pipelineVars.openshiftCredentialsId}"
                    )
                    env.KIE_SANDBOX_EXTENDED_SERVICES_URL = openShiftUtils.getAppRoute("${env.OPENSHIFT_NAMESPACE}", "${appName}", "${pipelineVars.openshiftCredentialsId}")
                }
            }
        }

        stage('Push cors-proxy-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.CORS_PROXY_IMAGE__imageRegistry}/${env.CORS_PROXY_IMAGE__imageAccount}",
                        "${env.CORS_PROXY_IMAGE__imageName}",
                        "${env.CORS_PROXY_IMAGE__imageBuildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Deploy cors-proxy-image to OpenShift') {
            steps {
                script {
                    appName = 'daily-dev-cors-proxy'
                    openShiftUtils.createOrUpdateApp(
                        "${env.OPENSHIFT_NAMESPACE}",
                        "${appName}",
                        "${env.DEPLOY_TAG}",
                        "${env.CORS_PROXY_IMAGE__imageRegistry}/${env.CORS_PROXY_IMAGE__imageAccount}/${env.CORS_PROXY_IMAGE__imageName}:${env.DEPLOY_TAG}",
                        "${env.OPENSHIFT_PART_OF}",
                        'nodejs',
                        "${pipelineVars.openshiftCredentialsId}"
                    )
                    env.KIE_SANDBOX_CORS_PROXY_URL = openShiftUtils.getAppRoute("${env.OPENSHIFT_NAMESPACE}", "${appName}", "${pipelineVars.openshiftCredentialsId}")
                }
            }
        }

        stage('Push kie-sandbox-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.KIE_SANDBOX__imageRegistry}/${env.KIE_SANDBOX__imageAccount}",
                        "${env.KIE_SANDBOX__imageName}",
                        "${env.KIE_SANDBOX__imageBuildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Prepare environment variables for OpenShift deployment') {
            steps {
                sh """#!/bin/bash -el
                echo "KIE_SANDBOX_EXTENDED_SERVICES_URL=${env.KIE_SANDBOX_EXTENDED_SERVICES_URL}" >> deployment.env
                echo "KIE_SANDBOX_CORS_PROXY_URL=${env.KIE_SANDBOX_CORS_PROXY_URL}" >> deployment.env
                """.trim()
            }
        }

        stage('Deploy kie-sandbox-image to OpenShift') {
            steps {
                script {
                    openShiftUtils.createOrUpdateApp(
                        "${env.OPENSHIFT_NAMESPACE}",
                        'daily-dev-kie-sandbox',
                        "${env.DEPLOY_TAG}",
                        "${env.KIE_SANDBOX__imageRegistry}/${env.KIE_SANDBOX__imageAccount}/${env.KIE_SANDBOX__imageName}:${env.DEPLOY_TAG}",
                        "${env.OPENSHIFT_PART_OF}",
                        'js',
                        "${pipelineVars.openshiftCredentialsId}",
                        './deployment.env'
                    )
                }
            }
        }

        stage('Push serverless-logic-web-tools-swf-builder-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageName}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfBuilderImageBuildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push serverless-logic-web-tools-base-builder-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageName}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__baseBuilderImageBuildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push serverless-logic-web-tools-swf-dev-mode-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageRegistry}/${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageAccount}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageName}",
                        "${env.SERVERLESS_LOGIC_WEB_TOOLS__swfDevModeImageBuildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push dashbuilder-viewer-image to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.DASHBUILDER__viewerImageRegistry}/${env.DASHBUILDER__viewerImageAccount}",
                        "${env.DASHBUILDER__viewerImageName}",
                        "${env.DASHBUILDER__viewerImageBuildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push kogito-task-console to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.KOGITO_TASK_CONSOLE__registry}/${env.KOGITO_TASK_CONSOLE__account}",
                        "${env.KOGITO_TASK_CONSOLE__name}",
                        "${env.KOGITO_TASK_CONSOLE__buildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push kogito-management-console to quay.io') {
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.KOGITO_MANAGEMENT_CONSOLE__registry}/${env.KOGITO_MANAGEMENT_CONSOLE__account}",
                        "${env.KOGITO_MANAGEMENT_CONSOLE__name}",
                        "${env.KOGITO_MANAGEMENT_CONSOLE__buildTags}",
                        "${pipelineVars.quayPushCredentialsId}"
                    )
                }
            }
        }

        stage('Push kie-sandbox-helm-chart to quay.io') {
            steps {
                dir('kie-tools') {
                    script {
                        helmUtils.pushChartToRegistry(
                            "${env.KIE_SANDBOX_HELM_CHART__registry}/${env.KIE_SANDBOX_HELM_CHART__account}",
                            "packages/kie-sandbox-helm-chart/dist/${env.KIE_SANDBOX_HELM_CHART__name}-${env.KIE_SANDBOX_HELM_CHART__tag}.tgz",
                            "${pipelineVars.quayPushCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Update kogito-online resources') {
            steps {
                dir('kogito-online') {
                    script {
                        githubUtils.checkoutRepo(
                            'https://github.com/apache/incubator-kie-kogito-online.git',
                            'gh-pages',
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )

                        sh """#!/bin/bash -el
                        git config user.email asf-ci-kie@jenkins.kie.apache.org
                        git config user.name asf-ci-kie
                        git checkout gh-pages
                        rm -rf dev && mkdir -p dev/editors
                        cp -RL ${WORKSPACE}/kie-tools/packages/stunner-editors/dist/dmn dev/editors/
                        cp -RL ${WORKSPACE}/kie-tools/packages/stunner-editors/dist/bpmn dev/editors/
                        cp -RL ${WORKSPACE}/kie-tools/packages/stunner-editors/dist/scesim dev/editors/
                        cp -r ${WORKSPACE}/kie-tools/packages/online-editor/dist/* dev/
                        rm -rf dev/gwt-editors
                        ln -s editors dev/gwt-editors
                        git add . && git commit -m "Apache KIE Tools Daily Dev Build resources - ${env.BUILD_DATE}" || echo 'No changes.'
                        """.trim()

                        githubUtils.pushObject('origin', 'gh-pages', "${pipelineVars.asfGithubPushCredentialsId}")
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "kie-tools/packages/serverless-workflow-vscode-extension/dist/serverless_workflow_vscode_extension_${env.VERSION}.vsix, kie-tools/packages/vscode-extension-dashbuilder-editor/dist/vscode_extension_dashbuilder_editor_${env.VERSION}.vsix, kie-tools/packages/kie-editors-dev-vscode-extension/dist/kie_editors_dev_vscode_extension_${env.VERSION}.vsix, kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${env.VERSION}.zip, kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/chrome_extension_serverless_workflow_editor_${env.VERSION}.zip"

            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}
