/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:10.0.999'
            args '--shm-size=2g --privileged --group-add docker'
            label util.avoidFaultyNodes()
        }
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    parameters {
        string(name: 'BRANCH_NAME', description: 'Set the Git branch to checkout (0.0.999)', trim: true)
        string(name: 'RELEASE_VERSION', description: 'Release version', trim: true)
        string(name: 'TAG_NAME', description: 'Tag name to be created', trim: true)
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                }
            }
        }

        stage('Clean workspace') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-sandbox-quarkus-accelerator') {
            steps {
                dir('kie-sandbox-quarkus-accelerator') {
                    script {
                        githubUtils.checkoutRepo(
                            'http://github.com/apache/incubator-kie-sandbox-quarkus-accelerator.git',
                            "${params.BRANCH_NAME}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Setup Git repository') {
            steps {
                dir('kie-sandbox-quarkus-accelerator') {
                    script {
                        sh """#!/bin/bash -el
                        git config user.email asf-ci-kie@jenkins.kie.apache.org
                        git config user.name asf-ci-kie
                        git checkout ${params.BRANCH_NAME}
                        """.trim()
                    }
                }
            }
        }

        stage('Update kogito BOM version') {
            steps {
                dir('kie-sandbox-quarkus-accelerator') {
                    script {
                        sh """#!/bin/bash -el
                        mvn versions:set-property -Dproperty=kogito.bom.version -DnewVersion=${params.RELEASE_VERSION}
                        """.trim()
                    }
                }
            }
        }

        stage('Commit changes') {
            steps {
                dir('kie-sandbox-quarkus-accelerator') {
                    script {
                        sh """#!/bin/bash -el
                        git add .
                        git commit --allow-empty -am "Apache KIE ${params.RELEASE_VERSION} release"
                        """.trim()
                    }
                }
            }
        }

        stage('Create a new tag') {
            steps {
                dir('kie-sandbox-quarkus-accelerator') {
                    script {
                        githubUtils.createTag("${params.TAG_NAME}")
                        githubUtils.pushObject('origin', "${params.TAG_NAME}", "${pipelineVars.asfCIGithubCredentialsId}")
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}
