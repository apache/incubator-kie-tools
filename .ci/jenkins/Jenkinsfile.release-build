/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:main'
            args '--shm-size=2g --privileged --group-add docker'
            label util.avoidFaultyNodes()
        }
    }

    options {
        timeout(time: 900, unit: 'MINUTES')
    }

    parameters {
        booleanParam(name: 'DRY_RUN', description: 'Dry run', defaultValue: true)
        string(name: 'PIPELINE_PATH', description: 'Path to run the pipeline')
        string(name: 'BASE_REF', description: 'GitHub Base Ref (tag or branch)')
        string(name: 'RELEASE_VERSION', description: 'Release Version', defaultValue: '0.0.0')
        string(name: 'UPLOAD_ASSET_URL', description: 'Upload asset url', defaultValue: '')
        string(name: 'RUNNERS', description: 'Runners', defaultValue: '{"chrome_extensions":"false","cors_proxy_image":"false","dashbuilder_viewer_image":"false","dev_deployment_base_image":"false","dev_deployment_dmn_form_webapp_image":"false","dev_deployment_quarkus_blank_app_image":"false","dev_deployment_upload_service":"false","extended_services":"false","jbpm_quarkus_devui":"false","kie_sandbox_image":"false","kie_sandbox_accelerator_quarkus":"false","kie_sandbox_extended_services":"false","kie_sandbox_helm_chart":"false","kn_plugin_workflow":"false","kogito_base_builder_image":"false","kogito_data_index_ephemeral_image":"false","kogito_data_index_postgresql_image":"false","kogito_jobs_service_allinone_image":"false","kogito_jobs_service_ephemeral_image":"false","kogito_jobs_service_postgresql_image":"false","kogito_jit_runner_image":"false","kogito_db_migrator_tool":"false","kogito_management_console":"false","kogito_serverless_operator":"false","kogito_swf_builder":"false","kogito_swf_devmode":"false","npm_packages":"false","online_editor":"false","runtime_tools_consoles_helm_chart":"false","serverless_logic_web_tools":"false","serverless_logic_web_tools_base_builder_image":"false","serverless_logic_web_tools_swf_builder_image":"false","serverless_logic_web_tools_swf_dev_mode_image":"false","sonataflow_management_console":"false","sonataflow_quarkus_devui":"false","standalone_editors_cdn":"false","vscode_extensions_dev":"false","vscode_extensions_prod":"false"}')
        string(name: 'RELEASE_CANDIDATE_VERSION', description: 'Release Candidate Version', defaultValue: '')
    }

    environment {
        OPENSHIFT_NAMESPACE = 'kie-sandbox'
        DEV_DEPLOYMENT_BASE_IMAGE_JOB_RESULT = 'SKIPPED'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE_JOB_RESULT = 'SKIPPED'
        KIE_SANDBOX_EXTENDED_SERVICES_IMAGE_JOB_RESULT = 'SKIPPED'
        CORS_PROXY_IMAGE_JOB_RESULT = 'SKIPPED'
        KIE_SANDBOX_IMAGE_JOB_RESULT = 'SKIPPED'
        ONLINE_EDITOR_JOB_RESULT = 'SKIPPED'
        CHROME_EXTENSIONS_JOB_RESULT = 'SKIPPED'
        EXTENDED_SERVICES_JOB_RESULT = 'SKIPPED'
        SERVERLESS_LOGIC_WEB_TOOLS_SWF_BUILDER_IMAGE_JOB_RESULT = 'SKIPPED'
        SERVERLESS_LOGIC_WEB_TOOLS_BASE_BUILDER_IMAGE_JOB_RESULT = 'SKIPPED'
        SERVERLESS_LOGIC_WEB_TOOLS_SWF_DEV_MODE_IMAGE_JOB_RESULT = 'SKIPPED'
        DASHBUILDER_VIEWER_IMAGE_JOB_RESULT = 'SKIPPED'
        KOGITO_MANAGEMENT_CONSOLE_JOB_RESULT = 'SKIPPED'
        KOGITO_SWF_BUILDER_JOB_RESULT = 'SKIPPED'
        KOGITO_SWF_DEVMODE_JOB_RESULT = 'SKIPPED'
        KOGITO_SERVERLESS_OPERATOR_JOB_RESULT = 'SKIPPED'
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    openShiftUtils = load '.ci/jenkins/shared-scripts/openShiftUtils.groovy'
                }
            }
        }

        stage('Set Runners') {
            steps {
                script {
                    setRunners()
                }
            }
        }

        stage('Print Runners') {
            steps {
                script {
                    printRunners()
                }
            }
        }

        stage('Parallel - Builds') {
            parallel {
                stage('KIE Kogito Base Builder Image') {
                    when {
                        expression { env.KOGITO_BASE_BUILDER_IMAGE == 'true' }
                    }
                    steps {
                        script {
                            kogitoBaseBuilderImageBuildJob()
                        }
                    }
                }

                stage('KIE Kogito Data Index Ephemeral Image') {
                    when {
                        expression { env.KOGITO_DATA_INDEX_EPHEMERAL_IMAGE == 'true' }
                    }
                    steps {
                        script {
                            kogitoDataIndexEphemeralImageBuildJob()
                        }
                    }
                }

                stage('KIE Kogito Data Index Postgresql Image') {
                    when {
                        expression { env.KOGITO_DATA_INDEX_POSTGRESQL_IMAGE == 'true' }
                    }
                    steps {
                        script {
                            kogitoDataIndexPostgresqlImageBuildJob()
                        }
                    }
                }

                stage('KIE Kogito Jobs Service Allinone Image') {
                    when {
                        expression { env.KOGITO_JOBS_SERVICE_ALLINONE_IMAGE == 'true' }
                    }
                    steps {
                        script {
                            kogitoJobsServiceAllinoneImageBuildJob()
                        }
                    }
                }

                stage('KIE Kogito Jobs Service Ephemeral Image') {
                    when {
                        expression { env.KOGITO_JOBS_SERVICE_EPHEMERAL_IMAGE == 'true' }
                    }
                    steps {
                        script {
                            kogitoJobsServiceEphemeralImageBuildJob()
                        }
                    }
                }

                stage('KIE Kogito Jobs Service Postgresql Image') {
                    when {
                        expression { env.KOGITO_JOBS_SERVICE_POSTGRESQL_IMAGE == 'true' }
                    }
                    steps {
                        script {
                            kogitoJobsServicePostgresqlImageBuildJob()
                        }
                    }
                }

                stage('KIE Kogito Jit Runner Image') {
                    when {
                        expression { env.KOGITO_JIT_RUNNER_IMAGE == 'true' }
                    }
                    steps {
                        script {
                            kogitoJitRunnerImageBuildJob()
                        }
                    }
                }

                stage('KIE Sandbox Accelerator Quarkus') {
                    when {
                        expression { env.KIE_SANDBOX_ACCELERATOR_QUARKUS == 'true' }
                    }
                    steps {
                        script {
                            kieSandboxAcceleratorQuarkusBuildJob()
                        }
                    }
                }

                stage('Dev Deployment Upload Service') {
                    when {
                        expression { env.DEV_DEPLOYMENT_UPLOAD_SERVICE == 'true' }
                    }
                    steps {
                        script {
                            devDeploymentUploadServiceBuildJob()
                        }
                    }
                }

                stage('VSCode Extensions Dev') {
                    when {
                        expression { env.VSCODE_EXTENSIONS_DEV == 'true' }
                    }
                    steps {
                        script {
                            vscodeExtensionsDevBuildJob()
                        }
                    }
                }

                stage('VSCode Extensions Prod') {
                    when {
                        expression { env.VSCODE_EXTENSIONS_PROD == 'true' }
                    }
                    steps {
                        script {
                            vscodeExtensionsProdBuildJob()
                        }
                    }
                }

                stage('NPM Packages') {
                    when {
                        expression { env.NPM_PACKAGES == 'true' }
                    }
                    steps {
                        script {
                            npmPackagesBuildJob()
                        }
                    }
                }

                stage('JBPM Quarkus Dev UI') {
                    when {
                        expression { env.JBPM_QUARKUS_DEVUI == 'true' }
                    }
                    steps {
                        script {
                            jbpmQuarkusDevuiBuildJob()
                        }
                    }
                }

                stage('Sonataflow Quarkus Dev UI') {
                    when {
                        expression { env.SONATAFLOW_QUARKUS_DEVUI == 'true' }
                    }
                    steps {
                        script {
                            sonataflowQuarkusDevuiBuildJob()
                        }
                    }
                }

                stage('Dependant build #1') {
                    stages {                        
                        stage('Dev Deployment Quarkus Blank App Image') {
                            when {
                                expression { env.DEV_DEPLOYMENT_QUARKUS_BLANK_APP_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    devDeploymentQuarkusBlankAppImageBuildJob()
                                }
                            }
                        }

                        stage('Sonataflow Management Console') {
                            when {
                                expression { env.SONATAFLOW_MANAGEMENT_CONSOLE == 'true' }
                            }
                            steps {
                                script {
                                    sonataflowManagementConsoleBuildJob()
                                }
                            }
                        }                        
                        
                        stage('Serverless Logic Web Tools Swf Builder Image') {
                            when {
                                expression { env.SERVERLESS_LOGIC_WEB_TOOLS_SWF_BUILDER_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    serverlessLogicWebToolsSwfBuilderImageBuildJob()
                                }
                            }
                        }

                        stage('Serverless Logic Web Tools Swf Dev Mode Image') {
                            when {
                                expression { env.SERVERLESS_LOGIC_WEB_TOOLS_SWF_DEV_MODE_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    serverlessLogicWebToolsSwfDevModeImageBuildJob()
                                }
                            }
                        }

                        stage('Serverless Logic Web Tools Base Builder Image') {
                            when {
                                expression { env.SERVERLESS_LOGIC_WEB_TOOLS_BASE_BUILDER_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    serverlessLogicWebToolsBaseBuilderImageBuildJob()
                                }
                            }
                        }

                        stage('Dashbuilder Viewer Image') {
                            when {
                                expression { env.DASHBUILDER_VIEWER_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    dashbuilderViewerImageBuildJob()
                                }
                            }
                        }

                        stage('Serverless Logic Web Tools') {
                            when {
                                expression { env.SERVERLESS_LOGIC_WEB_TOOLS == 'true' }
                            }
                            steps {
                                script {
                                    serverlessLogicWebToolsBuildJob()
                                }
                            }
                        }

                        stage('Kogito Management Console Image') {
                            when {
                                expression { env.KOGITO_MANAGEMENT_CONSOLE == 'true' }
                            }
                            steps {
                                script {
                                    kogitoManagementConsoleBuildJob()
                                }
                            }
                        }

                        stage('Kogito SWF Builder Image') {
                            when {
                                expression { env.KOGITO_SWF_BUILDER == 'true' }
                            }
                            steps {
                                script {
                                    kogitoSwfBuilderBuildJob()
                                }
                            }
                        }

                        stage('Kogito SWF Devmode Image') {
                            when {
                                expression { env.KOGITO_SWF_DEVMODE == 'true' }
                            }
                            steps {
                                script {
                                    kogitoSwfDevmodeBuildJob()
                                }
                            }
                        }

                        stage('Kogito Serverless Operator Image') {
                            when {
                                expression { env.KOGITO_SERVERLESS_OPERATOR == 'true' }
                            }
                            steps {
                                script {
                                    kogitoServerlessOperatorBuildJob()
                                }
                            }
                        }
                                                                        
                        stage('Dev Deployment Base Image') {
                            when {
                                expression { env.DEV_DEPLOYMENT_BASE_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    devDeploymentBaseImageBuildJob()
                                }
                            }
                        }

                        stage('Dev Deployment DMN Form Webapp Image') {
                            when {
                                expression { env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    devDeploymentDmnFormWebappImageBuildJob()
                                }
                            }
                        }

                        stage('Extendend Services') {
                            when {
                                expression { env.EXTENDED_SERVICES == 'true' }
                            }
                            steps {
                                script {
                                    extendedServicesBuildJob()
                                }
                            }
                        }

                        stage('Online Editor') {
                            when {
                                expression { env.ONLINE_EDITOR == 'true' && (env.EXTENDED_SERVICES_JOB_RESULT == 'SUCCESS' || env.EXTENDED_SERVICES_JOB_RESULT == 'SKIPPED') && (env.DEV_DEPLOYMENT_BASE_IMAGE_JOB_RESULT == 'SUCCESS' || env.DEV_DEPLOYMENT_BASE_IMAGE_JOB_RESULT == 'SKIPPED') && (env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE_JOB_RESULT == 'SUCCESS' || env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE_JOB_RESULT == 'SKIPPED') }
                            }
                            steps {
                                script {
                                    onlineEditorBuildJob()
                                }
                            }
                        }

                        stage('Chrome Extensions') {
                            when {
                                expression { env.CHROME_EXTENSIONS == 'true' && (env.EXTENDED_SERVICES_JOB_RESULT == 'SUCCESS' || env.EXTENDED_SERVICES_JOB_RESULT == 'SKIPPED') && (env.DEV_DEPLOYMENT_BASE_IMAGE_JOB_RESULT == 'SUCCESS' || env.DEV_DEPLOYMENT_BASE_IMAGE_JOB_RESULT == 'SKIPPED') && (env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE_JOB_RESULT == 'SUCCESS' || env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE_JOB_RESULT == 'SKIPPED') && (env.ONLINE_EDITOR_JOB_RESULT == 'SUCCESS' || env.ONLINE_EDITOR_JOB_RESULT == 'SKIPPED') }
                            }
                            steps {
                                script {
                                    chromeExtensionsBuildJob()
                                }
                            }
                        }

                        stage('Standalone Editors CDN') {
                            when {
                                expression { env.STANDALONE_EDITORS_CDN == 'true' && (env.EXTENDED_SERVICES_JOB_RESULT == 'SUCCESS' || env.EXTENDED_SERVICES_JOB_RESULT == 'SKIPPED') && (env.DEV_DEPLOYMENT_BASE_IMAGE_JOB_RESULT == 'SUCCESS' || env.DEV_DEPLOYMENT_BASE_IMAGE_JOB_RESULT == 'SKIPPED') && (env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE_JOB_RESULT == 'SUCCESS' || env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE_JOB_RESULT == 'SKIPPED') && (env.ONLINE_EDITOR_JOB_RESULT == 'SUCCESS' || env.ONLINE_EDITOR_JOB_RESULT == 'SKIPPED') && (env.CHROME_EXTENSIONS_JOB_RESULT == 'SUCCESS' || env.CHROME_EXTENSIONS_JOB_RESULT == 'SKIPPED') }
                            }
                            steps {
                                script {
                                    standaloneEditorsCdnBuildJob()
                                }
                            }
                        }

                        stage('Kn Plugin Workflow') {
                            when {
                                expression { env.KN_PLUGIN_WORKFLOW == 'true' && (env.SONATAFLOW_QUARKUS_DEVUI_JOB_RESULT == 'SUCCESS') }
                            }
                            steps {
                                script {
                                    knPluginWorkflowBuildJob()
                                }
                            }
                        }
                    }
                }

                stage('Dependant build #2') {
                    stages {
                        stage('KIE Sandbox Extended Services Image') {
                            when {
                                expression { env.KIE_SANDBOX_EXTENDED_SERVICES_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    kieSandboxExtendedServicesImageBuildJob()
                                }
                            }
                        }

                        stage('CORS Proxy Image') {
                            when {
                                expression { env.CORS_PROXY_IMAGE == 'true' }
                            }
                            steps {
                                script {
                                    corsProxyImageBuildJob()
                                }
                            }
                        }

                        stage('KIE Sandbox Image') {
                            when {
                                expression { env.KIE_SANDBOX_IMAGE == 'true' && (env.KIE_SANDBOX_EXTENDED_SERVICES_IMAGE_JOB_RESULT == 'SUCCESS' || env.KIE_SANDBOX_EXTENDED_SERVICES_IMAGE_JOB_RESULT == 'SKIPPED') && (env.CORS_PROXY_IMAGE_JOB_RESULT == 'SUCCESS' || env.CORS_PROXY_IMAGE_JOB_RESULT == 'SKIPPED') }
                            }
                            steps {
                                script {
                                    kieSandboxImageBuildJob()
                                }
                            }
                        }

                        stage('KIE Sandbox Helm Chart') {
                            when {
                                expression { env.KIE_SANDBOX_HELM_CHART == 'true' }
                            }
                            steps {
                                script {
                                    kieSandboxHelmChartBuildJob()
                                }
                            }
                        }

                        stage('Runtime Tools Consoles Helm Chart') {
                            when {
                                expression { env.RUNTIME_TOOLS_CONSOLES_HELM_CHART == 'true' }
                            }
                            steps {
                                script {
                                    runtimeToolsConsolesHelmChartBuildJob()
                                }
                            }
                        }

                        stage('DB Migrator Tool') {
                            when {
                                expression { env.KOGITO_DB_MIGRATOR_TOOL == 'true' }
                            }
                            steps {
                                script {
                                    kogitoDbMigratorToolBuildJob()
                                }
                            }
                        }

                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}

def setRunners() {
    runners = readJSON text: "${params.RUNNERS}"
    
    env.CHROME_EXTENSIONS = runners.chrome_extensions
    env.CORS_PROXY_IMAGE = runners.cors_proxy_image
    env.DASHBUILDER_VIEWER_IMAGE = runners.dashbuilder_viewer_image
    env.DEV_DEPLOYMENT_BASE_IMAGE = runners.dev_deployment_base_image
    env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE = runners.dev_deployment_dmn_form_webapp_image
    env.DEV_DEPLOYMENT_QUARKUS_BLANK_APP_IMAGE = runners.dev_deployment_quarkus_blank_app_image
    env.DEV_DEPLOYMENT_UPLOAD_SERVICE = runners.dev_deployment_upload_service    
    env.EXTENDED_SERVICES = runners.extended_services
    env.JBPM_QUARKUS_DEVUI = runners.jbpm_quarkus_devui
    env.KIE_SANDBOX_IMAGE = runners.kie_sandbox_image
    env.KIE_SANDBOX_ACCELERATOR_QUARKUS = runners.kie_sandbox_accelerator_quarkus
    env.KIE_SANDBOX_EXTENDED_SERVICES = runners.kie_sandbox_extended_services    
    env.KIE_SANDBOX_HELM_CHART = runners.kie_sandbox_helm_chart
    env.KN_PLUGIN_WORKFLOW = runners.kn_plugin_workflow    
    env.KOGITO_BASE_BUILDER_IMAGE = runners.kogito_base_builder_image   
    env.KOGITO_DATA_INDEX_EPHEMERAL_IMAGE = runners.kogito_data_index_ephemeral_image
    env.KOGITO_DATA_INDEX_POSTGRESQL_IMAGE = runners.kogito_data_index_postgresql_image
    env.KOGITO_JOBS_SERVICE_ALLINONE_IMAGE = runners.kogito_jobs_service_allinone_image
    env.KOGITO_JOBS_SERVICE_EPHEMERAL_IMAGE = runners.kogito_jobs_service_ephemeral_image
    env.KOGITO_JOBS_SERVICE_POSTGRESQL_IMAGE = runners.kogito_jobs_service_postgresql_image
    env.KOGITO_JIT_RUNNER_IMAGE = runners.kogito_jit_runner_image
    env.KOGITO_DB_MIGRATOR_TOOL = runners.kogito_db_migrator_tool
    env.KOGITO_MANAGEMENT_CONSOLE = runners.kogito_management_console
    env.KOGITO_SERVERLESS_OPERATOR = runners.kogito_serverless_operator
    env.KOGITO_SWF_BUILDER = runners.kogito_swf_builder
    env.KOGITO_SWF_DEVMODE = runners.kogito_swf_devmode
    env.NPM_PACKAGES = runners.npm_packages
    env.ONLINE_EDITOR = runners.online_editor
    env.RUNTIME_TOOLS_CONSOLES_HELM_CHART = runners.runtime_tools_consoles_helm_chart
    env.SERVERLESS_LOGIC_WEB_TOOLS = runners.serverless_logic_web_tools
    env.SERVERLESS_LOGIC_WEB_TOOLS_BASE_BUILDER_IMAGE = runners.serverless_logic_web_tools_base_builder_image
    env.SERVERLESS_LOGIC_WEB_TOOLS_SWF_BUILDER_IMAGE = runners.serverless_logic_web_tools_swf_builder_image
    env.SERVERLESS_LOGIC_WEB_TOOLS_SWF_DEV_MODE_IMAGE = runners.serverless_logic_web_tools_swf_dev_mode_image
    env.SONATAFLOW_MANAGEMENT_CONSOLE = runners.sonataflow_management_console
    env.SONATAFLOW_QUARKUS_DEVUI = runners.sonataflow_quarkus_devui
    env.STANDALONE_EDITORS_CDN = runners.standalone_editors_cdn
    env.VSCODE_EXTENSIONS_DEV = runners.vscode_extensions_dev
    env.VSCODE_EXTENSIONS_PROD = runners.vscode_extensions_prod
    
}

def printRunners() {
    sh """
    echo "chrome_extensions: ${env.CHROME_EXTENSIONS}"
    echo "cors_proxy_image: ${env.CORS_PROXY_IMAGE}"
    echo "dashbuilder_viewer_image: ${env.DASHBUILDER_VIEWER_IMAGE}"
    echo "dev_deployment_base_image: ${env.DEV_DEPLOYMENT_BASE_IMAGE}"
    echo "dev_deployment_dmn_form_webapp_image: ${env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE}"
    echo "dev_deployment_quarkus_blank_app_image: ${env.DEV_DEPLOYMENT_QUARKUS_BLANK_APP_IMAGE}"    
    echo "dev_deployment_upload_service: ${env.DEV_DEPLOYMENT_UPLOAD_SERVICE}"
    echo "extended_services: ${env.EXTENDED_SERVICES}"
    echo "jbpm_quarkus_devui: ${env.JBPM_QUARKUS_DEVUI}"
    echo "kie_sandbox_image: ${env.KIE_SANDBOX_IMAGE}"
    echo "kie_sandbox_accelerator_quarkus: ${env.KIE_SANDBOX_ACCELERATOR_QUARKUS}"
    echo "kie_sandbox_extended_services: ${env.KIE_SANDBOX_EXTENDED_SERVICES}"
    echo "kie_sandbox_helm_chart: ${env.KIE_SANDBOX_HELM_CHART}"
    echo "kn_plugin_workflow: ${env.KN_PLUGIN_WORKFLOW}"
    echo "kogito_base_builder_image: ${env.KOGITO_BASE_BUILDER_IMAGE}"
    echo "kogito_data_index_ephemeral_image: ${env.KOGITO_DATA_INDEX_EPHEMERAL_IMAGE}"
    echo "kogito_data_index_postgresql_image: ${env.KOGITO_DATA_INDEX_POSTGRESQL_IMAGE}"
    echo "kogito_jobs_service_allinone_image: ${env.KOGITO_JOBS_SERVICE_ALLINONE_IMAGE}"
    echo "kogito_jobs_service_ephemeral_image: ${env.KOGITO_JOBS_SERVICE_EPHEMERAL_IMAGE}"
    echo "kogito_jobs_service_postgresql_image: ${env.KOGITO_JOBS_SERVICE_POSTGRESQL_IMAGE}"
    echo "kogito_jit_runner_image: ${env.KOGITO_JIT_RUNNER_IMAGE}"
    echo "kogito_db_migrator_tool: ${env.KOGITO_DB_MIGRATOR_TOOL}"
    echo "kogito_management_console: ${env.KOGITO_MANAGEMENT_CONSOLE}"
    echo "kogito_serverless_operator: ${env.KOGITO_SERVERLESS_OPERATOR}"
    echo "kogito_swf_builder: ${env.KOGITO_SWF_BUILDER}"
    echo "kogito_swf_devmode: ${env.KOGITO_SWF_DEVMODE}"
    echo "npm_packages: ${env.NPM_PACKAGES}"
    echo "online_editor: ${env.ONLINE_EDITOR}"
    echo "runtime_tools_consoles_helm_chart: ${env.RUNTIME_TOOLS_CONSOLES_HELM_CHART}"
    echo "serverless_logic_web_tools: ${env.SERVERLESS_LOGIC_WEB_TOOLS}"
    echo "serverless_logic_web_tools_base_builder_image: ${env.SERVERLESS_LOGIC_WEB_TOOLS_BASE_BUILDER_IMAGE}"
    echo "serverless_logic_web_tools_swf_builder_image: ${env.SERVERLESS_LOGIC_WEB_TOOLS_SWF_BUILDER_IMAGE}"
    echo "serverless_logic_web_tools_swf_dev_mode_image: ${env.SERVERLESS_LOGIC_WEB_TOOLS_SWF_DEV_MODE_IMAGE}"
    echo "sonataflow_management_console: ${env.SONATAFLOW_MANAGEMENT_CONSOLE}"
    echo "sonataflow_quarkus_devui: ${env.SONATAFLOW_QUARKUS_DEVUI}"
    echo "standalone_editors_cdn: ${env.STANDALONE_EDITORS_CDN}"
    echo "vscode_extensions_dev: ${env.VSCODE_EXTENSIONS_DEV}"
    echo "vscode_extensions_prod: ${env.VSCODE_EXTENSIONS_PROD}"
    """.trim()
}

def kogitoBaseBuilderImageBuildJob() {
    env.KOGITO_BASE_BUILDER_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-base-builder-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoDataIndexEphemeralImageBuildJob() {
    env.KOGITO_DATA_INDEX_EPHEMERAL_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-data-index-ephemeral-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoDataIndexPostgresqlImageBuildJob() {
    env.KOGITO_DATA_INDEX_POSTGRESQL_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-data-index-postgresql-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoJobsServiceAllinoneImageBuildJob() {
    env.KOGITO_JOBS_SERVICE_ALLINONE_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-jobs-service-allinone-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoJobsServiceEphemeralImageBuildJob() {
    env.KOGITO_JOBS_SERVICE_EPHEMERAL_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-jobs-service-ephemeral-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoJobsServicePostgresqlImageBuildJob() {
    env.KOGITO_JOBS_SERVICE_POSTGRESQL_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-jobs-service-postgresql-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoJitRunnerImageBuildJob() {
    env.KOGITO_JIT_RUNNER_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-jit-runner-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def devDeploymentQuarkusBlankAppImageBuildJob() {
    env.DEV_DEPLOYMENT_QUARKUS_BLANK_APP_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/dev-deployment-quarkus-blank-app-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def devDeploymentUploadServiceBuildJob() {
    env.DEV_DEPLOYMENT_UPLOAD_SERVICE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/dev-deployment-upload-service",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'UPLOAD_ASSET_URL', value: "${params.UPLOAD_ASSET_URL}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def vscodeExtensionsDevBuildJob() {
    env.VSCODE_EXTENSIONS_DEV_JOB_RESULT = build(
        wait: true,
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/vscode-extensions-dev",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'UPLOAD_ASSET_URL', value: "${params.UPLOAD_ASSET_URL}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def vscodeExtensionsProdBuildJob() {
    env.VSCODE_EXTENSIONS_PROD_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/vscode-extensions-prod",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'UPLOAD_ASSET_URL', value: "${params.UPLOAD_ASSET_URL}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def npmPackagesBuildJob() {
    env.NPM_PACKAGES_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/npm-packages",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def knPluginWorkflowBuildJob() {
    env.KN_PLUGIN_WORKFLOW_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kn-plugin-workflow",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'UPLOAD_ASSET_URL', value: "${params.UPLOAD_ASSET_URL}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def serverlessLogicWebToolsSwfBuilderImageBuildJob() {
    env.SERVERLESS_LOGIC_WEB_TOOLS_SWF_BUILDER_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/serverless-logic-web-tools-swf-builder-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def serverlessLogicWebToolsSwfDevModeImageBuildJob() {
    env.SERVERLESS_LOGIC_WEB_TOOLS_SWF_DEV_MODE_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/serverless-logic-web-tools-swf-dev-mode-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def serverlessLogicWebToolsBaseBuilderImageBuildJob() {
    env.SERVERLESS_LOGIC_WEB_TOOLS_BASE_BUILDER_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/serverless-logic-web-tools-base-builder-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def dashbuilderViewerImageBuildJob() {
    env.DASHBUILDER_VIEWER_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/dashbuilder-viewer-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def serverlessLogicWebToolsBuildJob() {
    env.SERVERLESS_LOGIC_WEB_TOOLS_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/serverless-logic-web-tools",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoManagementConsoleBuildJob() {
    env.KOGITO_MANAGEMENT_CONSOLE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-management-console",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoSwfBuilderBuildJob() {
    env.KOGITO_SWF_BUILDER_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-swf-builder",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoSwfDevmodeBuildJob() {
    env.KOGITO_SWF_DEVMODE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-swf-devmode",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoServerlessOperatorBuildJob() {
    env.KOGITO_SERVERLESS_OPERATOR_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-serverless-operator",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def jbpmQuarkusDevuiBuildJob() {
    env.JBPM_QUARKUS_DEVUI_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/jbpm-quarkus-devui",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}")
        ]
    ).result
}

def sonataflowQuarkusDevuiBuildJob() {
    env.SONATAFLOW_QUARKUS_DEVUI_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/sonataflow-quarkus-devui",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def sonataflowManagementConsoleBuildJob() {
    env.SONATAFLOW_MANAGEMENT_CONSOLE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/sonataflow-management-console",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def devDeploymentBaseImageBuildJob() {
    env.DEV_DEPLOYMENT_BASE_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/dev-deployment-base-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def devDeploymentDmnFormWebappImageBuildJob() {
    env.DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/dev-deployment-dmn-form-webapp-image",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def extendedServicesBuildJob() {
    env.EXTENDED_SERVICES_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/extended-services",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'UPLOAD_ASSET_URL', value: "${params.UPLOAD_ASSET_URL}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def onlineEditorBuildJob() {
    env.ONLINE_EDITOR_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/online-editor",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def chromeExtensionsBuildJob() {
    env.CHROME_EXTENSIONS_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/chrome-extensions",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'UPLOAD_ASSET_URL', value: "${params.UPLOAD_ASSET_URL}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def standaloneEditorsCdnBuildJob() {
    env.STANDALONE_EDITORS_CDN_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/standalone-editors-cdn",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kieSandboxExtendedServicesImageBuildJob() {
    env.KIE_SANDBOX_EXTENDED_SERVICES_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kie-sandbox-extended-services",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
    env.KIE_SANDBOX_EXTENDED_SERVICES_URL = openShiftUtils.getAppRoute("${env.OPENSHIFT_NAMESPACE}", 'kie-sandbox-extended-services', "${pipelineVars.openshiftCredentialsId}")
}

def corsProxyImageBuildJob() {
    env.CORS_PROXY_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/cors-proxy",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
    env.KIE_SANDBOX_CORS_PROXY_URL = openShiftUtils.getAppRoute("${env.OPENSHIFT_NAMESPACE}", 'cors-proxy', "${pipelineVars.openshiftCredentialsId}")
}

def kieSandboxImageBuildJob() {
    env.KIE_SANDBOX_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kie-sandbox",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'KIE_SANDBOX_EXTENDED_SERVICES_URL', value: "${env.KIE_SANDBOX_EXTENDED_SERVICES_URL}"),
            string(name: 'KIE_SANDBOX_CORS_PROXY_URL', value: "${env.KIE_SANDBOX_CORS_PROXY_URL}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
    env.KIE_SANDBOX_URL = openShiftUtils.getAppRoute("${env.OPENSHIFT_NAMESPACE}", 'kie-sandbox', "${pipelineVars.openshiftCredentialsId}")
}

def kieSandboxAcceleratorQuarkusBuildJob() {
    env.KIE_SANDBOX_IMAGE_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kie-sandbox-accelerator-quarkus",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
    env.KIE_SANDBOX_URL = openShiftUtils.getAppRoute("${env.OPENSHIFT_NAMESPACE}", 'kie-sandbox', "${pipelineVars.openshiftCredentialsId}")
}

def kieSandboxHelmChartBuildJob() {
    env.KIE_SANDBOX_HELM_CHART_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kie-sandbox-helm-chart",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def runtimeToolsConsolesHelmChartBuildJob() {
    env.RUNTIME_TOOLS_CONSOLES_HELM_CHART_JOB_RESULT = build(
        wait: true,
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/runtime-tools-consoles-helm-chart",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}

def kogitoDbMigratorToolBuildJob() {
    env.KOGITO_DB_MIGRATOR_TOOL_JOB_RESULT = build(
        job: "KIE/kie-tools/${params.PIPELINE_PATH}/individual-release-artifacts-jobs/kogito-db-migrator-tool",
        parameters: [
            booleanParam(name: 'DRY_RUN', value: "${params.DRY_RUN}"),
            string(name: 'BASE_REF', value: "${params.BASE_REF}"),
            string(name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
            string(name: 'RELEASE_CANDIDATE_VERSION', value: "${params.RELEASE_CANDIDATE_VERSION}"),
            string(name: 'PIPELINE_PATH', value: "${params.PIPELINE_PATH}")
        ]
    ).result
}
