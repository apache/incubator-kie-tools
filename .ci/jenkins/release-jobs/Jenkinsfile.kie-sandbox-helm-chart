/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:10.1.999'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    parameters {
        booleanParam(description: 'Dry run', name: 'DRY_RUN', defaultValue: true)
        string(description: 'Release Version', name: 'RELEASE_VERSION', defaultValue: '0.0.0')
        string(description: 'Base Ref', name: 'BASE_REF')
        string(description: 'Release Candidate Version', name: 'RELEASE_CANDIDATE_VERSION', defaultValue: '')
        string(name: 'PIPELINE_PATH', description: 'Path to run the pipeline')
    }

    environment {
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'
        KIE_TOOLS_BUILD__buildContainerImages = 'true'

        KIE_SANDBOX_HELM_CHART__registry = 'docker.io'
        KIE_SANDBOX_HELM_CHART__account = 'apache'
        KIE_SANDBOX_HELM_CHART__name = 'incubator-kie-sandbox-helm-chart'
        KIE_SANDBOX_HELM_CHART__tag = "${params.RELEASE_VERSION}"

        RELEASE_ARTIFACTS_DIR = "${WORKSPACE}/release-artifacts"

        DOCKER_CONFIG = "${WORKSPACE}/.docker"

        PNPM_FILTER_STRING = '-F @kie-tools/kie-sandbox-helm-chart...'

        MAVEN_ARGS = "-B -s ${WORKSPACE}/kie-settings.xml -Dmaven.repo.local=${WORKSPACE}/.maven"
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                    helmUtils = load '.ci/jenkins/shared-scripts/helmUtils.groovy'
                    dockerUtils = load '.ci/jenkins/shared-scripts/dockerUtils.groovy'
                    releaseUtils = load '.ci/jenkins/shared-scripts/releaseUtils.groovy'
                }
            }
        }

        stage('Start required services for build and tests (DinD, Xvfb, Fluxbox)') {
            steps {
                script {
                    buildUtils.startRequiredServices()
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Load upstream images') {
            when {
                expression { !params.DRY_RUN && params.RELEASE_CANDIDATE_VERSION != '' }
            }
            steps {
                script {
                    upstreamReleaseArtifactsDir = "${WORKSPACE}/upstream-release-artifacts"
                    releaseUtils.downloadReleaseArtifacts("${pipelineVars.asfReleaseStagingRepository}", "${upstreamReleaseArtifactsDir}", "${params.RELEASE_CANDIDATE_VERSION}")
                    upstreamImagesArtifacts = releaseUtils.getUpstreamImagesArtifactsList("${upstreamReleaseArtifactsDir}", "${params.RELEASE_CANDIDATE_VERSION}")
                    dockerUtils.loadImages(upstreamImagesArtifacts as String[])
                }
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BASE_REF}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Setup PNPM') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm("${pipelineVars.mavenSettingsReleaseConfigFileId}")
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap(env.PNPM_FILTER_STRING, env.MAVEN_ARGS)
                    }
                }
            }
        }

        stage('Update project, kogito and stream name version') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmUpdateProjectVersion(params.RELEASE_VERSION, env.MAVEN_ARGS)
                        buildUtils.pnpmUpdateKogitoVersion(params.RELEASE_VERSION, params.RELEASE_VERSION, env.MAVEN_ARGS)
                        buildUtils.pnpmUpdateStreamName(params.RELEASE_VERSION, env.MAVEN_ARGS)
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBuild(env.PNPM_FILTER_STRING, env.MAVEN_ARGS)
                    }
                }
            }
        }

        stage('Push kie-sandbox-helm-chart to Docker Hub') {
            when {
                expression { !params.DRY_RUN && params.RELEASE_CANDIDATE_VERSION == ''  }
            }
            steps {
                dir('kie-tools') {
                    script {
                        helmUtils.pushChartToRegistry(
                            "${env.KIE_SANDBOX_HELM_CHART__registry}",
                            "${env.KIE_SANDBOX_HELM_CHART__account}",
                            "packages/kie-sandbox-helm-chart/dist/${env.KIE_SANDBOX_HELM_CHART__name}-${env.KIE_SANDBOX_HELM_CHART__tag}.tgz",
                            "${pipelineVars.dockerHubUserCredentialsId}",
                            "${pipelineVars.dockerHubTokenCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Setup release candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.RELEASE_CANDIDATE_VERSION != '' }
            }
            steps {
                script {
                    env.RELEASE_TAR_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-sandbox-helm-chart.tar.gz"

                    sh """#!/bin/bash -el
                    mkdir ${env.RELEASE_ARTIFACTS_DIR}
                    cp "kie-tools/packages/kie-sandbox-helm-chart/dist/${env.KIE_SANDBOX_HELM_CHART__name}-${env.KIE_SANDBOX_HELM_CHART__tag}.tgz" "${env.RELEASE_ARTIFACTS_DIR}/${RELEASE_TAR_FILE}"
                    """.trim()
                }
            }
        }

        stage('Sign artifacts for Apache release') {
            when {
                expression { !params.DRY_RUN && params.RELEASE_CANDIDATE_VERSION != '' }
            }
            steps {
                dir("${env.RELEASE_ARTIFACTS_DIR}") {
                    script {
                        releaseUtils.setupSigningKey("${pipelineVars.asfReleaseGPGKeyCredentialsId}")
                        releaseUtils.signArtifact("${RELEASE_TAR_FILE}")
                    }
                }
            }
        }

        stage('Publish Release Candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.RELEASE_CANDIDATE_VERSION != '' }
            }
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${env.RELEASE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${pipelineVars.asfReleaseSVNStagingCredentialsId}"
                    )
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}
