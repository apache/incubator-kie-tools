/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:10.1.999'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    parameters {
        booleanParam(name: 'DRY_RUN', description: 'Dry run', defaultValue: true)
        string(name: 'RELEASE_VERSION', description: 'Release Version', defaultValue: '0.0.0')
        string(name: 'BASE_REF', description: 'GitHub Base Ref (tag or branch)')
        string(name: 'RELEASE_CANDIDATE_VERSION', description: 'Release Candidate Version', defaultValue: '')
        string(name: 'PIPELINE_PATH', description: 'Path to run the pipeline')
    }

    environment {
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'
        KIE_TOOLS_BUILD__buildContainerImages = 'true'

        KOGITO_BASE_BUILDER_IMAGE__registry = 'docker.io'
        KOGITO_BASE_BUILDER_IMAGE__account = 'apache'
        KOGITO_BASE_BUILDER_IMAGE__name = 'incubator-kie-kogito-base-builder'
        KOGITO_BASE_BUILDER_IMAGE__buildTag = "${params.RELEASE_VERSION}"

        RELEASE_ARTIFACTS_DIR = "${WORKSPACE}/release-artifacts"

        DOCKER_CONFIG = "${WORKSPACE}/.docker"

        PNPM_FILTER_STRING = '-F @kie-tools/dev-deployment-base-image...'

        MAVEN_ARGS = "-Dmaven.repo.local=${WORKSPACE}/.maven"
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                    dockerUtils = load '.ci/jenkins/shared-scripts/dockerUtils.groovy'
                    releaseUtils = load '.ci/jenkins/shared-scripts/releaseUtils.groovy'
                }
            }
        }

        stage('Start required services for build and tests (DinD, Xvfb, Fluxbox)') {
            steps {
                script {
                    buildUtils.startRequiredServices()
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BASE_REF}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Setup PNPM') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm()
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap(env.PNPM_FILTER_STRING, env.MAVEN_ARGS)
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBuild(env.PNPM_FILTER_STRING, env.MAVEN_ARGS)
                    }
                }
            }
        }

        stage('Setup release candidate artifacts') {
            steps {
                script {
                    env.RELEASE_IMAGE_TAR_FILE = "incubator-kie-${params.RELEASE_CANDIDATE_VERSION}-sandbox-dev-deployment-base-image.tar.gz"

                    sh """#!/bin/bash -el
                    mkdir ${env.RELEASE_ARTIFACTS_DIR}
                    docker save "${env.DEV_DEPLOYMENT_BASE_IMAGE__registry}/${env.DEV_DEPLOYMENT_BASE_IMAGE__account}/${env.DEV_DEPLOYMENT_BASE_IMAGE__name}:${params.RELEASE_VERSION}" | gzip > "${env.RELEASE_ARTIFACTS_DIR}/${env.RELEASE_IMAGE_TAR_FILE}"
                    """.trim()
                }
            }
        }

        stage('Sign artifact for Apache release') {
            steps {
                dir("${env.RELEASE_ARTIFACTS_DIR}") {
                    script {
                        releaseUtils.setupSigningKey("${pipelineVars.asfReleaseGPGKeyCredentialsId}")
                        releaseUtils.signArtifact("${env.RELEASE_IMAGE_TAR_FILE}")
                    }
                }
            }
        }

        stage('Publish Release Candidate artifacts') {
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${env.RELEASE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${pipelineVars.asfReleaseSVNStagingCredentialsId}"
                    )
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}
