/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:10.0.999'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    parameters {
        booleanParam(description: 'Dry run', name: 'DRY_RUN', defaultValue: true)
        string(description: 'Base Ref', name: 'BASE_REF', defaultValue: '')
        string(description: 'Upload Asset Url', name: 'UPLOAD_ASSET_URL', defaultValue: '')
        string(description: 'Release Version', name: 'RELEASE_VERSION')
        string(description: 'Release Candidate Version', name: 'RELEASE_CANDIDATE_VERSION', defaultValue: '')
        choice(description: 'Job Type', name: 'JOB_TYPE', choices: ['release-candidate', 'release-promote'])
    }

    environment {
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'
        KIE_TOOLS_BUILD__buildContainerImages = 'true'

        RELEASE_ARTIFACTS_DIR = "${WORKSPACE}/release-artifacts"
        RELEASE_CANDIDATE_ARTIFACTS_DIR = "${WORKSPACE}/release-candidate-artifacts"
        LEGAL_FILES_DIR = "${WORKSPACE}/legal-files"

        DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-sandbox-dev-deployment-upload-service-macOS-arm64.tar.gz"
        DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-sandbox-dev-deployment-upload-service-macOS-x86.tar.gz"
        DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-sandbox-dev-deployment-upload-service-linux-x86.tar.gz"
        DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-sandbox-dev-deployment-upload-service-windows-x86.tar.gz"

        PNPM_FILTER_STRING = '-F @kie-tools/dev-deployment-upload-service...'
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                    releaseUtils = load '.ci/jenkins/shared-scripts/releaseUtils.groovy'
                }
            }
        }

        stage('Initialize') {
            steps {
                script {
                    buildUtils.startRequiredServices()

                    cleanWs(deleteDirs: true, disableDeferredWipeout: true)

                    if (params.JOB_TYPE == 'release-candidate') {
                        currentBuild.displayName = 'Release Candidate: ' + params.RELEASE_CANDIDATE_VERSION
                    } else {
                        currentBuild.displayName = 'Release Promotion: ' + params.RELEASE_CANDIDATE_VERSION + ' > ' + params.RELEASE_VERSION
                    }
                }
            }
        }

        stage('Checkout kie-tools') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BASE_REF}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Copy legal files') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        releaseUtils.copyLegalFiles("${LEGAL_FILES_DIR}")
                    }
                }
            }
        }

        stage('Setup PNPM') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm("${pipelineVars.mavenSettingsConfigFileId}")
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap("${PNPM_FILTER_STRING}")
                    }
                }
            }
        }

        stage('Build') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBuild("${PNPM_FILTER_STRING}")
                    }
                }
            }
        }

        stage('Setup release candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                script {
                    sh """#!/bin/bash -el
                    mkdir ${RELEASE_CANDIDATE_ARTIFACTS_DIR}
                    cp "kie-tools/packages/dev-deployment-upload-service/dist/dev-deployment-upload-service-darwin-amd64-${params.RELEASE_VERSION}.tar.gz" "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE}"
                    cp "kie-tools/packages/dev-deployment-upload-service/dist/dev-deployment-upload-service-darwin-arm64-${params.RELEASE_VERSION}.tar.gz" "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE}"
                    cp "kie-tools/packages/dev-deployment-upload-service/dist/dev-deployment-upload-service-linux-amd64-${params.RELEASE_VERSION}.tar.gz" "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE}"
                    cp "kie-tools/packages/dev-deployment-upload-service/dist/dev-deployment-upload-service-windows-amd64-${params.RELEASE_VERSION}.tar.gz" "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE}"
                    """.trim()
                    releaseUtils.addLegalfilesToTarGzFile("${RELEASE_CANDIDATE_ARTIFACTS_DIR}", "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE}", "${LEGAL_FILES_DIR}")
                    releaseUtils.addLegalfilesToTarGzFile("${RELEASE_CANDIDATE_ARTIFACTS_DIR}", "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE}", "${LEGAL_FILES_DIR}")
                    releaseUtils.addLegalfilesToTarGzFile("${RELEASE_CANDIDATE_ARTIFACTS_DIR}", "${DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE}", "${LEGAL_FILES_DIR}")
                    releaseUtils.addLegalfilesToTarGzFile("${RELEASE_CANDIDATE_ARTIFACTS_DIR}", "${DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE}", "${LEGAL_FILES_DIR}")
                }
            }
        }

        stage('Sign release candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir("${RELEASE_CANDIDATE_ARTIFACTS_DIR}") {
                    script {
                        releaseUtils.setupSigningKey("${pipelineVars.asfReleaseGPGKeyCredentialsId}")
                        releaseUtils.signArtifact("${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE}")
                        releaseUtils.signArtifact("${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE}")
                        releaseUtils.signArtifact("${DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE}")
                        releaseUtils.signArtifact("${DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE}")
                    }
                }
            }
        }

        stage('Push release candidate artifacts to the staging SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${RELEASE_CANDIDATE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${pipelineVars.asfReleaseSVNStagingCredentialsId}"
                    )
                }
            }
        }

        stage('Download release candidate artifacts from the staging SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    releaseUtils.downloadReleaseArtifacts(
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${RELEASE_ARTIFACTS_DIR}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE}",
                        "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE}",
                        "${DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE}",
                        "${DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE}"
                    )
                }
            }
        }

        stage('Push release artifacts to the release SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${RELEASE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseRepository}",
                        "${params.RELEASE_VERSION}",
                        "${pipelineVars.asfReleaseSVNCredentialsId}"
                    )
                }
            }
        }

        stage('Upload Dev Deployment Upload Service assets') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                dir("${RELEASE_ARTIFACTS_DIR}") {
                    script {
                        // macOS - arm64 - tar.gz
                        githubUtils.uploadReleaseAsset(
                            "${params.UPLOAD_ASSET_URL}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE}",
                            'application/tar+gzip',
                            "${pipelineVars.asfGithubPushCredentialsId}"
                        )
                        // macOS - arm64 - tar.gz.sha512
                        githubUtils.uploadReleaseAsset(
                            "${params.UPLOAD_ASSET_URL}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE}.sha512",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_ARM64_RELEASE_FILE}.sha512",
                            'text/plain',
                            "${pipelineVars.asfGithubPushCredentialsId}"
                        )
                        // macOS - amd64 - tar.gz
                        githubUtils.uploadReleaseAsset(
                            "${params.UPLOAD_ASSET_URL}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE}",
                            'application/tar+gzip',
                            "${pipelineVars.asfGithubPushCredentialsId}"
                        )
                        // macOS - amd64 - tar.gz.sha512
                        githubUtils.uploadReleaseAsset(
                            "${params.UPLOAD_ASSET_URL}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE}.sha512",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_MAC_X86_RELEASE_FILE}.sha512",
                            'text/plain',
                            "${pipelineVars.asfGithubPushCredentialsId}"
                        )
                        // linux - amd64 - tar.gz
                        githubUtils.uploadReleaseAsset(
                            "${params.UPLOAD_ASSET_URL}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE}",
                            'application/tar+gzip',
                            "${pipelineVars.asfGithubPushCredentialsId}"
                        )
                        // linux - amd64 - tar.gz.sha512
                        githubUtils.uploadReleaseAsset(
                            "${params.UPLOAD_ASSET_URL}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE}.sha512",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_LINUX_X86_RELEASE_FILE}.sha512",
                            'text/plain',
                            "${pipelineVars.asfGithubPushCredentialsId}"
                        )
                        // windows - amd64 - tar.gz
                        githubUtils.uploadReleaseAsset(
                            "${params.UPLOAD_ASSET_URL}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE}",
                            'application/tar+gzip',
                            "${pipelineVars.asfGithubPushCredentialsId}"
                        )
                        // windows - amd64 - tar.gz.sha512
                        githubUtils.uploadReleaseAsset(
                            "${params.UPLOAD_ASSET_URL}",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE}.sha512",
                            "${DEV_DEPLOYMENT_UPLOAD_SERVICE_WINDOWS_X86_RELEASE_FILE}.sha512",
                            'text/plain',
                            "${pipelineVars.asfGithubPushCredentialsId}"
                        )
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'release-candidate-artifacts/*,release-artifacts/*', allowEmptyArchive: true
            cleanWs(deleteDirs: true)
        }
    }
}
