/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:10.0.999'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    parameters {
        booleanParam(description: 'Dry run', name: 'DRY_RUN', defaultValue: true)
        string(description: 'Base Ref', name: 'BASE_REF', defaultValue: '')
        string(description: 'Upload Asset Url', name: 'UPLOAD_ASSET_URL', defaultValue: '')
        string(description: 'Release Version', name: 'RELEASE_VERSION')
        string(description: 'Release Candidate Version', name: 'RELEASE_CANDIDATE_VERSION', defaultValue: '')
        choice(description: 'Job Type', name: 'JOB_TYPE', choices: ['release-candidate', 'release-promote'], defaultValue: 'release-candidate')
    }

    environment {
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'
        KIE_TOOLS_BUILD__buildContainerImages = 'true'

        CHROME_EXTENSION__routerTargetOrigin = 'https://apache.github.io'
        CHROME_EXTENSION__routerRelativePath = "incubator-kie-kogito-online/chrome-extension/${params.RELEASE_VERSION}"
        CHROME_EXTENSION__manifestFile = 'manifest.prod.json'
        CHROME_EXTENSION__onlineEditorUrl = 'https://apache.github.io/incubator-kie-kogito-online'
        SWF_CHROME_EXTENSION__routerTargetOrigin = 'https://apache.github.io'
        SWF_CHROME_EXTENSION__routerRelativePath = "kogito-online/swf-chrome-extension/${params.RELEASE_VERSION}"
        SWF_CHROME_EXTENSION__manifestFile = 'manifest.prod.json'

        RELEASE_ARTIFACTS_DIR = "${WORKSPACE}/release-artifacts"
        RELEASE_CANDIDATE_ARTIFACTS_DIR = "${WORKSPACE}/release-candidate-artifacts"
        LEGAL_FILES_DIR = "${WORKSPACE}/legal-files"

        CHROME_EXTENSION_RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-business-automation-chrome-extension.zip"
        SWF_CHROME_EXTENSION_RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-sonataflow-chrome-extension.zip"
        CHROME_EXTENSION_EDITORS_RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-business-automation-chrome-extension-editors.zip"
        SWF_CHROME_EXTENSION_EDITORS_RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-sonataflow-chrome-extension-editors.zip"

        PNPM_FILTER_STRING = '-F chrome-extension-pack-kogito-kie-editors... -F chrome-extension-serverless-workflow-editor...'
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                    chromeStoreUtils = load '.ci/jenkins/shared-scripts/chromeStoreUtils.groovy'
                    releaseUtils = load '.ci/jenkins/shared-scripts/releaseUtils.groovy'
                    zipUtils = load '.ci/jenkins/shared-scripts/zipUtils.groovy'
                }
            }
        }

        stage('Initialize') {
            steps {
                script {
                    buildUtils.startRequiredServices()

                    cleanWs(deleteDirs: true, disableDeferredWipeout: true)

                    if (params.JOB_TYPE == 'release-candidate') {
                        currentBuild.displayName = 'Release Candidate: ' + params.RELEASE_CANDIDATE_VERSION
                    } else {
                        currentBuild.displayName = 'Release Promotion: ' + params.RELEASE_CANDIDATE_VERSION + ' > ' + params.RELEASE_VERSION
                    }
                }
            }
        }

        stage('Checkout kie-tools') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BASE_REF}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Copy legal files') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        releaseUtils.copyLegalFiles("${LEGAL_FILES_DIR}")
                    }
                }
            }
        }

        stage('Setup PNPM') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm("${pipelineVars.mavenSettingsConfigFileId}")
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap("${PNPM_FILTER_STRING}")
                    }
                }
            }
        }

        stage('Build') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBuild("${PNPM_FILTER_STRING}")
                    }
                }
            }
        }

        stage('Setup release candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                script {
                    sh """#!/bin/bash -el
                    mkdir -p ${RELEASE_CANDIDATE_ARTIFACTS_DIR}/{business-automation-chrome-extension-editors,sonataflow-chrome-extension-editors}
                    cp -r kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/{fonts,*-envelope.*} "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/business-automation-chrome-extension-editors"
                    cp -r kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/{fonts,diagram,*-envelope.*,*.bundle.js,*.worker.js} "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/sonataflow-chrome-extension-editors"
                    cp "kie-tools/packages/chrome-extension-pack-kogito-kie-editors/dist/chrome_extension_kogito_kie_editors_${params.RELEASE_VERSION}.zip" "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${CHROME_EXTENCHROME_EXTENSION_RELEASE_FILE}"
                    cp "kie-tools/packages/chrome-extension-serverless-workflow-editor/dist/chrome_extension_serverless_workflow_editor_${params.RELEASE_VERSION}.zip" "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${SWF_CHROME_EXTENSION_RELEASE_FILE}"
                    cp "${LEGAL_FILES_DIR}/*" ${RELEASE_CANDIDATE_ARTIFACTS_DIR}/business-automation-chrome-extension-editors
                    cp "${LEGAL_FILES_DIR}/*" ${RELEASE_CANDIDATE_ARTIFACTS_DIR}/sonataflow-chrome-extension-editors
                    cd "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/business-automation-chrome-extension-editors" && zip -r "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${CHROME_EXTENSION_EDITORS_RELEASE_FILE}" .
                    cd "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/sonataflow-chrome-extension-editors" && zip -r "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${SWF_CHROME_EXTENSION_EDITORS_RELEASE_FILE}" .
                    rm -rf "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/business-automation-chrome-extension-editors"
                    rm -rf "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/sonataflow-chrome-extension-editors"
                    """.trim()
                }
            }
        }

        stage('Sign release candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir("${RELEASE_CANDIDATE_ARTIFACTS_DIR}") {
                    script {
                        releaseUtils.setupSigningKey("${pipelineVars.asfReleaseGPGKeyCredentialsId}")
                        releaseUtils.signArtifact("${CHROME_EXTENCHROME_EXTENSION_RELEASE_FILE}")
                        releaseUtils.signArtifact("${SWF_CHROME_EXTENSION_RELEASE_FILE}")
                        releaseUtils.signArtifact("${CHROME_EXTENSION_EDITORS_RELEASE_FILE}")
                        releaseUtils.signArtifact("${SWF_CHROME_EXTENSION_EDITORS_RELEASE_FILE}")
                    }
                }
            }
        }

        stage('Push release candidate artifacts to the staging SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${RELEASE_CANDIDATE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${pipelineVars.asfReleaseSVNStagingCredentialsId}"
                    )
                }
            }
        }

        stage('Download release candidate artifacts from the staging SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    releaseUtils.downloadReleaseArtifacts(
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${RELEASE_ARTIFACTS_DIR}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${CHROME_EXTENCHROME_EXTENSION_RELEASE_FILE}",
                        "${SWF_CHROME_EXTENSION_RELEASE_FILE}",
                        "${CHROME_EXTENSION_EDITORS_RELEASE_FILE}",
                        "${SWF_CHROME_EXTENSION_EDITORS_RELEASE_FILE}"
                    )
                }
            }
        }

        stage('Push release artifacts to the release SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${RELEASE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseRepository}",
                        "${params.RELEASE_VERSION}",
                        "${pipelineVars.asfReleaseSVNCredentialsId}"
                    )
                }
            }
        }

        stage('Upload Chrome Extension for Kogito KIE Editors') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    githubUtils.uploadReleaseAsset(
                        "${params.UPLOAD_ASSET_URL}",
                        "${CHROME_EXTENSION_RELEASE_FILE}",
                        "${CHROME_EXTENSION_RELEASE_FILE}",
                        'application/zip',
                        "${pipelineVars.asfGithubPushCredentialsId}"
                    )
                }
            }
        }

        stage('Checkout kogito-online') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                dir('kogito-online') {
                    script {
                        githubUtils.checkoutRepo(
                            'http://github.com/apache/incubator-kie-kogito-online.git',
                            'gh-pages',
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Deploy Chrome Extension for KIE Editors to GitHub Pages (kogito-online)') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                dir('kogito-online') {
                    script {
                        EDITORS_DIR = "editors/${params.RELEASE_VERSION}"
                        CHROME_EXTENSION_DIR = "chrome-extension/${params.RELEASE_VERSION}"

                        sh """#!/bin/bash -el
                        git config user.email asf-ci-kie@jenkins.kie.apache.org
                        git config user.name asf-ci-kie

                        git checkout gh-pages

                        echo "Copy Chrome Extension resources"
                        rm -rf ${CHROME_EXTENSION_DIR}
                        mkdir -p ${CHROME_EXTENSION_DIR}
                        unzip ${RELEASE_ARTIFACTS_DIR}/${CHROME_EXTENSION_EDITORS_RELEASE_FILE} -d ${CHROME_EXTENSION_DIR}
                        ln -s ../../${EDITORS_DIR}/bpmn ${CHROME_EXTENSION_DIR}/bpmn
                        ln -s ../../${EDITORS_DIR}/dmn ${CHROME_EXTENSION_DIR}/dmn
                        ln -s ../../${EDITORS_DIR}/scesim ${CHROME_EXTENSION_DIR}/scesim

                        echo "Commit changes and push"
                        git add .
                        git commit -m "Deploy ${params.RELEASE_VERSION} (Chrome Extension for Kogito KIE Editors)"
                        """.trim()

                        githubUtils.pushObject('origin', 'gh-pages', "${pipelineVars.asfGithubPushCredentialsId}")
                    }
                }
            }
        }

        stage('Upload Chrome Extension for KIE Editors to the Chrome Store') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    env.CHROME_EXTESION_KIE_EDITORS_UPLOAD_STATUS = chromeStoreUtils.uploadExtension(
                        "${pipelineVars.chromeStoreCredentialsId}",
                        "${pipelineVars.chromeStoreRefreshTokenCredentialsId}",
                        "${CHROME_EXTENSION_RELEASE_FILE}",
                        "${pipelineVars.chromeExtensionIdCredentialsId}"
                    )
                }
            }
        }

        stage('Check Upload - Chrome Extension for KIE Editors') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                sh """#!/bin/bash -el
                [[ "${CHROME_EXTESION_KIE_EDITORS_UPLOAD_STATUS}" == "SUCCESS" ]]"
                """.trim()
            }
        }

        stage('Publish Chrome Extension for KIE Editors for users') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    env.CHROME_EXTESION_KIE_EDITORS_PUBLISH_STATUS = chromeStoreUtils.publishExtension(
                        "${pipelineVars.chromeStoreCredentialsId}",
                        "${pipelineVars.chromeStoreRefreshTokenCredentialsId}",
                        "${pipelineVars.chromeExtensionIdCredentialsId}"
                    )
                }
            }
        }

        stage('Check Publish - Chrome Extension for KIE Editors') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                sh """#!/bin/bash -el
                [[ "${CHROME_EXTESION_KIE_EDITORS_PUBLISH_STATUS}" == "OK" ]] || [[ "${CHROME_EXTESION_KIE_EDITORS_PUBLISH_STATUS}" == "PUBLISHED_WITH_FRICTION_WARNING" ]]
                """.trim()
            }
        }

        stage('Upload Chrome Extension for Serverless Workflow Editor') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    githubUtils.uploadReleaseAsset(
                        "${params.UPLOAD_ASSET_URL}",
                        "${SWF_CHROME_EXTENSION_RELEASE_FILE}",
                        "${SWF_CHROME_EXTENSION_RELEASE_FILE}",
                        'application/zip',
                        "${pipelineVars.asfGithubPushCredentialsId}"
                    )
                }
            }
        }

        stage('Deploy Chrome Extension for Serverless Workflow Editor to GitHub Pages (kogito-online)') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                dir('kogito-online') {
                    script {
                        DEPLOYMENT_DIR = "swf-chrome-extension/${params.RELEASE_VERSION}"

                        sh """#!/bin/bash -el
                        git config user.email asf-ci-kie@jenkins.kie.apache.org
                        git config user.name asf-ci-kie

                        git checkout gh-pages

                        echo "Copy Chrome Extension resources"
                        rm -rf ${DEPLOYMENT_DIR}
                        mkdir -p ${DEPLOYMENT_DIR}
                        unzip ${RELEASE_ARTIFACTS_DIR}/${SWF_CHROME_EXTENSION_EDITORS_RELEASE_FILE} -d ${DEPLOYMENT_DIR}

                        echo "Commit changes and push"
                        git add .
                        git commit -m "Deploy ${params.RELEASE_VERSION} (Chrome Extension for Serverless Workflow Editor)"
                        """.trim()

                        githubUtils.pushObject('origin', 'gh-pages', "${pipelineVars.asfGithubPushCredentialsId}")
                    }
                }
            }
        }

        stage('Upload Chrome Extension for Serverless Workflow Editor to the Chrome Store') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    env.CHROME_EXTESION_SERVERLESS_WORKFLOW_EDITOR_UPLOAD_STATUS = chromeStoreUtils.uploadExtension(
                        "${pipelineVars.chromeStoreCredentialsId}",
                        "${pipelineVars.chromeStoreRefreshTokenCredentialsId}",
                        "${SWF_CHROME_EXTENSION_RELEASE_FILE}",
                        "${pipelineVars.swfChromeExtensionIdCredentialsId}"
                    )
                }
            }
        }

        stage('Check Upload - Chrome Extension for Serverless Workflow Editor') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                sh """#!/bin/bash -el
                [[ "${CHROME_EXTESION_SERVERLESS_WORKFLOW_EDITOR_UPLOAD_STATUS}" == "SUCCESS" ]]
                """.trim()
            }
        }

        stage('Publish Chrome Extension for Serverless Workflow Editor for users') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    env.CHROME_EXTESION_SERVERLESS_WORKFLOW_EDITOR_PUBLISH_STATUS = chromeStoreUtils.publishExtension(
                        "${pipelineVars.chromeStoreCredentialsId}",
                        "${pipelineVars.chromeStoreRefreshTokenCredentialsId}",
                        "${pipelineVars.swfChromeExtensionIdCredentialsId}"
                    )
                }
            }
        }

        stage('Check Publish - Chrome Extension for Serverless Workflow Editor') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                sh """#!/bin/bash -el
                [[ "${CHROME_EXTESION_SERVERLESS_WORKFLOW_EDITOR_PUBLISH_STATUS}" == "OK" ]] || [[ "${CHROME_EXTESION_SERVERLESS_WORKFLOW_EDITOR_PUBLISH_STATUS}" == "PUBLISHED_WITH_FRICTION_WARNING" ]]
                """.trim()
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/*,${RELEASE_ARTIFACTS_DIR}/*", allowEmptyArchive: true
            cleanWs(deleteDirs: true)
        }
    }
}
