/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'quay.io/kie-tools/kie-tools-ci-build:latest'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    parameters {
        booleanParam(description: 'Dry run', name: 'DRY_RUN', defaultValue: true)
        string(description: 'Tag', name: 'TAG', defaultValue: '0.0.0')
        string(description: 'Base Ref', name: 'BASE_REF')
    }

    environment {
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'
        KIE_TOOLS_BUILD__buildContainerImages = 'true'

        ONLINE_EDITOR__buildInfo = "${params.TAG}"
        ONLINE_EDITOR__extendedServicesDownloadUrlLinux = "https://github.com/apache/incubator-kie-tools/releases/download/${params.TAG}/kie_sandbox_extended_services_linux_${params.TAG}.tar.gz"
        ONLINE_EDITOR__extendedServicesDownloadUrlMacOs = "https://github.com/apache/incubator-kie-tools/releases/download/${params.TAG}/kie_sandbox_extended_services_macos_${params.TAG}.dmg"
        ONLINE_EDITOR__extendedServicesDownloadUrlWindows = "https://github.com/apache/incubator-kie-tools/releases/download/${params.TAG}/kie_sandbox_extended_services_windows_${params.TAG}.exe"
        ONLINE_EDITOR__extendedServicesCompatibleVersion = "${params.TAG}"
        ONLINE_EDITOR__devDeploymentBaseImageRegistry = 'quay.io'
        ONLINE_EDITOR__devDeploymentBaseImageAccount = 'kie-tools'
        ONLINE_EDITOR__devDeploymentBaseImageName = 'dev-deployment-base-image'
        ONLINE_EDITOR__devDeploymentBaseImageTag = "${params.TAG}"
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageRegistry = 'quay.io'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageAccount = 'kie-tools'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageName = 'dev-deployment-dmn-form-webapp-image'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageTag = "${params.TAG}"
        ONLINE_EDITOR__gtmId = 'GTM-PQGMKNW'
        ONLINE_EDITOR__corsProxyUrl = 'https://cors-proxy-kie-sandbox.rhba-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud'
        DEV_DEPLOYMENT_BASE_IMAGE__registry = 'quay.io'
        DEV_DEPLOYMENT_BASE_IMAGE__account = 'kie-tools'
        DEV_DEPLOYMENT_BASE_IMAGE__name = 'dev-deployment-base-image'
        DEV_DEPLOYMENT_BASE_IMAGE__buildTags = "latest ${params.TAG}"
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__registry = 'quay.io'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__account = 'kie-tools'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__name = 'dev-deployment-dmn-form-webapp-image'
        DEV_DEPLOYMENT_DMN_FORM_WEBAPP_IMAGE__buildTags = "latest ${params.TAG}"

        PNPM_FILTER_STRING = '-F @kie-tools/online-editor...'
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                }
            }
        }

        stage('Start required services for build and tests (DinD, Xvfb, Fluxbox)') {
            steps {
                script {
                    buildUtils.startRequiredServices()
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BASE_REF}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Checkout kogito-online') {
            steps {
                dir('kogito-online') {
                    script {
                        githubUtils.checkoutRepo(
                            'http://github.com/apache/incubator-kie-kogito-online.git',
                            'gh-pages',
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Setup PNPM') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm()
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap("${env.PNPM_FILTER_STRING}")
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBuild("${env.PNPM_FILTER_STRING}")
                    }
                }
            }
        }

        stage('Deploy to GitHub Pages (kogito-online)') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                dir('kogito-online') {
                    script {
                        EDITORS_DIR = "editors/${params.TAG}"

                        sh """#!/bin/bash -el
                        git config user.email asf-ci-kie@jenkins.kie.apache.org
                        git config user.name asf-ci-kie
                        
                        git checkout gh-pages

                        echo "Reset deployment dir"
                        shopt -s extglob
                        rm -rf -- !("dev"|"editors"|"standalone"|"chrome-extension"|"swf-chrome-extension"|".nojekyll"|"CNAME"|"0.23.0")

                        echo "Copy Editor resources"
                        rm -rf ${EDITORS_DIR}
                        mkdir -p ${EDITORS_DIR}
                        cp -RL ${WORKSPACE}/kie-tools/packages/stunner-editors/dist/dmn ${EDITORS_DIR}
                        cp -RL ${WORKSPACE}/kie-tools/packages/stunner-editors/dist/bpmn ${EDITORS_DIR}
                        cp -RL ${WORKSPACE}/kie-tools/packages/stunner-editors/dist/scesim ${EDITORS_DIR}
                        rm -rf ./editors/latest
                        ln -s ${params.TAG} ./editors/latest

                        echo "Copy Online Editor resources"
                        rm -rf ./gwt-editors
                        cp -r ${WORKSPACE}/kie-tools/packages/online-editor/dist/* .
                        rm -rf ./gwt-editors
                        ln -s ${EDITORS_DIR} gwt-editors

                        echo "Commit changes and push"
                        git add .
                        git commit -m "Deploy ${params.TAG} (Editors + Online Editor)"
                        """.trim()

                        githubUtils.pushObject('origin', 'gh-pages', "${pipelineVars.asfGithubPushCredentialsId}")
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}
