/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:main'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        timeout(time: 180, unit: 'MINUTES')
    }

    parameters {
        booleanParam(description: 'Dry run', name: 'DRY_RUN', defaultValue: true)
        string(description: 'Release Version', name: 'RELEASE_VERSION', defaultValue: '0.0.0')
        string(description: 'Base Ref', name: 'BASE_REF')
        string(description: 'Kie Sandbox Extendend Services Url', name: 'KIE_SANDBOX_EXTENDED_SERVICES_URL')
        string(description: 'Kie Sandbox Cors Proxy Url', name: 'KIE_SANDBOX_CORS_PROXY_URL')
        booleanParam(description: 'Release Candidate', name: 'RELEASE_CANDIDATE', defaultValue: false)
        string(description: 'Release Candidate Version', name: 'RELEASE_CANDIDATE_VERSION', defaultValue: '')
    }

    environment {
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'
        KIE_TOOLS_BUILD__buildContainerImages = 'true'

        OPENSHIFT_APP_NAME = 'kie-sandbox'
        OPENSHIFT_PART_OF = 'kie-sandbox-app'
        OPENSHIFT_NAMESPACE = 'kie-sandbox'

        KIE_SANDBOX_WEBAPP_IMAGE__imageRegistry = 'docker.io'
        KIE_SANDBOX_WEBAPP_IMAGE__imageAccount = 'apache'
        KIE_SANDBOX_WEBAPP_IMAGE__imageName = 'incubator-kie-sandbox-webapp'
        KIE_SANDBOX_WEBAPP_IMAGE__imageBuildTag = "${params.RELEASE_VERSION}"
        ONLINE_EDITOR__buildInfo = "${params.RELEASE_VERSION}"
        ONLINE_EDITOR__extendedServicesDownloadUrlLinux = "https://github.com/apache/incubator-kie-tools/releases/download/${params.RELEASE_VERSION}/kie_sandbox_extended_services_linux_${params.RELEASE_VERSION}.tar.gz"
        ONLINE_EDITOR__extendedServicesDownloadUrlMacOs = "https://github.com/apache/incubator-kie-tools/releases/download/${params.RELEASE_VERSION}/kie_sandbox_extended_services_macos_${params.RELEASE_VERSION}.dmg"
        ONLINE_EDITOR__extendedServicesDownloadUrlWindows = "https://github.com/apache/incubator-kie-tools/releases/download/${params.RELEASE_VERSION}/kie_sandbox_extended_services_windows_${params.RELEASE_VERSION}.exe"
        ONLINE_EDITOR__extendedServicesCompatibleVersion = "${params.RELEASE_VERSION}"
        ONLINE_EDITOR__devDeploymentBaseImageRegistry = 'docker.io'
        ONLINE_EDITOR__devDeploymentBaseImageAccount = 'apache'
        ONLINE_EDITOR__devDeploymentBaseImageName = 'incubator-kie-sandbox-dev-deployment-base'
        ONLINE_EDITOR__devDeploymentBaseImageTag = "${params.RELEASE_VERSION}"
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageRegistry = 'docker.io'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageAccount = 'apache'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageName = 'incubator-kie-sandbox-dev-deployment-dmn-form-webapp'
        ONLINE_EDITOR__devDeploymentDmnFormWebappImageTag = "${params.RELEASE_VERSION}"
        ONLINE_EDITOR__gtmId = 'GTM-PQGMKNW'

        RELEASE_ARTIFACTS_DIR = "${WORKSPACE}/release-artifacts"

        DOCKER_CONFIG = "${WORKSPACE}/.docker"

        PNPM_FILTER_STRING = '-F @kie-tools/kie-sandbox-webapp-image...'
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                    dockerUtils = load '.ci/jenkins/shared-scripts/dockerUtils.groovy'
                    openShiftUtils = load '.ci/jenkins/shared-scripts/openShiftUtils.groovy'
                    releaseUtils = load '.ci/jenkins/shared-scripts/releaseUtils.groovy'
                }
            }
        }

        stage('Start required services for build and tests (DinD, Xvfb, Fluxbox)') {
            steps {
                script {
                    buildUtils.startRequiredServices()
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Load upstream images') {
            steps {
                script {
                    upstreamReleaseArtifactsDir = "${WORKSPACE}/upstream-release-artifacts"
                    releaseUtils.downloadReleaseArtifacts("${upstreamReleaseArtifactsDir}", "${params.RELEASE_CANDIDATE_VERSION}")
                    dockerUtils.loadImages(releaseUtils.getUpstreamImagesArtifactsList("${upstreamReleaseArtifactsDir}", "${params.RELEASE_CANDIDATE_VERSION}"))
                }
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BASE_REF}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Setup PNPM') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm()
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap("${env.PNPM_FILTER_STRING}")
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBuild("${env.PNPM_FILTER_STRING}")
                    }
                }
            }
        }

        stage('Push kie-sandbox-image to Docker Hub') {
            when {
                expression { !params.DRY_RUN }
            }
            steps {
                script {
                    dockerUtils.pushImageToRegistry(
                        "${env.KIE_SANDBOX_WEBAPP_IMAGE__imageRegistry}",
                        "${env.KIE_SANDBOX_WEBAPP_IMAGE__imageAccount}",
                        "${env.KIE_SANDBOX_WEBAPP_IMAGE__imageName}",
                        "${env.KIE_SANDBOX_WEBAPP_IMAGE__imageBuildTag}",
                        "${pipelineVars.dockerHubUserCredentialsId}",
                        "${pipelineVars.dockerHubTokenCredentialsId}"
                    )
                }
            }
        }

        stage('Prepare environment variables for OpenShift deployment') {
            when {
                expression { !params.DRY_RUN && !params.RELEASE_CANDIDATE }
            }
            steps {
                sh """#!/bin/bash -el
                echo "KIE_SANDBOX_EXTENDED_SERVICES_URL=${params.KIE_SANDBOX_EXTENDED_SERVICES_URL}" >> deployment.env
                echo "KIE_SANDBOX_CORS_PROXY_URL=${params.KIE_SANDBOX_CORS_PROXY_URL}" >> deployment.env
                """.trim()
            }
        }

        stage('Deploy kie-sandbox-image to OpenShift') {
            when {
                expression { !params.DRY_RUN && !params.RELEASE_CANDIDATE }
            }
            steps {
                script {
                    openShiftUtils.createOrUpdateApp(
                        "${env.OPENSHIFT_NAMESPACE}",
                        "${env.OPENSHIFT_APP_NAME}",
                        "${params.RELEASE_VERSION}",
                        "${env.KIE_SANDBOX_WEBAPP_IMAGE__imageRegistry}/${env.KIE_SANDBOX_WEBAPP_IMAGE__imageAccount}/${env.KIE_SANDBOX_WEBAPP_IMAGE__imageName}:${params.RELEASE_VERSION}",
                        "${env.OPENSHIFT_PART_OF}",
                        'js',
                        "${pipelineVars.openshiftCredentialsId}",
                        './deployment.env'
                    )
                }
            }
        }

        stage('Setup release candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.RELEASE_CANDIDATE }
            }
            steps {
                script {
                    env.RELEASE_IMAGE_TAR_FILE = "incubator-kie-${params.RELEASE_CANDIDATE_VERSION}-sandbox-webapp-image.tar.gz"

                    sh """#!/bin/bash -el
                    mkdir ${env.RELEASE_ARTIFACTS_DIR}
                    docker save "${env.KIE_SANDBOX__imageRegistry}/${env.KIE_SANDBOX__imageAccount}/${env.KIE_SANDBOX__imageName}:${params.RELEASE_VERSION}" | gzip > "${env.RELEASE_ARTIFACTS_DIR}/${env.RELEASE_IMAGE_TAR_FILE}"
                    """.trim()
                }
            }
        }

        stage('Sign artifact for Apache release') {
            when {
                expression { !params.DRY_RUN && params.RELEASE_CANDIDATE }
            }
            steps {
                script {
                    releaseUtils.setupSigningKey("${pipelineVars.asfReleaseGPGKeyCredentialsId}")
                    releaseUtils.signArtifact("${env.RELEASE_ARTIFACTS_DIR}/${env.RELEASE_IMAGE_TAR_FILE}")
                }
            }
        }

        stage('Publish Release Candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.RELEASE_CANDIDATE }
            }
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${env.RELEASE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${pipelineVars.asfReleaseSVNStagingCredentialsId}"
                    )
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}
