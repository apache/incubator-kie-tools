/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
pipeline {
    agent {
        docker {
            image 'docker.io/apache/incubator-kie-tools-ci-build:10.0.999'
            args '--shm-size=2g --privileged --group-add docker'
        }
    }

    options {
        timeout(time: 240, unit: 'MINUTES')
    }

    parameters {
        booleanParam(description: 'Dry run', name: 'DRY_RUN', defaultValue: true)
        string(description: 'Base Ref', name: 'BASE_REF', defaultValue: '')
        string(description: 'Release Version', name: 'RELEASE_VERSION')
        string(description: 'Release Candidate Version', name: 'RELEASE_CANDIDATE_VERSION', defaultValue: '')
        choice(description: 'Job Type', name: 'JOB_TYPE', choices: ['release-candidate', 'release-promote'])
    }

    environment {
        KIE_TOOLS_BUILD__runLinters = 'false'
        KIE_TOOLS_BUILD__runTests = 'false'
        KIE_TOOLS_BUILD__runEndToEndTests = 'false'
        KIE_TOOLS_BUILD__buildContainerImages = 'true'

        RELEASE_ARTIFACTS_DIR = "${WORKSPACE}/release-artifacts"
        RELEASE_CANDIDATE_ARTIFACTS_DIR = "${WORKSPACE}/release-candidate-artifacts"
        LEGAL_FILES_DIR = "${WORKSPACE}/legal-files"

        RELEASE_FILE = "apache-kie-${params.RELEASE_VERSION}-incubating-tools-npm-packages.zip"
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    buildUtils = load '.ci/jenkins/shared-scripts/buildUtils.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                    releaseUtils = load '.ci/jenkins/shared-scripts/releaseUtils.groovy'
                    zipUtils = load '.ci/jenkins/shared-scripts/zipUtils.groovy'
                }
            }
        }

        stage('Initialize') {
            steps {
                script {
                    buildUtils.startRequiredServices()

                    cleanWs(deleteDirs: true, disableDeferredWipeout: true)

                    if (params.JOB_TYPE == 'release-candidate') {
                        currentBuild.displayName = 'Release Candidate: ' + params.RELEASE_CANDIDATE_VERSION
                    } else {
                        currentBuild.displayName = 'Release Promotion: ' + params.RELEASE_CANDIDATE_VERSION + ' > ' + params.RELEASE_VERSION
                    }
                }
            }
        }

        stage('Checkout kie-tools') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        githubUtils.checkoutRepo(
                            "http://github.com/${pipelineVars.githubRepositorySlug}.git",
                            "${params.BASE_REF}",
                            "${pipelineVars.kieToolsBotGithubCredentialsId}"
                        )
                    }
                }
            }
        }

        stage('Copy legal files') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        releaseUtils.copyLegalFiles("${LEGAL_FILES_DIR}")
                    }
                }
            }
        }

        stage('Setup PNPM') {
            when {
                expression { params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.setupPnpm("${pipelineVars.mavenSettingsConfigFileId}")
                    }
                }
            }
        }

        stage('Create PNPM filter for building') {
            steps {
                dir('kie-tools') {
                    script {
                        pnpmFilter = sh returnStdout: true, script:"""#!/bin/bash -el
                        PNPM_FILTER_STRING_FOR_BUILDING=\$(pnpm -r exec 'bash' '-c' 'PKG_NAME=\$(jq -r ".name" package.json) PKG_IS_PVT=\$(jq -r ".private" package.json); if [[ "\$PKG_IS_PVT" != "true" ]]; then echo "-F \$PKG_NAME..."; fi')
                        echo \$PNPM_FILTER_STRING_FOR_BUILDING
                        """.trim()
                        env.PNPM_FILTER_STRING_FOR_BUILDING = pnpmFilter.trim()
                    }
                }
            }
        }

        stage('PNPM Bootstrap') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBootstrap("${PNPM_FILTER_STRING_FOR_BUILDING}")
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('kie-tools') {
                    script {
                        buildUtils.pnpmBuild("${PNPM_FILTER_STRING_FOR_BUILDING}")
                    }
                }
            }
        }

        stage('Setup release candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir('kie-tools') {
                    script {
                        env.TMP_RELEASE_CANDIDATE_ARTIFACTS_DIR = "${WORKSPACE}/incubator-kie-${params.RELEASE_CANDIDATE_VERSION}-tools-npm-packages"
                        sh """#!/bin/bash -el
                        mkdir ${TMP_RELEASE_CANDIDATE_ARTIFACTS_DIR} ${RELEASE_CANDIDATE_ARTIFACTS_DIR}
                        PNPM_FILTER_STRING_FOR_PUBLISHING=\$(pnpm -r exec 'bash' '-c' 'PKG_NAME=\$(jq -r ".name" package.json) PKG_IS_PVT=\$(jq -r ".private" package.json); if [[ "\$PKG_IS_PVT" != "true" ]]; then echo "-F \$PKG_NAME"; fi')
                        echo \$PNPM_FILTER_STRING_FOR_PUBLISHING
                        pnpm \$PNPM_FILTER_STRING_FOR_PUBLISHING exec 'bash' '-c' 'pnpm pack --pack-destination ${TMP_RELEASE_CANDIDATE_ARTIFACTS_DIR}'
                        cp "${LEGAL_FILES_DIR}/." "${TMP_RELEASE_CANDIDATE_ARTIFACTS_DIR}"
                        cd "${TMP_RELEASE_CANDIDATE_ARTIFACTS_DIR}" && zip -r "${RELEASE_CANDIDATE_ARTIFACTS_DIR}/${RELEASE_FILE}" .
                        """.trim()
                    }
                }
            }
        }

        stage('Sign release candidate artifacts') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                dir("${RELEASE_CANDIDATE_ARTIFACTS_DIR}") {
                    script {
                        releaseUtils.setupSigningKey("${pipelineVars.asfReleaseGPGKeyCredentialsId}")
                        releaseUtils.signArtifact("${RELEASE_FILE}")
                    }
                }
            }
        }

        stage('Push release candidate artifacts to the staging SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-candidate' }
            }
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${RELEASE_CANDIDATE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${pipelineVars.asfReleaseSVNStagingCredentialsId}"
                    )
                }
            }
        }

        stage('Download release candidate artifacts from the staging SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    releaseUtils.downloadReleaseArtifacts(
                        "${pipelineVars.asfReleaseStagingRepository}",
                        "${RELEASE_ARTIFACTS_DIR}",
                        "${params.RELEASE_CANDIDATE_VERSION}",
                        "${RELEASE_FILE}"
                    )
                }
            }
        }

        stage('Push release artifacts to the release SVN') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                script {
                    releaseUtils.publishArtifacts(
                        "${RELEASE_ARTIFACTS_DIR}",
                        "${pipelineVars.asfReleaseRepository}",
                        "${params.RELEASE_VERSION}",
                        "${pipelineVars.asfReleaseSVNCredentialsId}"
                    )
                }
            }
        }

        stage('Publish packages to the NPM registry') {
            when {
                expression { !params.DRY_RUN && params.JOB_TYPE == 'release-promote' }
            }
            steps {
                withCredentials([string(credentialsId: "${pipelineVars.npmTokenCredentialsId}", variable: 'NPM_TOKEN')]) {
                    sh """#!/bin/bash -el
                    echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
                    unzip ${RELEASE_ARTIFACTS_DIR}/${RELEASE_FILE} -d ${WORKSPACE}/npm-packages
                    for filename in ${WORKSPACE}/npm-packages/*.tar.gz; do
                        pnpm publish --no-git-checks --access public \$filename
                    done
                    """.trim()
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'release-candidate-artifacts/*,release-artifacts/*', allowEmptyArchive: true
            cleanWs(deleteDirs: true)
        }
    }
}
