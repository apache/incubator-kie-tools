/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label util.avoidFaultyNodes()
    }

    options {
        timeout(time: 600, unit: 'MINUTES')
        disableConcurrentBuilds(abortPrevious: true)
    }

    environment {
        BUILD_IMAGE_JOB_STATUS = 'SKIPPED'
        DOCKER_CONFIG = "${WORKSPACE}/.docker"
    }

    stages {
        stage('Load local shared scripts') {
            steps {
                script {
                    dockerUtils = load '.ci/jenkins/shared-scripts/dockerUtils.groovy'
                    pipelineVars = load '.ci/jenkins/shared-scripts/pipelineVars.groovy'
                    githubUtils = load '.ci/jenkins/shared-scripts/githubUtils.groovy'
                }
            }
        }

        stage('Clean workspace before build') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
            }
        }

        stage('Checkout kie-tools') {
            steps {
                dir('kie-tools') {
                    checkout scm
                }
            }
        }

        stage('Check KIE Tools CI Image build is required') {
            steps {
                dir('kie-tools') {
                    script {
                        BUILD_IMAGE_REQUIRED = (
                            githubUtils.fileIsInChangeset("${env.BRANCH_NAME}", 'incubator-kie-tools-ci-build.Dockerfile')
                            || !dockerUtils.checkImageExistsInRegistry(
                                "${pipelineVars.kieToolsCiBuildImageRegistry}",
                                "${pipelineVars.kieToolsCiBuildImageAccount}",
                                "${pipelineVars.kieToolsCiBuildImageName}",
                                "${env.BRANCH_NAME}",
                                "${pipelineVars.dockerHubUserCredentialsId}",
                                "${pipelineVars.dockerHubTokenCredentialsId}"
                            )
                        )
                    }
                }
            }
        }

        stage('Trigger KIE Tools CI image build job') {
            when {
                expression { BUILD_IMAGE_REQUIRED }
            }
            steps {
                script {
                    BUILD_IMAGE_JOB_STATUS = build(
                        job: "KIE/kie-tools/kie-tools-ci-jobs/kie-tools-ci-image-build/${BRANCH_NAME}"
                    ).result
                }
            }
        }

        stage('Apache KIE Tools CI') {
            when {
                expression { BUILD_IMAGE_JOB_STATUS == 'SKIPPED' ||  BUILD_IMAGE_JOB_STATUS == 'SUCCESS' }
            }
            parallel {
                stage('Apache KIE Tools Build') {
                    steps {
                        script {
                            build(
                                job: "KIE/kie-tools/kie-tools-ci-jobs/kie-tools-ci-build/${BRANCH_NAME}"
                            )
                        }
                    }
                }

                stage('Check Dependencies') {
                    steps {
                        script {
                            build(
                                job: "KIE/kie-tools/kie-tools-ci-jobs/kie-tools-ci-check-dependencies/${BRANCH_NAME}"
                            )
                        }
                    }
                }

                stage('Check Code Formatting') {
                    steps {
                        script {
                            build(
                                job: "KIE/kie-tools/kie-tools-ci-jobs/kie-tools-ci-check-code-formatting/${BRANCH_NAME}"
                            )
                        }
                    }
                }

                stage('Check Code Quality') {
                    steps {
                        script {
                            build(
                                job: "KIE/kie-tools/kie-tools-ci-jobs/kie-tools-ci-check-code-quality/${BRANCH_NAME}"
                            )
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs(deleteDirs: true)
        }
    }
}
