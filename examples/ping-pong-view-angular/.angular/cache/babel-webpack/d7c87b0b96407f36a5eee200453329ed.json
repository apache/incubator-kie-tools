{
  "ast": null,
  "code": "import _createForOfIteratorHelper from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\nexport function bufferToggle(openings, closingSelector) {\n  return operate(function (source, subscriber) {\n    var buffers = [];\n    innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {\n      var buffer = [];\n      buffers.push(buffer);\n      var closingSubscription = new Subscription();\n\n      var emitBuffer = function emitBuffer() {\n        arrRemove(buffers, buffer);\n        subscriber.next(buffer);\n        closingSubscription.unsubscribe();\n      };\n\n      closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(new OperatorSubscriber(subscriber, emitBuffer, noop)));\n    }, noop));\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var _iterator = _createForOfIteratorHelper(buffers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var buffer = _step.value;\n          buffer.push(value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }, function () {\n      while (buffers.length > 0) {\n        subscriber.next(buffers.shift());\n      }\n\n      subscriber.complete();\n    }));\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/bufferToggle.js"
    ],
    "names": [
      "Subscription",
      "operate",
      "innerFrom",
      "OperatorSubscriber",
      "noop",
      "arrRemove",
      "bufferToggle",
      "openings",
      "closingSelector",
      "source",
      "subscriber",
      "buffers",
      "subscribe",
      "openValue",
      "buffer",
      "push",
      "closingSubscription",
      "emitBuffer",
      "next",
      "unsubscribe",
      "add",
      "value",
      "length",
      "shift",
      "complete"
    ],
    "mappings": ";AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,eAAhC,EAAiD;AACpD,SAAOP,OAAO,CAAC,UAACQ,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAMC,OAAO,GAAG,EAAhB;AACAT,IAAAA,SAAS,CAACK,QAAD,CAAT,CAAoBK,SAApB,CAA8B,IAAIT,kBAAJ,CAAuBO,UAAvB,EAAmC,UAACG,SAAD,EAAe;AAC5E,UAAMC,MAAM,GAAG,EAAf;AACAH,MAAAA,OAAO,CAACI,IAAR,CAAaD,MAAb;AACA,UAAME,mBAAmB,GAAG,IAAIhB,YAAJ,EAA5B;;AACA,UAAMiB,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBZ,QAAAA,SAAS,CAACM,OAAD,EAAUG,MAAV,CAAT;AACAJ,QAAAA,UAAU,CAACQ,IAAX,CAAgBJ,MAAhB;AACAE,QAAAA,mBAAmB,CAACG,WAApB;AACH,OAJD;;AAKAH,MAAAA,mBAAmB,CAACI,GAApB,CAAwBlB,SAAS,CAACM,eAAe,CAACK,SAAD,CAAhB,CAAT,CAAsCD,SAAtC,CAAgD,IAAIT,kBAAJ,CAAuBO,UAAvB,EAAmCO,UAAnC,EAA+Cb,IAA/C,CAAhD,CAAxB;AACH,KAV6B,EAU3BA,IAV2B,CAA9B;AAWAK,IAAAA,MAAM,CAACG,SAAP,CAAiB,IAAIT,kBAAJ,CAAuBO,UAAvB,EAAmC,UAACW,KAAD,EAAW;AAAA,iDACtCV,OADsC;AAAA;;AAAA;AAC3D,4DAA8B;AAAA,cAAnBG,MAAmB;AAC1BA,UAAAA,MAAM,CAACC,IAAP,CAAYM,KAAZ;AACH;AAH0D;AAAA;AAAA;AAAA;AAAA;AAI9D,KAJgB,EAId,YAAM;AACL,aAAOV,OAAO,CAACW,MAAR,GAAiB,CAAxB,EAA2B;AACvBZ,QAAAA,UAAU,CAACQ,IAAX,CAAgBP,OAAO,CAACY,KAAR,EAAhB;AACH;;AACDb,MAAAA,UAAU,CAACc,QAAX;AACH,KATgB,CAAjB;AAUH,GAvBa,CAAd;AAwBH",
    "sourcesContent": [
      "import { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\nexport function bufferToggle(openings, closingSelector) {\n    return operate((source, subscriber) => {\n        const buffers = [];\n        innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, (openValue) => {\n            const buffer = [];\n            buffers.push(buffer);\n            const closingSubscription = new Subscription();\n            const emitBuffer = () => {\n                arrRemove(buffers, buffer);\n                subscriber.next(buffer);\n                closingSubscription.unsubscribe();\n            };\n            closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(new OperatorSubscriber(subscriber, emitBuffer, noop)));\n        }, noop));\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            for (const buffer of buffers) {\n                buffer.push(value);\n            }\n        }, () => {\n            while (buffers.length > 0) {\n                subscriber.next(buffers.shift());\n            }\n            subscriber.complete();\n        }));\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
