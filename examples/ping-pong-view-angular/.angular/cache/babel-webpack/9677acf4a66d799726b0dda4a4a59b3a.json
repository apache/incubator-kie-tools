{
  "ast": null,
  "code": "/* global __webpack_dev_server_client__ */\nimport WebSocketClient from \"./clients/WebSocketClient.js\";\nimport { log } from \"./utils/log.js\"; // this WebsocketClient is here as a default fallback, in case the client is not injected\n\n/* eslint-disable camelcase */\n\nvar Client = // eslint-disable-next-line camelcase, no-nested-ternary\ntypeof __webpack_dev_server_client__ !== \"undefined\" ? // eslint-disable-next-line camelcase\ntypeof __webpack_dev_server_client__.default !== \"undefined\" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : WebSocketClient;\n/* eslint-enable camelcase */\n\nvar retries = 0;\nvar maxRetries = 10;\nvar client = null;\n\nvar socket = function initSocket(url, handlers, reconnect) {\n  client = new Client(url);\n  client.onOpen(function () {\n    retries = 0;\n    maxRetries = reconnect;\n  });\n  client.onClose(function () {\n    if (retries === 0) {\n      handlers.close();\n    } // Try to reconnect.\n\n\n    client = null; // After 10 retries stop trying, to prevent logspam.\n\n    if (retries < maxRetries) {\n      // Exponentially increase timeout to reconnect.\n      // Respectfully copied from the package `got`.\n      // eslint-disable-next-line no-mixed-operators, no-restricted-properties\n      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\n      retries += 1;\n      log.info(\"Trying to reconnect...\");\n      setTimeout(function () {\n        socket(url, handlers, reconnect);\n      }, retryInMs);\n    }\n  });\n  client.onMessage(function (data) {\n    var message = JSON.parse(data);\n\n    if (handlers[message.type]) {\n      handlers[message.type](message.data, message.params);\n    }\n  });\n};\n\nexport default socket;",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/webpack-dev-server/client/socket.js"
    ],
    "names": [
      "WebSocketClient",
      "log",
      "Client",
      "__webpack_dev_server_client__",
      "default",
      "retries",
      "maxRetries",
      "client",
      "socket",
      "initSocket",
      "url",
      "handlers",
      "reconnect",
      "onOpen",
      "onClose",
      "close",
      "retryInMs",
      "Math",
      "pow",
      "random",
      "info",
      "setTimeout",
      "onMessage",
      "data",
      "message",
      "JSON",
      "parse",
      "type",
      "params"
    ],
    "mappings": "AAAA;AACA,OAAOA,eAAP,MAA4B,8BAA5B;AACA,SAASC,GAAT,QAAoB,gBAApB,C,CAAsC;;AAEtC;;AAEA,IAAIC,MAAM,GAAG;AACb,OAAOC,6BAAP,KAAyC,WAAzC,GAAuD;AACvD,OAAOA,6BAA6B,CAACC,OAArC,KAAiD,WAAjD,GAA+DD,6BAA6B,CAACC,OAA7F,GAAuGD,6BADvG,GACuIH,eAFvI;AAGA;;AAEA,IAAIK,OAAO,GAAG,CAAd;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,MAAM,GAAG,IAAb;;AAEA,IAAIC,MAAM,GAAG,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,QAAzB,EAAmCC,SAAnC,EAA8C;AACzDL,EAAAA,MAAM,GAAG,IAAIL,MAAJ,CAAWQ,GAAX,CAAT;AACAH,EAAAA,MAAM,CAACM,MAAP,CAAc,YAAY;AACxBR,IAAAA,OAAO,GAAG,CAAV;AACAC,IAAAA,UAAU,GAAGM,SAAb;AACD,GAHD;AAIAL,EAAAA,MAAM,CAACO,OAAP,CAAe,YAAY;AACzB,QAAIT,OAAO,KAAK,CAAhB,EAAmB;AACjBM,MAAAA,QAAQ,CAACI,KAAT;AACD,KAHwB,CAGvB;;;AAGFR,IAAAA,MAAM,GAAG,IAAT,CANyB,CAMV;;AAEf,QAAIF,OAAO,GAAGC,UAAd,EAA0B;AACxB;AACA;AACA;AACA,UAAIU,SAAS,GAAG,OAAOC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYb,OAAZ,CAAP,GAA8BY,IAAI,CAACE,MAAL,KAAgB,GAA9D;AACAd,MAAAA,OAAO,IAAI,CAAX;AACAJ,MAAAA,GAAG,CAACmB,IAAJ,CAAS,wBAAT;AACAC,MAAAA,UAAU,CAAC,YAAY;AACrBb,QAAAA,MAAM,CAACE,GAAD,EAAMC,QAAN,EAAgBC,SAAhB,CAAN;AACD,OAFS,EAEPI,SAFO,CAAV;AAGD;AACF,GAnBD;AAoBAT,EAAAA,MAAM,CAACe,SAAP,CAAiB,UAAUC,IAAV,EAAgB;AAC/B,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAd;;AAEA,QAAIZ,QAAQ,CAACa,OAAO,CAACG,IAAT,CAAZ,EAA4B;AAC1BhB,MAAAA,QAAQ,CAACa,OAAO,CAACG,IAAT,CAAR,CAAuBH,OAAO,CAACD,IAA/B,EAAqCC,OAAO,CAACI,MAA7C;AACD;AACF,GAND;AAOD,CAjCD;;AAmCA,eAAepB,MAAf",
    "sourcesContent": [
      "/* global __webpack_dev_server_client__ */\nimport WebSocketClient from \"./clients/WebSocketClient.js\";\nimport { log } from \"./utils/log.js\"; // this WebsocketClient is here as a default fallback, in case the client is not injected\n\n/* eslint-disable camelcase */\n\nvar Client = // eslint-disable-next-line camelcase, no-nested-ternary\ntypeof __webpack_dev_server_client__ !== \"undefined\" ? // eslint-disable-next-line camelcase\ntypeof __webpack_dev_server_client__.default !== \"undefined\" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : WebSocketClient;\n/* eslint-enable camelcase */\n\nvar retries = 0;\nvar maxRetries = 10;\nvar client = null;\n\nvar socket = function initSocket(url, handlers, reconnect) {\n  client = new Client(url);\n  client.onOpen(function () {\n    retries = 0;\n    maxRetries = reconnect;\n  });\n  client.onClose(function () {\n    if (retries === 0) {\n      handlers.close();\n    } // Try to reconnect.\n\n\n    client = null; // After 10 retries stop trying, to prevent logspam.\n\n    if (retries < maxRetries) {\n      // Exponentially increase timeout to reconnect.\n      // Respectfully copied from the package `got`.\n      // eslint-disable-next-line no-mixed-operators, no-restricted-properties\n      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\n      retries += 1;\n      log.info(\"Trying to reconnect...\");\n      setTimeout(function () {\n        socket(url, handlers, reconnect);\n      }, retryInMs);\n    }\n  });\n  client.onMessage(function (data) {\n    var message = JSON.parse(data);\n\n    if (handlers[message.type]) {\n      handlers[message.type](message.data, message.params);\n    }\n  });\n};\n\nexport default socket;"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
