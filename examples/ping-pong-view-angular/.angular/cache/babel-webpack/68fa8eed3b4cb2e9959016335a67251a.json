{
  "ast": null,
  "code": "import _classCallCheck from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport var AsyncAction = /*#__PURE__*/function (_Action) {\n  _inherits(AsyncAction, _Action);\n\n  var _super = _createSuper(AsyncAction);\n\n  function AsyncAction(scheduler, work) {\n    var _this;\n\n    _classCallCheck(this, AsyncAction);\n\n    _this = _super.call(this, scheduler, work);\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.pending = false;\n    return _this;\n  }\n\n  _createClass(AsyncAction, [{\n    key: \"schedule\",\n    value: function schedule(state) {\n      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (this.closed) {\n        return this;\n      }\n\n      this.state = state;\n      var id = this.id;\n      var scheduler = this.scheduler;\n\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, delay);\n      }\n\n      this.pending = true;\n      this.delay = delay;\n      this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n      return this;\n    }\n  }, {\n    key: \"requestAsyncId\",\n    value: function requestAsyncId(scheduler, _id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n  }, {\n    key: \"recycleAsyncId\",\n    value: function recycleAsyncId(_scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (delay != null && this.delay === delay && this.pending === false) {\n        return id;\n      }\n\n      intervalProvider.clearInterval(id);\n      return undefined;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(state, delay) {\n      if (this.closed) {\n        return new Error('executing a cancelled action');\n      }\n\n      this.pending = false;\n\n      var error = this._execute(state, delay);\n\n      if (error) {\n        return error;\n      } else if (this.pending === false && this.id != null) {\n        this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n      }\n    }\n  }, {\n    key: \"_execute\",\n    value: function _execute(state, _delay) {\n      var errored = false;\n      var errorValue;\n\n      try {\n        this.work(state);\n      } catch (e) {\n        errored = true;\n        errorValue = e ? e : new Error('Scheduled action threw falsy error');\n      }\n\n      if (errored) {\n        this.unsubscribe();\n        return errorValue;\n      }\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (!this.closed) {\n        var id = this.id,\n            scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        this.work = this.state = this.scheduler = null;\n        this.pending = false;\n        arrRemove(actions, this);\n\n        if (id != null) {\n          this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n\n        this.delay = null;\n\n        _get(_getPrototypeOf(AsyncAction.prototype), \"unsubscribe\", this).call(this);\n      }\n    }\n  }]);\n\n  return AsyncAction;\n}(Action);",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js"
    ],
    "names": [
      "Action",
      "intervalProvider",
      "arrRemove",
      "AsyncAction",
      "scheduler",
      "work",
      "pending",
      "state",
      "delay",
      "closed",
      "id",
      "recycleAsyncId",
      "requestAsyncId",
      "_id",
      "setInterval",
      "flush",
      "bind",
      "_scheduler",
      "clearInterval",
      "undefined",
      "Error",
      "error",
      "_execute",
      "_delay",
      "errored",
      "errorValue",
      "e",
      "unsubscribe",
      "actions"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        intervalProvider.clearInterval(id);\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
