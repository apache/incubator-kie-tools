{
  "ast": null,
  "code": "import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport function windowWhen(closingSelector) {\n  return operate(function (source, subscriber) {\n    var window;\n    var closingSubscriber;\n\n    var handleError = function handleError(err) {\n      window.error(err);\n      subscriber.error(err);\n    };\n\n    var openWindow = function openWindow() {\n      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n      window === null || window === void 0 ? void 0 : window.complete();\n      window = new Subject();\n      subscriber.next(window.asObservable());\n      var closingNotifier;\n\n      try {\n        closingNotifier = innerFrom(closingSelector());\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n\n      closingNotifier.subscribe(closingSubscriber = new OperatorSubscriber(subscriber, openWindow, openWindow, handleError));\n    };\n\n    openWindow();\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return window.next(value);\n    }, function () {\n      window.complete();\n      subscriber.complete();\n    }, handleError, function () {\n      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n      window = null;\n    }));\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/windowWhen.js"
    ],
    "names": [
      "Subject",
      "operate",
      "OperatorSubscriber",
      "innerFrom",
      "windowWhen",
      "closingSelector",
      "source",
      "subscriber",
      "window",
      "closingSubscriber",
      "handleError",
      "err",
      "error",
      "openWindow",
      "unsubscribe",
      "complete",
      "next",
      "asObservable",
      "closingNotifier",
      "subscribe",
      "value"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAO,SAASC,UAAT,CAAoBC,eAApB,EAAqC;AACxC,SAAOJ,OAAO,CAAC,UAACK,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAIC,MAAJ;AACA,QAAIC,iBAAJ;;AACA,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAS;AACzBH,MAAAA,MAAM,CAACI,KAAP,CAAaD,GAAb;AACAJ,MAAAA,UAAU,CAACK,KAAX,CAAiBD,GAAjB;AACH,KAHD;;AAIA,QAAME,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBJ,MAAAA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACK,WAAlB,EAAtE;AACAN,MAAAA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACO,QAAP,EAAhD;AACAP,MAAAA,MAAM,GAAG,IAAIR,OAAJ,EAAT;AACAO,MAAAA,UAAU,CAACS,IAAX,CAAgBR,MAAM,CAACS,YAAP,EAAhB;AACA,UAAIC,eAAJ;;AACA,UAAI;AACAA,QAAAA,eAAe,GAAGf,SAAS,CAACE,eAAe,EAAhB,CAA3B;AACH,OAFD,CAGA,OAAOM,GAAP,EAAY;AACRD,QAAAA,WAAW,CAACC,GAAD,CAAX;AACA;AACH;;AACDO,MAAAA,eAAe,CAACC,SAAhB,CAA2BV,iBAAiB,GAAG,IAAIP,kBAAJ,CAAuBK,UAAvB,EAAmCM,UAAnC,EAA+CA,UAA/C,EAA2DH,WAA3D,CAA/C;AACH,KAdD;;AAeAG,IAAAA,UAAU;AACVP,IAAAA,MAAM,CAACa,SAAP,CAAiB,IAAIjB,kBAAJ,CAAuBK,UAAvB,EAAmC,UAACa,KAAD;AAAA,aAAWZ,MAAM,CAACQ,IAAP,CAAYI,KAAZ,CAAX;AAAA,KAAnC,EAAkE,YAAM;AACrFZ,MAAAA,MAAM,CAACO,QAAP;AACAR,MAAAA,UAAU,CAACQ,QAAX;AACH,KAHgB,EAGdL,WAHc,EAGD,YAAM;AAClBD,MAAAA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACK,WAAlB,EAAtE;AACAN,MAAAA,MAAM,GAAG,IAAT;AACH,KANgB,CAAjB;AAOH,GA9Ba,CAAd;AA+BH",
    "sourcesContent": [
      "import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport function windowWhen(closingSelector) {\n    return operate((source, subscriber) => {\n        let window;\n        let closingSubscriber;\n        const handleError = (err) => {\n            window.error(err);\n            subscriber.error(err);\n        };\n        const openWindow = () => {\n            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n            window === null || window === void 0 ? void 0 : window.complete();\n            window = new Subject();\n            subscriber.next(window.asObservable());\n            let closingNotifier;\n            try {\n                closingNotifier = innerFrom(closingSelector());\n            }\n            catch (err) {\n                handleError(err);\n                return;\n            }\n            closingNotifier.subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openWindow, openWindow, handleError)));\n        };\n        openWindow();\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => window.next(value), () => {\n            window.complete();\n            subscriber.complete();\n        }, handleError, () => {\n            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n            window = null;\n        }));\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
