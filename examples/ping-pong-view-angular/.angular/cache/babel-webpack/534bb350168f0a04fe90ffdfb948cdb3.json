{
  "ast": null,
  "code": "import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function sample(notifier) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n    }));\n\n    var emit = function emit() {\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n\n    notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/sample.js"
    ],
    "names": [
      "operate",
      "noop",
      "OperatorSubscriber",
      "sample",
      "notifier",
      "source",
      "subscriber",
      "hasValue",
      "lastValue",
      "subscribe",
      "value",
      "emit",
      "next"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AAC7B,SAAOJ,OAAO,CAAC,UAACK,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAIC,QAAQ,GAAG,KAAf;AACA,QAAIC,SAAS,GAAG,IAAhB;AACAH,IAAAA,MAAM,CAACI,SAAP,CAAiB,IAAIP,kBAAJ,CAAuBI,UAAvB,EAAmC,UAACI,KAAD,EAAW;AAC3DH,MAAAA,QAAQ,GAAG,IAAX;AACAC,MAAAA,SAAS,GAAGE,KAAZ;AACH,KAHgB,CAAjB;;AAIA,QAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,UAAIJ,QAAJ,EAAc;AACVA,QAAAA,QAAQ,GAAG,KAAX;AACA,YAAMG,KAAK,GAAGF,SAAd;AACAA,QAAAA,SAAS,GAAG,IAAZ;AACAF,QAAAA,UAAU,CAACM,IAAX,CAAgBF,KAAhB;AACH;AACJ,KAPD;;AAQAN,IAAAA,QAAQ,CAACK,SAAT,CAAmB,IAAIP,kBAAJ,CAAuBI,UAAvB,EAAmCK,IAAnC,EAAyCV,IAAzC,CAAnB;AACH,GAhBa,CAAd;AAiBH",
    "sourcesContent": [
      "import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function sample(notifier) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n        }));\n        const emit = () => {\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
