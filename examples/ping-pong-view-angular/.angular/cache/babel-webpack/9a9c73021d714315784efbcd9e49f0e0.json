{
  "ast": null,
  "code": "import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var resultSelector = popResultSelector(args);\n\n  var _argsArgArrayOrObject = argsArgArrayOrObject(args),\n      sources = _argsArgArrayOrObject.args,\n      keys = _argsArgArrayOrObject.keys;\n\n  var result = new Observable(function (subscriber) {\n    var length = sources.length;\n\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(length);\n    var remainingCompletions = length;\n    var remainingEmissions = length;\n\n    var _loop = function _loop(sourceIndex) {\n      var hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (!hasValue) {\n          hasValue = true;\n          remainingEmissions--;\n        }\n\n        values[sourceIndex] = value;\n      }, function () {\n        return remainingCompletions--;\n      }, undefined, function () {\n        if (!remainingCompletions || !hasValue) {\n          if (!remainingEmissions) {\n            subscriber.next(keys ? createObject(keys, values) : values);\n          }\n\n          subscriber.complete();\n        }\n      }));\n    };\n\n    for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      _loop(sourceIndex);\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/observable/forkJoin.js"
    ],
    "names": [
      "Observable",
      "argsArgArrayOrObject",
      "innerFrom",
      "popResultSelector",
      "OperatorSubscriber",
      "mapOneOrManyArgs",
      "createObject",
      "forkJoin",
      "args",
      "resultSelector",
      "sources",
      "keys",
      "result",
      "subscriber",
      "length",
      "complete",
      "values",
      "Array",
      "remainingCompletions",
      "remainingEmissions",
      "sourceIndex",
      "hasValue",
      "subscribe",
      "value",
      "undefined",
      "next",
      "pipe"
    ],
    "mappings": "AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAO,SAASC,QAAT,GAA2B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC9B,MAAMC,cAAc,GAAGN,iBAAiB,CAACK,IAAD,CAAxC;;AACA,8BAAgCP,oBAAoB,CAACO,IAAD,CAApD;AAAA,MAAcE,OAAd,yBAAQF,IAAR;AAAA,MAAuBG,IAAvB,yBAAuBA,IAAvB;;AACA,MAAMC,MAAM,GAAG,IAAIZ,UAAJ,CAAe,UAACa,UAAD,EAAgB;AAC1C,QAAQC,MAAR,GAAmBJ,OAAnB,CAAQI,MAAR;;AACA,QAAI,CAACA,MAAL,EAAa;AACTD,MAAAA,UAAU,CAACE,QAAX;AACA;AACH;;AACD,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,MAAV,CAAf;AACA,QAAII,oBAAoB,GAAGJ,MAA3B;AACA,QAAIK,kBAAkB,GAAGL,MAAzB;;AAR0C,+BASjCM,WATiC;AAUtC,UAAIC,QAAQ,GAAG,KAAf;AACAnB,MAAAA,SAAS,CAACQ,OAAO,CAACU,WAAD,CAAR,CAAT,CAAgCE,SAAhC,CAA0C,IAAIlB,kBAAJ,CAAuBS,UAAvB,EAAmC,UAACU,KAAD,EAAW;AACpF,YAAI,CAACF,QAAL,EAAe;AACXA,UAAAA,QAAQ,GAAG,IAAX;AACAF,UAAAA,kBAAkB;AACrB;;AACDH,QAAAA,MAAM,CAACI,WAAD,CAAN,GAAsBG,KAAtB;AACH,OANyC,EAMvC;AAAA,eAAML,oBAAoB,EAA1B;AAAA,OANuC,EAMTM,SANS,EAME,YAAM;AAC9C,YAAI,CAACN,oBAAD,IAAyB,CAACG,QAA9B,EAAwC;AACpC,cAAI,CAACF,kBAAL,EAAyB;AACrBN,YAAAA,UAAU,CAACY,IAAX,CAAgBd,IAAI,GAAGL,YAAY,CAACK,IAAD,EAAOK,MAAP,CAAf,GAAgCA,MAApD;AACH;;AACDH,UAAAA,UAAU,CAACE,QAAX;AACH;AACJ,OAbyC,CAA1C;AAXsC;;AAS1C,SAAK,IAAIK,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGN,MAAxC,EAAgDM,WAAW,EAA3D,EAA+D;AAAA,YAAtDA,WAAsD;AAgB9D;AACJ,GA1Bc,CAAf;AA2BA,SAAOX,cAAc,GAAGG,MAAM,CAACc,IAAP,CAAYrB,gBAAgB,CAACI,cAAD,CAA5B,CAAH,GAAmDG,MAAxE;AACH",
    "sourcesContent": [
      "import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
