{
  "ast": null,
  "code": "import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js"
    ],
    "names": [
      "scheduleObservable",
      "schedulePromise",
      "scheduleArray",
      "scheduleIterable",
      "scheduleAsyncIterable",
      "isInteropObservable",
      "isPromise",
      "isArrayLike",
      "isIterable",
      "isAsyncIterable",
      "createInvalidObservableTypeError",
      "isReadableStreamLike",
      "scheduleReadableStreamLike",
      "scheduled",
      "input",
      "scheduler"
    ],
    "mappings": "AAAA,SAASA,kBAAT,QAAmC,sBAAnC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,gCAAT,QAAiD,gCAAjD;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,SAA1B,EAAqC;AACxC,MAAID,KAAK,IAAI,IAAb,EAAmB;AACf,QAAIT,mBAAmB,CAACS,KAAD,CAAvB,EAAgC;AAC5B,aAAOd,kBAAkB,CAACc,KAAD,EAAQC,SAAR,CAAzB;AACH;;AACD,QAAIR,WAAW,CAACO,KAAD,CAAf,EAAwB;AACpB,aAAOZ,aAAa,CAACY,KAAD,EAAQC,SAAR,CAApB;AACH;;AACD,QAAIT,SAAS,CAACQ,KAAD,CAAb,EAAsB;AAClB,aAAOb,eAAe,CAACa,KAAD,EAAQC,SAAR,CAAtB;AACH;;AACD,QAAIN,eAAe,CAACK,KAAD,CAAnB,EAA4B;AACxB,aAAOV,qBAAqB,CAACU,KAAD,EAAQC,SAAR,CAA5B;AACH;;AACD,QAAIP,UAAU,CAACM,KAAD,CAAd,EAAuB;AACnB,aAAOX,gBAAgB,CAACW,KAAD,EAAQC,SAAR,CAAvB;AACH;;AACD,QAAIJ,oBAAoB,CAACG,KAAD,CAAxB,EAAiC;AAC7B,aAAOF,0BAA0B,CAACE,KAAD,EAAQC,SAAR,CAAjC;AACH;AACJ;;AACD,QAAML,gCAAgC,CAACI,KAAD,CAAtC;AACH",
    "sourcesContent": [
      "import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
