{
  "ast": null,
  "code": "import { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\nexport function firstValueFrom(source, config) {\n  var hasConfig = typeof config === 'object';\n  return new Promise(function (resolve, reject) {\n    var subscriber = new SafeSubscriber({\n      next: function next(value) {\n        resolve(value);\n        subscriber.unsubscribe();\n      },\n      error: reject,\n      complete: function complete() {\n        if (hasConfig) {\n          resolve(config.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      }\n    });\n    source.subscribe(subscriber);\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/firstValueFrom.js"
    ],
    "names": [
      "EmptyError",
      "SafeSubscriber",
      "firstValueFrom",
      "source",
      "config",
      "hasConfig",
      "Promise",
      "resolve",
      "reject",
      "subscriber",
      "next",
      "value",
      "unsubscribe",
      "error",
      "complete",
      "defaultValue",
      "subscribe"
    ],
    "mappings": "AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,MAAhC,EAAwC;AAC3C,MAAMC,SAAS,GAAG,OAAOD,MAAP,KAAkB,QAApC;AACA,SAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAMC,UAAU,GAAG,IAAIR,cAAJ,CAAmB;AAClCS,MAAAA,IAAI,EAAE,cAACC,KAAD,EAAW;AACbJ,QAAAA,OAAO,CAACI,KAAD,CAAP;AACAF,QAAAA,UAAU,CAACG,WAAX;AACH,OAJiC;AAKlCC,MAAAA,KAAK,EAAEL,MAL2B;AAMlCM,MAAAA,QAAQ,EAAE,oBAAM;AACZ,YAAIT,SAAJ,EAAe;AACXE,UAAAA,OAAO,CAACH,MAAM,CAACW,YAAR,CAAP;AACH,SAFD,MAGK;AACDP,UAAAA,MAAM,CAAC,IAAIR,UAAJ,EAAD,CAAN;AACH;AACJ;AAbiC,KAAnB,CAAnB;AAeAG,IAAAA,MAAM,CAACa,SAAP,CAAiBP,UAAjB;AACH,GAjBM,CAAP;AAkBH",
    "sourcesContent": [
      "import { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\nexport function firstValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        const subscriber = new SafeSubscriber({\n            next: (value) => {\n                resolve(value);\n                subscriber.unsubscribe();\n            },\n            error: reject,\n            complete: () => {\n                if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n        source.subscribe(subscriber);\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
