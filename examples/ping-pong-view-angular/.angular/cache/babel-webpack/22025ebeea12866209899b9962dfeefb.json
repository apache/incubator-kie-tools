{
  "ast": null,
  "code": "import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function sequenceEqual(compareTo) {\n  var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {\n    return a === b;\n  };\n  return operate(function (source, subscriber) {\n    var aState = createState();\n    var bState = createState();\n\n    var emit = function emit(isEqual) {\n      subscriber.next(isEqual);\n      subscriber.complete();\n    };\n\n    var createSubscriber = function createSubscriber(selfState, otherState) {\n      var sequenceEqualSubscriber = new OperatorSubscriber(subscriber, function (a) {\n        var buffer = otherState.buffer,\n            complete = otherState.complete;\n\n        if (buffer.length === 0) {\n          complete ? emit(false) : selfState.buffer.push(a);\n        } else {\n          !comparator(a, buffer.shift()) && emit(false);\n        }\n      }, function () {\n        selfState.complete = true;\n        var complete = otherState.complete,\n            buffer = otherState.buffer;\n        complete && emit(buffer.length === 0);\n        sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();\n      });\n      return sequenceEqualSubscriber;\n    };\n\n    source.subscribe(createSubscriber(aState, bState));\n    compareTo.subscribe(createSubscriber(bState, aState));\n  });\n}\n\nfunction createState() {\n  return {\n    buffer: [],\n    complete: false\n  };\n} //# sourceMappingURL=sequenceEqual.js.map",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
