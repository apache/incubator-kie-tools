{
  "ast": null,
  "code": "import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeat() {\n  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRepeat = function subscribeForRepeat() {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n        if (++soFar < count) {\n          if (innerSub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRepeat();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRepeat();\n      }\n    };\n\n    subscribeForRepeat();\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/repeat.js"
    ],
    "names": [
      "EMPTY",
      "operate",
      "OperatorSubscriber",
      "repeat",
      "count",
      "Infinity",
      "source",
      "subscriber",
      "soFar",
      "innerSub",
      "subscribeForRepeat",
      "syncUnsub",
      "subscribe",
      "undefined",
      "unsubscribe",
      "complete"
    ],
    "mappings": "AAAA,SAASA,KAAT,QAAsB,qBAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,MAAT,GAAkC;AAAA,MAAlBC,KAAkB,uEAAVC,QAAU;AACrC,SAAOD,KAAK,IAAI,CAAT,GACD;AAAA,WAAMJ,KAAN;AAAA,GADC,GAEDC,OAAO,CAAC,UAACK,MAAD,EAASC,UAAT,EAAwB;AAC9B,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,QAAJ;;AACA,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7B,UAAIC,SAAS,GAAG,KAAhB;AACAF,MAAAA,QAAQ,GAAGH,MAAM,CAACM,SAAP,CAAiB,IAAIV,kBAAJ,CAAuBK,UAAvB,EAAmCM,SAAnC,EAA8C,YAAM;AAC5E,YAAI,EAAEL,KAAF,GAAUJ,KAAd,EAAqB;AACjB,cAAIK,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACK,WAAT;AACAL,YAAAA,QAAQ,GAAG,IAAX;AACAC,YAAAA,kBAAkB;AACrB,WAJD,MAKK;AACDC,YAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,SATD,MAUK;AACDJ,UAAAA,UAAU,CAACQ,QAAX;AACH;AACJ,OAd2B,CAAjB,CAAX;;AAeA,UAAIJ,SAAJ,EAAe;AACXF,QAAAA,QAAQ,CAACK,WAAT;AACAL,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,kBAAkB;AACrB;AACJ,KAtBD;;AAuBAA,IAAAA,kBAAkB;AACrB,GA3BQ,CAFb;AA8BH",
    "sourcesContent": [
      "import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeat(count = Infinity) {\n    return count <= 0\n        ? () => EMPTY\n        : operate((source, subscriber) => {\n            let soFar = 0;\n            let innerSub;\n            const subscribeForRepeat = () => {\n                let syncUnsub = false;\n                innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, () => {\n                    if (++soFar < count) {\n                        if (innerSub) {\n                            innerSub.unsubscribe();\n                            innerSub = null;\n                            subscribeForRepeat();\n                        }\n                        else {\n                            syncUnsub = true;\n                        }\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRepeat();\n                }\n            };\n            subscribeForRepeat();\n        });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
