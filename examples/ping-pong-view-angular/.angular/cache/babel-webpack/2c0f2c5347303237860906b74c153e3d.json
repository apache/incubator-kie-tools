{
  "ast": null,
  "code": "import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { defer } from './defer';\nvar DEFAULT_CONFIG = {\n  connector: function connector() {\n    return new Subject();\n  },\n  resetOnDisconnect: true\n};\nexport function connectable(source) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;\n  var connection = null;\n  var connector = config.connector,\n      _config$resetOnDiscon = config.resetOnDisconnect,\n      resetOnDisconnect = _config$resetOnDiscon === void 0 ? true : _config$resetOnDiscon;\n  var subject = connector();\n  var result = new Observable(function (subscriber) {\n    return subject.subscribe(subscriber);\n  });\n\n  result.connect = function () {\n    if (!connection || connection.closed) {\n      connection = defer(function () {\n        return source;\n      }).subscribe(subject);\n\n      if (resetOnDisconnect) {\n        connection.add(function () {\n          return subject = connector();\n        });\n      }\n    }\n\n    return connection;\n  };\n\n  return result;\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/observable/connectable.js"
    ],
    "names": [
      "Subject",
      "Observable",
      "defer",
      "DEFAULT_CONFIG",
      "connector",
      "resetOnDisconnect",
      "connectable",
      "source",
      "config",
      "connection",
      "subject",
      "result",
      "subscriber",
      "subscribe",
      "connect",
      "closed",
      "add"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,SAAS,EAAE;AAAA,WAAM,IAAIJ,OAAJ,EAAN;AAAA,GADQ;AAEnBK,EAAAA,iBAAiB,EAAE;AAFA,CAAvB;AAIA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAAsD;AAAA,MAAzBC,MAAyB,uEAAhBL,cAAgB;AACzD,MAAIM,UAAU,GAAG,IAAjB;AACA,MAAQL,SAAR,GAAgDI,MAAhD,CAAQJ,SAAR;AAAA,8BAAgDI,MAAhD,CAAmBH,iBAAnB;AAAA,MAAmBA,iBAAnB,sCAAuC,IAAvC;AACA,MAAIK,OAAO,GAAGN,SAAS,EAAvB;AACA,MAAMO,MAAM,GAAG,IAAIV,UAAJ,CAAe,UAACW,UAAD,EAAgB;AAC1C,WAAOF,OAAO,CAACG,SAAR,CAAkBD,UAAlB,CAAP;AACH,GAFc,CAAf;;AAGAD,EAAAA,MAAM,CAACG,OAAP,GAAiB,YAAM;AACnB,QAAI,CAACL,UAAD,IAAeA,UAAU,CAACM,MAA9B,EAAsC;AAClCN,MAAAA,UAAU,GAAGP,KAAK,CAAC;AAAA,eAAMK,MAAN;AAAA,OAAD,CAAL,CAAoBM,SAApB,CAA8BH,OAA9B,CAAb;;AACA,UAAIL,iBAAJ,EAAuB;AACnBI,QAAAA,UAAU,CAACO,GAAX,CAAe;AAAA,iBAAON,OAAO,GAAGN,SAAS,EAA1B;AAAA,SAAf;AACH;AACJ;;AACD,WAAOK,UAAP;AACH,GARD;;AASA,SAAOE,MAAP;AACH",
    "sourcesContent": [
      "import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { defer } from './defer';\nconst DEFAULT_CONFIG = {\n    connector: () => new Subject(),\n    resetOnDisconnect: true,\n};\nexport function connectable(source, config = DEFAULT_CONFIG) {\n    let connection = null;\n    const { connector, resetOnDisconnect = true } = config;\n    let subject = connector();\n    const result = new Observable((subscriber) => {\n        return subject.subscribe(subscriber);\n    });\n    result.connect = () => {\n        if (!connection || connection.closed) {\n            connection = defer(() => source).subscribe(subject);\n            if (resetOnDisconnect) {\n                connection.add(() => (subject = connector()));\n            }\n        }\n        return connection;\n    };\n    return result;\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
