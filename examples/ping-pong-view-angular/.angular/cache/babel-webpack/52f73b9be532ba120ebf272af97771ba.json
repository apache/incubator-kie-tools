{
  "ast": null,
  "code": "import _classCallCheck from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n  return operate(function (source, subscriber) {\n    var element;\n\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\n      element = elementOrOptions;\n    } else {\n      duration = elementOrOptions.duration;\n      element = elementOrOptions.element;\n      connector = elementOrOptions.connector;\n    }\n\n    var groups = new Map();\n\n    var notify = function notify(cb) {\n      groups.forEach(cb);\n      cb(subscriber);\n    };\n\n    var handleError = function handleError(err) {\n      return notify(function (consumer) {\n        return consumer.error(err);\n      });\n    };\n\n    var groupBySourceSubscriber = new GroupBySubscriber(subscriber, function (value) {\n      try {\n        var key = keySelector(value);\n        var group = groups.get(key);\n\n        if (!group) {\n          groups.set(key, group = connector ? connector() : new Subject());\n          var grouped = createGroupedObservable(key, group);\n          subscriber.next(grouped);\n\n          if (duration) {\n            var durationSubscriber = new OperatorSubscriber(group, function () {\n              group.complete();\n              durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            }, undefined, undefined, function () {\n              return groups.delete(key);\n            });\n            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber));\n          }\n        }\n\n        group.next(element ? element(value) : value);\n      } catch (err) {\n        handleError(err);\n      }\n    }, function () {\n      return notify(function (consumer) {\n        return consumer.complete();\n      });\n    }, handleError, function () {\n      return groups.clear();\n    });\n    source.subscribe(groupBySourceSubscriber);\n\n    function createGroupedObservable(key, groupSubject) {\n      var result = new Observable(function (groupSubscriber) {\n        groupBySourceSubscriber.activeGroups++;\n        var innerSub = groupSubject.subscribe(groupSubscriber);\n        return function () {\n          innerSub.unsubscribe();\n          --groupBySourceSubscriber.activeGroups === 0 && groupBySourceSubscriber.teardownAttempted && groupBySourceSubscriber.unsubscribe();\n        };\n      });\n      result.key = key;\n      return result;\n    }\n  });\n}\n\nvar GroupBySubscriber = /*#__PURE__*/function (_OperatorSubscriber) {\n  _inherits(GroupBySubscriber, _OperatorSubscriber);\n\n  var _super = _createSuper(GroupBySubscriber);\n\n  function GroupBySubscriber() {\n    var _this;\n\n    _classCallCheck(this, GroupBySubscriber);\n\n    _this = _super.apply(this, arguments);\n    _this.activeGroups = 0;\n    _this.teardownAttempted = false;\n    return _this;\n  }\n\n  _createClass(GroupBySubscriber, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.teardownAttempted = true;\n      this.activeGroups === 0 && _get(_getPrototypeOf(GroupBySubscriber.prototype), \"unsubscribe\", this).call(this);\n    }\n  }]);\n\n  return GroupBySubscriber;\n}(OperatorSubscriber);",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/groupBy.js"
    ],
    "names": [
      "Observable",
      "innerFrom",
      "Subject",
      "operate",
      "OperatorSubscriber",
      "groupBy",
      "keySelector",
      "elementOrOptions",
      "duration",
      "connector",
      "source",
      "subscriber",
      "element",
      "groups",
      "Map",
      "notify",
      "cb",
      "forEach",
      "handleError",
      "err",
      "consumer",
      "error",
      "groupBySourceSubscriber",
      "GroupBySubscriber",
      "value",
      "key",
      "group",
      "get",
      "set",
      "grouped",
      "createGroupedObservable",
      "next",
      "durationSubscriber",
      "complete",
      "unsubscribe",
      "undefined",
      "delete",
      "add",
      "subscribe",
      "clear",
      "groupSubject",
      "result",
      "groupSubscriber",
      "activeGroups",
      "innerSub",
      "teardownAttempted",
      "arguments"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n    return operate((source, subscriber) => {\n        let element;\n        if (!elementOrOptions || typeof elementOrOptions === 'function') {\n            element = elementOrOptions;\n        }\n        else {\n            ({ duration, element, connector } = elementOrOptions);\n        }\n        const groups = new Map();\n        const notify = (cb) => {\n            groups.forEach(cb);\n            cb(subscriber);\n        };\n        const handleError = (err) => notify((consumer) => consumer.error(err));\n        const groupBySourceSubscriber = new GroupBySubscriber(subscriber, (value) => {\n            try {\n                const key = keySelector(value);\n                let group = groups.get(key);\n                if (!group) {\n                    groups.set(key, (group = connector ? connector() : new Subject()));\n                    const grouped = createGroupedObservable(key, group);\n                    subscriber.next(grouped);\n                    if (duration) {\n                        const durationSubscriber = new OperatorSubscriber(group, () => {\n                            group.complete();\n                            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n                        }, undefined, undefined, () => groups.delete(key));\n                        groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber));\n                    }\n                }\n                group.next(element ? element(value) : value);\n            }\n            catch (err) {\n                handleError(err);\n            }\n        }, () => notify((consumer) => consumer.complete()), handleError, () => groups.clear());\n        source.subscribe(groupBySourceSubscriber);\n        function createGroupedObservable(key, groupSubject) {\n            const result = new Observable((groupSubscriber) => {\n                groupBySourceSubscriber.activeGroups++;\n                const innerSub = groupSubject.subscribe(groupSubscriber);\n                return () => {\n                    innerSub.unsubscribe();\n                    --groupBySourceSubscriber.activeGroups === 0 &&\n                        groupBySourceSubscriber.teardownAttempted &&\n                        groupBySourceSubscriber.unsubscribe();\n                };\n            });\n            result.key = key;\n            return result;\n        }\n    });\n}\nclass GroupBySubscriber extends OperatorSubscriber {\n    constructor() {\n        super(...arguments);\n        this.activeGroups = 0;\n        this.teardownAttempted = false;\n    }\n    unsubscribe() {\n        this.teardownAttempted = true;\n        this.activeGroups === 0 && super.unsubscribe();\n    }\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
