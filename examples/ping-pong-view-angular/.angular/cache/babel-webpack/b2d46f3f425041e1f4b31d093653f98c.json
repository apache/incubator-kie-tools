{
  "ast": null,
  "code": "import _classCallCheck from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { AsyncAction } from './AsyncAction';\nexport var QueueAction = /*#__PURE__*/function (_AsyncAction) {\n  _inherits(QueueAction, _AsyncAction);\n\n  var _super = _createSuper(QueueAction);\n\n  function QueueAction(scheduler, work) {\n    var _this;\n\n    _classCallCheck(this, QueueAction);\n\n    _this = _super.call(this, scheduler, work);\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  _createClass(QueueAction, [{\n    key: \"schedule\",\n    value: function schedule(state) {\n      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (delay > 0) {\n        return _get(_getPrototypeOf(QueueAction.prototype), \"schedule\", this).call(this, state, delay);\n      }\n\n      this.delay = delay;\n      this.state = state;\n      this.scheduler.flush(this);\n      return this;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(state, delay) {\n      return delay > 0 || this.closed ? _get(_getPrototypeOf(QueueAction.prototype), \"execute\", this).call(this, state, delay) : this._execute(state, delay);\n    }\n  }, {\n    key: \"requestAsyncId\",\n    value: function requestAsyncId(scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (delay != null && delay > 0 || delay == null && this.delay > 0) {\n        return _get(_getPrototypeOf(QueueAction.prototype), \"requestAsyncId\", this).call(this, scheduler, id, delay);\n      }\n\n      return scheduler.flush(this);\n    }\n  }]);\n\n  return QueueAction;\n}(AsyncAction);",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/scheduler/QueueAction.js"
    ],
    "names": ["AsyncAction", "QueueAction", "scheduler", "work", "state", "delay", "flush", "closed", "_execute", "id"],
    "mappings": ";;;;;;AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,WAAaC,WAAb;AAAA;;AAAA;;AACI,uBAAYC,SAAZ,EAAuBC,IAAvB,EAA6B;AAAA;;AAAA;;AACzB,8BAAMD,SAAN,EAAiBC,IAAjB;AACA,UAAKD,SAAL,GAAiBA,SAAjB;AACA,UAAKC,IAAL,GAAYA,IAAZ;AAHyB;AAI5B;;AALL;AAAA;AAAA,WAMI,kBAASC,KAAT,EAA2B;AAAA,UAAXC,KAAW,uEAAH,CAAG;;AACvB,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACX,yFAAsBD,KAAtB,EAA6BC,KAA7B;AACH;;AACD,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKD,KAAL,GAAaA,KAAb;AACA,WAAKF,SAAL,CAAeI,KAAf,CAAqB,IAArB;AACA,aAAO,IAAP;AACH;AAdL;AAAA;AAAA,WAeI,iBAAQF,KAAR,EAAeC,KAAf,EAAsB;AAClB,aAAQA,KAAK,GAAG,CAAR,IAAa,KAAKE,MAAnB,4EACWH,KADX,EACkBC,KADlB,IAEH,KAAKG,QAAL,CAAcJ,KAAd,EAAqBC,KAArB,CAFJ;AAGH;AAnBL;AAAA;AAAA,WAoBI,wBAAeH,SAAf,EAA0BO,EAA1B,EAAyC;AAAA,UAAXJ,KAAW,uEAAH,CAAG;;AACrC,UAAKA,KAAK,IAAI,IAAT,IAAiBA,KAAK,GAAG,CAA1B,IAAiCA,KAAK,IAAI,IAAT,IAAiB,KAAKA,KAAL,GAAa,CAAnE,EAAuE;AACnE,+FAA4BH,SAA5B,EAAuCO,EAAvC,EAA2CJ,KAA3C;AACH;;AACD,aAAOH,SAAS,CAACI,KAAV,CAAgB,IAAhB,CAAP;AACH;AAzBL;;AAAA;AAAA,EAAiCN,WAAjC",
    "sourcesContent": [
      "import { AsyncAction } from './AsyncAction';\nexport class QueueAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    schedule(state, delay = 0) {\n        if (delay > 0) {\n            return super.schedule(state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    }\n    execute(state, delay) {\n        return (delay > 0 || this.closed) ?\n            super.execute(state, delay) :\n            this._execute(state, delay);\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        return scheduler.flush(this);\n    }\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
