{
  "ast": null,
  "code": "import _createForOfIteratorHelper from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __asyncValues, __awaiter } from \"tslib\";\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function innerFrom(input) {\n  if (input instanceof Observable) {\n    return input;\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\nexport function fromInteropObservable(obj) {\n  return new Observable(function (subscriber) {\n    var obs = obj[Symbol_observable]();\n\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\nexport function fromArrayLike(array) {\n  return new Observable(function (subscriber) {\n    for (var i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n\n    subscriber.complete();\n  });\n}\nexport function fromPromise(promise) {\n  return new Observable(function (subscriber) {\n    promise.then(function (value) {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    }, function (err) {\n      return subscriber.error(err);\n    }).then(null, reportUnhandledError);\n  });\n}\nexport function fromIterable(iterable) {\n  return new Observable(function (subscriber) {\n    var _iterator = _createForOfIteratorHelper(iterable),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n        subscriber.next(value);\n\n        if (subscriber.closed) {\n          return;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    subscriber.complete();\n  });\n}\nexport function fromAsyncIterable(asyncIterable) {\n  return new Observable(function (subscriber) {\n    process(asyncIterable, subscriber).catch(function (err) {\n      return subscriber.error(err);\n    });\n  });\n}\nexport function fromReadableStreamLike(readableStream) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nfunction process(asyncIterable, subscriber) {\n  var asyncIterable_1, asyncIterable_1_1;\n\n  var e_1, _a;\n\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var value;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            asyncIterable_1 = __asyncValues(asyncIterable);\n\n          case 2:\n            _context.next = 4;\n            return asyncIterable_1.next();\n\n          case 4:\n            asyncIterable_1_1 = _context.sent;\n\n            if (asyncIterable_1_1.done) {\n              _context.next = 12;\n              break;\n            }\n\n            value = asyncIterable_1_1.value;\n            subscriber.next(value);\n\n            if (!subscriber.closed) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 10:\n            _context.next = 2;\n            break;\n\n          case 12:\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            e_1 = {\n              error: _context.t0\n            };\n\n          case 17:\n            _context.prev = 17;\n            _context.prev = 18;\n\n            if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 22;\n            return _a.call(asyncIterable_1);\n\n          case 22:\n            _context.prev = 22;\n\n            if (!e_1) {\n              _context.next = 25;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 25:\n            return _context.finish(22);\n\n          case 26:\n            return _context.finish(17);\n\n          case 27:\n            subscriber.complete();\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 14, 17, 27], [18,, 22, 26]]);\n  }));\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/observable/innerFrom.js"
    ],
    "names": [
      "__asyncValues",
      "__awaiter",
      "isArrayLike",
      "isPromise",
      "Observable",
      "isInteropObservable",
      "isAsyncIterable",
      "createInvalidObservableTypeError",
      "isIterable",
      "isReadableStreamLike",
      "readableStreamLikeToAsyncGenerator",
      "isFunction",
      "reportUnhandledError",
      "observable",
      "Symbol_observable",
      "innerFrom",
      "input",
      "fromInteropObservable",
      "fromArrayLike",
      "fromPromise",
      "fromAsyncIterable",
      "fromIterable",
      "fromReadableStreamLike",
      "obj",
      "subscriber",
      "obs",
      "subscribe",
      "TypeError",
      "array",
      "i",
      "length",
      "closed",
      "next",
      "complete",
      "promise",
      "then",
      "value",
      "err",
      "error",
      "iterable",
      "asyncIterable",
      "process",
      "catch",
      "readableStream",
      "asyncIterable_1",
      "asyncIterable_1_1",
      "e_1",
      "_a",
      "done",
      "return",
      "call"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import { __asyncValues, __awaiter } from \"tslib\";\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function innerFrom(input) {\n    if (input instanceof Observable) {\n        return input;\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromInteropObservable(input);\n        }\n        if (isArrayLike(input)) {\n            return fromArrayLike(input);\n        }\n        if (isPromise(input)) {\n            return fromPromise(input);\n        }\n        if (isAsyncIterable(input)) {\n            return fromAsyncIterable(input);\n        }\n        if (isIterable(input)) {\n            return fromIterable(input);\n        }\n        if (isReadableStreamLike(input)) {\n            return fromReadableStreamLike(input);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\nexport function fromInteropObservable(obj) {\n    return new Observable((subscriber) => {\n        const obs = obj[Symbol_observable]();\n        if (isFunction(obs.subscribe)) {\n            return obs.subscribe(subscriber);\n        }\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    });\n}\nexport function fromArrayLike(array) {\n    return new Observable((subscriber) => {\n        for (let i = 0; i < array.length && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        subscriber.complete();\n    });\n}\nexport function fromPromise(promise) {\n    return new Observable((subscriber) => {\n        promise\n            .then((value) => {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, (err) => subscriber.error(err))\n            .then(null, reportUnhandledError);\n    });\n}\nexport function fromIterable(iterable) {\n    return new Observable((subscriber) => {\n        for (const value of iterable) {\n            subscriber.next(value);\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        subscriber.complete();\n    });\n}\nexport function fromAsyncIterable(asyncIterable) {\n    return new Observable((subscriber) => {\n        process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n    });\n}\nexport function fromReadableStreamLike(readableStream) {\n    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\nfunction process(asyncIterable, subscriber) {\n    var asyncIterable_1, asyncIterable_1_1;\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            for (asyncIterable_1 = __asyncValues(asyncIterable); asyncIterable_1_1 = yield asyncIterable_1.next(), !asyncIterable_1_1.done;) {\n                const value = asyncIterable_1_1.value;\n                subscriber.next(value);\n                if (subscriber.closed) {\n                    return;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)) yield _a.call(asyncIterable_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        subscriber.complete();\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
