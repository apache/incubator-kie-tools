{
  "ast": null,
  "code": "import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry() {\n  var configOrCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var _config = config,\n      _config$count = _config.count,\n      count = _config$count === void 0 ? Infinity : _config$count,\n      delay = _config.delay,\n      _config$resetOnSucces = _config.resetOnSuccess,\n      resetOnSuccess = _config$resetOnSucces === void 0 ? false : _config$resetOnSucces;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function subscribeForRetry() {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub = function resub() {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber = new OperatorSubscriber(subscriber, function () {\n              notifierSubscriber.unsubscribe();\n              resub();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber);\n          } else {\n            resub();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/retry.js"
    ],
    "names": [
      "operate",
      "OperatorSubscriber",
      "identity",
      "timer",
      "innerFrom",
      "retry",
      "configOrCount",
      "Infinity",
      "config",
      "count",
      "delay",
      "resetOnSuccess",
      "source",
      "subscriber",
      "soFar",
      "innerSub",
      "subscribeForRetry",
      "syncUnsub",
      "subscribe",
      "value",
      "next",
      "undefined",
      "err",
      "resub",
      "unsubscribe",
      "notifier",
      "notifierSubscriber",
      "complete",
      "error"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAO,SAASC,KAAT,GAAyC;AAAA,MAA1BC,aAA0B,uEAAVC,QAAU;AAC5C,MAAIC,MAAJ;;AACA,MAAIF,aAAa,IAAI,OAAOA,aAAP,KAAyB,QAA9C,EAAwD;AACpDE,IAAAA,MAAM,GAAGF,aAAT;AACH,GAFD,MAGK;AACDE,IAAAA,MAAM,GAAG;AACLC,MAAAA,KAAK,EAAEH;AADF,KAAT;AAGH;;AACD,gBAA4EE,MAA5E;AAAA,8BAAQC,KAAR;AAAA,MAAQA,KAAR,8BAAgBF,QAAhB;AAAA,MAA0BG,KAA1B,WAA0BA,KAA1B;AAAA,sCAAiCC,cAAjC;AAAA,MAAiDA,cAAjD,sCAAkE,KAAlE;AACA,SAAOF,KAAK,IAAI,CAAT,GACDP,QADC,GAEDF,OAAO,CAAC,UAACY,MAAD,EAASC,UAAT,EAAwB;AAC9B,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,QAAJ;;AACA,QAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,UAAIC,SAAS,GAAG,KAAhB;AACAF,MAAAA,QAAQ,GAAGH,MAAM,CAACM,SAAP,CAAiB,IAAIjB,kBAAJ,CAAuBY,UAAvB,EAAmC,UAACM,KAAD,EAAW;AACtE,YAAIR,cAAJ,EAAoB;AAChBG,UAAAA,KAAK,GAAG,CAAR;AACH;;AACDD,QAAAA,UAAU,CAACO,IAAX,CAAgBD,KAAhB;AACH,OAL2B,EAKzBE,SALyB,EAKd,UAACC,GAAD,EAAS;AACnB,YAAIR,KAAK,KAAKL,KAAd,EAAqB;AACjB,cAAMc,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChB,gBAAIR,QAAJ,EAAc;AACVA,cAAAA,QAAQ,CAACS,WAAT;AACAT,cAAAA,QAAQ,GAAG,IAAX;AACAC,cAAAA,iBAAiB;AACpB,aAJD,MAKK;AACDC,cAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,WATD;;AAUA,cAAIP,KAAK,IAAI,IAAb,EAAmB;AACf,gBAAMe,QAAQ,GAAG,OAAOf,KAAP,KAAiB,QAAjB,GAA4BP,KAAK,CAACO,KAAD,CAAjC,GAA2CN,SAAS,CAACM,KAAK,CAACY,GAAD,EAAMR,KAAN,CAAN,CAArE;AACA,gBAAMY,kBAAkB,GAAG,IAAIzB,kBAAJ,CAAuBY,UAAvB,EAAmC,YAAM;AAChEa,cAAAA,kBAAkB,CAACF,WAAnB;AACAD,cAAAA,KAAK;AACR,aAH0B,EAGxB,YAAM;AACLV,cAAAA,UAAU,CAACc,QAAX;AACH,aAL0B,CAA3B;AAMAF,YAAAA,QAAQ,CAACP,SAAT,CAAmBQ,kBAAnB;AACH,WATD,MAUK;AACDH,YAAAA,KAAK;AACR;AACJ,SAxBD,MAyBK;AACDV,UAAAA,UAAU,CAACe,KAAX,CAAiBN,GAAjB;AACH;AACJ,OAlC2B,CAAjB,CAAX;;AAmCA,UAAIL,SAAJ,EAAe;AACXF,QAAAA,QAAQ,CAACS,WAAT;AACAT,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,iBAAiB;AACpB;AACJ,KA1CD;;AA2CAA,IAAAA,iBAAiB;AACpB,GA/CQ,CAFb;AAkDH",
    "sourcesContent": [
      "import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount = Infinity) {\n    let config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\n    return count <= 0\n        ? identity\n        : operate((source, subscriber) => {\n            let soFar = 0;\n            let innerSub;\n            const subscribeForRetry = () => {\n                let syncUnsub = false;\n                innerSub = source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, (err) => {\n                    if (soFar++ < count) {\n                        const resub = () => {\n                            if (innerSub) {\n                                innerSub.unsubscribe();\n                                innerSub = null;\n                                subscribeForRetry();\n                            }\n                            else {\n                                syncUnsub = true;\n                            }\n                        };\n                        if (delay != null) {\n                            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                            const notifierSubscriber = new OperatorSubscriber(subscriber, () => {\n                                notifierSubscriber.unsubscribe();\n                                resub();\n                            }, () => {\n                                subscriber.complete();\n                            });\n                            notifier.subscribe(notifierSubscriber);\n                        }\n                        else {\n                            resub();\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
