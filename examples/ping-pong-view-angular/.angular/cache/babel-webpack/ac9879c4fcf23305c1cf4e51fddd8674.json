{
  "ast": null,
  "code": "import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function skipLast(skipCount) {\n  return skipCount <= 0 ? identity : operate(function (source, subscriber) {\n    var ring = new Array(skipCount);\n    var seen = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var valueIndex = seen++;\n\n      if (valueIndex < skipCount) {\n        ring[valueIndex] = value;\n      } else {\n        var index = valueIndex % skipCount;\n        var oldValue = ring[index];\n        ring[index] = value;\n        subscriber.next(oldValue);\n      }\n    }));\n    return function () {\n      ring = null;\n    };\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/skipLast.js"
    ],
    "names": [
      "identity",
      "operate",
      "OperatorSubscriber",
      "skipLast",
      "skipCount",
      "source",
      "subscriber",
      "ring",
      "Array",
      "seen",
      "subscribe",
      "value",
      "valueIndex",
      "index",
      "oldValue",
      "next"
    ],
    "mappings": "AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAChC,SAAOA,SAAS,IAAI,CAAb,GAECJ,QAFD,GAGDC,OAAO,CAAC,UAACI,MAAD,EAASC,UAAT,EAAwB;AAC9B,QAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,SAAV,CAAX;AACA,QAAIK,IAAI,GAAG,CAAX;AACAJ,IAAAA,MAAM,CAACK,SAAP,CAAiB,IAAIR,kBAAJ,CAAuBI,UAAvB,EAAmC,UAACK,KAAD,EAAW;AAC3D,UAAMC,UAAU,GAAGH,IAAI,EAAvB;;AACA,UAAIG,UAAU,GAAGR,SAAjB,EAA4B;AACxBG,QAAAA,IAAI,CAACK,UAAD,CAAJ,GAAmBD,KAAnB;AACH,OAFD,MAGK;AACD,YAAME,KAAK,GAAGD,UAAU,GAAGR,SAA3B;AACA,YAAMU,QAAQ,GAAGP,IAAI,CAACM,KAAD,CAArB;AACAN,QAAAA,IAAI,CAACM,KAAD,CAAJ,GAAcF,KAAd;AACAL,QAAAA,UAAU,CAACS,IAAX,CAAgBD,QAAhB;AACH;AACJ,KAXgB,CAAjB;AAYA,WAAO,YAAM;AACTP,MAAAA,IAAI,GAAG,IAAP;AACH,KAFD;AAGH,GAlBQ,CAHb;AAsBH",
    "sourcesContent": [
      "import { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function skipLast(skipCount) {\n    return skipCount <= 0\n        ?\n            identity\n        : operate((source, subscriber) => {\n            let ring = new Array(skipCount);\n            let seen = 0;\n            source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n                const valueIndex = seen++;\n                if (valueIndex < skipCount) {\n                    ring[valueIndex] = value;\n                }\n                else {\n                    const index = valueIndex % skipCount;\n                    const oldValue = ring[index];\n                    ring[index] = value;\n                    subscriber.next(oldValue);\n                }\n            }));\n            return () => {\n                ring = null;\n            };\n        });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
