{
  "ast": null,
  "code": "import { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$connector = options.connector,\n      connector = _options$connector === void 0 ? function () {\n    return new Subject();\n  } : _options$connector,\n      _options$resetOnError = options.resetOnError,\n      resetOnError = _options$resetOnError === void 0 ? true : _options$resetOnError,\n      _options$resetOnCompl = options.resetOnComplete,\n      resetOnComplete = _options$resetOnCompl === void 0 ? true : _options$resetOnCompl,\n      _options$resetOnRefCo = options.resetOnRefCountZero,\n      resetOnRefCountZero = _options$resetOnRefCo === void 0 ? true : _options$resetOnRefCo;\n  return function (wrapperSource) {\n    var connection = null;\n    var resetConnection = null;\n    var subject = null;\n    var refCount = 0;\n    var hasCompleted = false;\n    var hasErrored = false;\n\n    var cancelReset = function cancelReset() {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = null;\n    };\n\n    var reset = function reset() {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n\n    var resetAndUnsubscribe = function resetAndUnsubscribe() {\n      var conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n\n    return operate(function (source, subscriber) {\n      refCount++;\n\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(function () {\n        refCount--;\n\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n\n      if (!connection) {\n        connection = new SafeSubscriber({\n          next: function next(value) {\n            return dest.next(value);\n          },\n          error: function error(err) {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: function complete() {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset(reset, on) {\n  if (on === true) {\n    reset();\n    return null;\n  }\n\n  if (on === false) {\n    return null;\n  }\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return on.apply(void 0, args).pipe(take(1)).subscribe(function () {\n    return reset();\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/share.js"
    ],
    "names": [
      "from",
      "take",
      "Subject",
      "SafeSubscriber",
      "operate",
      "share",
      "options",
      "connector",
      "resetOnError",
      "resetOnComplete",
      "resetOnRefCountZero",
      "wrapperSource",
      "connection",
      "resetConnection",
      "subject",
      "refCount",
      "hasCompleted",
      "hasErrored",
      "cancelReset",
      "unsubscribe",
      "reset",
      "resetAndUnsubscribe",
      "conn",
      "source",
      "subscriber",
      "dest",
      "add",
      "handleReset",
      "subscribe",
      "next",
      "value",
      "error",
      "err",
      "complete",
      "on",
      "args",
      "pipe"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection = null;\n        let resetConnection = null;\n        let subject = null;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = null;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = null;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                from(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return null;\n    }\n    if (on === false) {\n        return null;\n    }\n    return on(...args)\n        .pipe(take(1))\n        .subscribe(() => reset());\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
