{
  "ast": null,
  "code": "import { ReplaySubject } from '../ReplaySubject';\nimport { multicast } from './multicast';\nimport { isFunction } from '../util/isFunction';\nexport function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {\n  if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {\n    timestampProvider = selectorOrScheduler;\n  }\n\n  var selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;\n  return function (source) {\n    return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);\n  };\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/publishReplay.js"
    ],
    "names": [
      "ReplaySubject",
      "multicast",
      "isFunction",
      "publishReplay",
      "bufferSize",
      "windowTime",
      "selectorOrScheduler",
      "timestampProvider",
      "selector",
      "undefined",
      "source"
    ],
    "mappings": "AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CC,mBAA/C,EAAoEC,iBAApE,EAAuF;AAC1F,MAAID,mBAAmB,IAAI,CAACJ,UAAU,CAACI,mBAAD,CAAtC,EAA6D;AACzDC,IAAAA,iBAAiB,GAAGD,mBAApB;AACH;;AACD,MAAME,QAAQ,GAAGN,UAAU,CAACI,mBAAD,CAAV,GAAkCA,mBAAlC,GAAwDG,SAAzE;AACA,SAAO,UAACC,MAAD;AAAA,WAAYT,SAAS,CAAC,IAAID,aAAJ,CAAkBI,UAAlB,EAA8BC,UAA9B,EAA0CE,iBAA1C,CAAD,EAA+DC,QAA/D,CAAT,CAAkFE,MAAlF,CAAZ;AAAA,GAAP;AACH",
    "sourcesContent": [
      "import { ReplaySubject } from '../ReplaySubject';\nimport { multicast } from './multicast';\nimport { isFunction } from '../util/isFunction';\nexport function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {\n    if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {\n        timestampProvider = selectorOrScheduler;\n    }\n    const selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;\n    return (source) => multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
