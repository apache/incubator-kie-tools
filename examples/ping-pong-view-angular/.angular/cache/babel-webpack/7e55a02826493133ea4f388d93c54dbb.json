{
  "ast": null,
  "code": "import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n  return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n  var findIndex = emit === 'index';\n  return function (source, subscriber) {\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var i = index++;\n\n      if (predicate.call(thisArg, value, i, source)) {\n        subscriber.next(findIndex ? i : value);\n        subscriber.complete();\n      }\n    }, function () {\n      subscriber.next(findIndex ? -1 : undefined);\n      subscriber.complete();\n    }));\n  };\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/find.js"
    ],
    "names": [
      "operate",
      "OperatorSubscriber",
      "find",
      "predicate",
      "thisArg",
      "createFind",
      "emit",
      "findIndex",
      "source",
      "subscriber",
      "index",
      "subscribe",
      "value",
      "i",
      "call",
      "next",
      "complete",
      "undefined"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,IAAT,CAAcC,SAAd,EAAyBC,OAAzB,EAAkC;AACrC,SAAOJ,OAAO,CAACK,UAAU,CAACF,SAAD,EAAYC,OAAZ,EAAqB,OAArB,CAAX,CAAd;AACH;AACD,OAAO,SAASC,UAAT,CAAoBF,SAApB,EAA+BC,OAA/B,EAAwCE,IAAxC,EAA8C;AACjD,MAAMC,SAAS,GAAGD,IAAI,KAAK,OAA3B;AACA,SAAO,UAACE,MAAD,EAASC,UAAT,EAAwB;AAC3B,QAAIC,KAAK,GAAG,CAAZ;AACAF,IAAAA,MAAM,CAACG,SAAP,CAAiB,IAAIV,kBAAJ,CAAuBQ,UAAvB,EAAmC,UAACG,KAAD,EAAW;AAC3D,UAAMC,CAAC,GAAGH,KAAK,EAAf;;AACA,UAAIP,SAAS,CAACW,IAAV,CAAeV,OAAf,EAAwBQ,KAAxB,EAA+BC,CAA/B,EAAkCL,MAAlC,CAAJ,EAA+C;AAC3CC,QAAAA,UAAU,CAACM,IAAX,CAAgBR,SAAS,GAAGM,CAAH,GAAOD,KAAhC;AACAH,QAAAA,UAAU,CAACO,QAAX;AACH;AACJ,KANgB,EAMd,YAAM;AACLP,MAAAA,UAAU,CAACM,IAAX,CAAgBR,SAAS,GAAG,CAAC,CAAJ,GAAQU,SAAjC;AACAR,MAAAA,UAAU,CAACO,QAAX;AACH,KATgB,CAAjB;AAUH,GAZD;AAaH",
    "sourcesContent": [
      "import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n    return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n    const findIndex = emit === 'index';\n    return (source, subscriber) => {\n        let index = 0;\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            const i = index++;\n            if (predicate.call(thisArg, value, i, source)) {\n                subscriber.next(findIndex ? i : value);\n                subscriber.complete();\n            }\n        }, () => {\n            subscriber.next(findIndex ? -1 : undefined);\n            subscriber.complete();\n        }));\n    };\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
