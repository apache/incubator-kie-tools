{
  "ast": null,
  "code": "import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nexport function race() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  sources = argsOrArgArray(sources);\n  return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));\n}\nexport function raceInit(sources) {\n  return function (subscriber) {\n    var subscriptions = [];\n\n    var _loop = function _loop(i) {\n      subscriptions.push(innerFrom(sources[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (subscriptions) {\n          for (var s = 0; s < subscriptions.length; s++) {\n            s !== i && subscriptions[s].unsubscribe();\n          }\n\n          subscriptions = null;\n        }\n\n        subscriber.next(value);\n      })));\n    };\n\n    for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n      _loop(i);\n    }\n  };\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/observable/race.js"
    ],
    "names": [
      "Observable",
      "innerFrom",
      "argsOrArgArray",
      "OperatorSubscriber",
      "race",
      "sources",
      "length",
      "raceInit",
      "subscriber",
      "subscriptions",
      "i",
      "push",
      "subscribe",
      "value",
      "s",
      "unsubscribe",
      "next",
      "closed"
    ],
    "mappings": "AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,OAAO,SAASC,IAAT,GAA0B;AAAA,oCAATC,OAAS;AAATA,IAAAA,OAAS;AAAA;;AAC7BA,EAAAA,OAAO,GAAGH,cAAc,CAACG,OAAD,CAAxB;AACA,SAAOA,OAAO,CAACC,MAAR,KAAmB,CAAnB,GAAuBL,SAAS,CAACI,OAAO,CAAC,CAAD,CAAR,CAAhC,GAA+C,IAAIL,UAAJ,CAAeO,QAAQ,CAACF,OAAD,CAAvB,CAAtD;AACH;AACD,OAAO,SAASE,QAAT,CAAkBF,OAAlB,EAA2B;AAC9B,SAAO,UAACG,UAAD,EAAgB;AACnB,QAAIC,aAAa,GAAG,EAApB;;AADmB,+BAEVC,CAFU;AAGfD,MAAAA,aAAa,CAACE,IAAd,CAAmBV,SAAS,CAACI,OAAO,CAACK,CAAD,CAAR,CAAT,CAAsBE,SAAtB,CAAgC,IAAIT,kBAAJ,CAAuBK,UAAvB,EAAmC,UAACK,KAAD,EAAW;AAC7F,YAAIJ,aAAJ,EAAmB;AACf,eAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,aAAa,CAACH,MAAlC,EAA0CQ,CAAC,EAA3C,EAA+C;AAC3CA,YAAAA,CAAC,KAAKJ,CAAN,IAAWD,aAAa,CAACK,CAAD,CAAb,CAAiBC,WAAjB,EAAX;AACH;;AACDN,UAAAA,aAAa,GAAG,IAAhB;AACH;;AACDD,QAAAA,UAAU,CAACQ,IAAX,CAAgBH,KAAhB;AACH,OARkD,CAAhC,CAAnB;AAHe;;AAEnB,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBD,aAAa,IAAI,CAACD,UAAU,CAACS,MAA7B,IAAuCP,CAAC,GAAGL,OAAO,CAACC,MAAnE,EAA2EI,CAAC,EAA5E,EAAgF;AAAA,YAAvEA,CAAuE;AAU/E;AACJ,GAbD;AAcH",
    "sourcesContent": [
      "import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nexport function race(...sources) {\n    sources = argsOrArgArray(sources);\n    return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));\n}\nexport function raceInit(sources) {\n    return (subscriber) => {\n        let subscriptions = [];\n        for (let i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n            subscriptions.push(innerFrom(sources[i]).subscribe(new OperatorSubscriber(subscriber, (value) => {\n                if (subscriptions) {\n                    for (let s = 0; s < subscriptions.length; s++) {\n                        s !== i && subscriptions[s].unsubscribe();\n                    }\n                    subscriptions = null;\n                }\n                subscriber.next(value);\n            })));\n        }\n    };\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
