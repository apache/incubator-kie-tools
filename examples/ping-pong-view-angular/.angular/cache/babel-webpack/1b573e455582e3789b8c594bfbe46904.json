{
  "ast": null,
  "code": "import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function exhaustAll() {\n  return operate(function (source, subscriber) {\n    var isComplete = false;\n    var innerSub = null;\n    source.subscribe(new OperatorSubscriber(subscriber, function (inner) {\n      if (!innerSub) {\n        innerSub = innerFrom(inner).subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n          innerSub = null;\n          isComplete && subscriber.complete();\n        }));\n      }\n    }, function () {\n      isComplete = true;\n      !innerSub && subscriber.complete();\n    }));\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/exhaustAll.js"
    ],
    "names": [
      "operate",
      "innerFrom",
      "OperatorSubscriber",
      "exhaustAll",
      "source",
      "subscriber",
      "isComplete",
      "innerSub",
      "subscribe",
      "inner",
      "undefined",
      "complete"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,UAAT,GAAsB;AACzB,SAAOH,OAAO,CAAC,UAACI,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAIC,UAAU,GAAG,KAAjB;AACA,QAAIC,QAAQ,GAAG,IAAf;AACAH,IAAAA,MAAM,CAACI,SAAP,CAAiB,IAAIN,kBAAJ,CAAuBG,UAAvB,EAAmC,UAACI,KAAD,EAAW;AAC3D,UAAI,CAACF,QAAL,EAAe;AACXA,QAAAA,QAAQ,GAAGN,SAAS,CAACQ,KAAD,CAAT,CAAiBD,SAAjB,CAA2B,IAAIN,kBAAJ,CAAuBG,UAAvB,EAAmCK,SAAnC,EAA8C,YAAM;AACtFH,UAAAA,QAAQ,GAAG,IAAX;AACAD,UAAAA,UAAU,IAAID,UAAU,CAACM,QAAX,EAAd;AACH,SAHqC,CAA3B,CAAX;AAIH;AACJ,KAPgB,EAOd,YAAM;AACLL,MAAAA,UAAU,GAAG,IAAb;AACA,OAACC,QAAD,IAAaF,UAAU,CAACM,QAAX,EAAb;AACH,KAVgB,CAAjB;AAWH,GAda,CAAd;AAeH",
    "sourcesContent": [
      "import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function exhaustAll() {\n    return operate((source, subscriber) => {\n        let isComplete = false;\n        let innerSub = null;\n        source.subscribe(new OperatorSubscriber(subscriber, (inner) => {\n            if (!innerSub) {\n                innerSub = innerFrom(inner).subscribe(new OperatorSubscriber(subscriber, undefined, () => {\n                    innerSub = null;\n                    isComplete && subscriber.complete();\n                }));\n            }\n        }, () => {\n            isComplete = true;\n            !innerSub && subscriber.complete();\n        }));\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
