{
  "ast": null,
  "code": "import _classCallCheck from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nexport var Observable = /*#__PURE__*/(function () {\n  var Observable = /*#__PURE__*/function () {\n    function Observable(subscribe) {\n      _classCallCheck(this, Observable);\n\n      if (subscribe) {\n        this._subscribe = subscribe;\n      }\n    }\n\n    _createClass(Observable, [{\n      key: \"lift\",\n      value: function lift(operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n      }\n    }, {\n      key: \"subscribe\",\n      value: function subscribe(observerOrNext, error, complete) {\n        var _this = this;\n\n        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n        errorContext(function () {\n          var operator = _this.operator,\n              source = _this.source;\n          subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));\n        });\n        return subscriber;\n      }\n    }, {\n      key: \"_trySubscribe\",\n      value: function _trySubscribe(sink) {\n        try {\n          return this._subscribe(sink);\n        } catch (err) {\n          sink.error(err);\n        }\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(next, promiseCtor) {\n        var _this2 = this;\n\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n          var subscription;\n          subscription = _this2.subscribe(function (value) {\n            try {\n              next(value);\n            } catch (err) {\n              reject(err);\n              subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n            }\n          }, reject, resolve);\n        });\n      }\n    }, {\n      key: \"_subscribe\",\n      value: function _subscribe(subscriber) {\n        var _a;\n\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n      }\n    }, {\n      key: Symbol_observable,\n      value: function value() {\n        return this;\n      }\n    }, {\n      key: \"pipe\",\n      value: function pipe() {\n        for (var _len = arguments.length, operations = new Array(_len), _key = 0; _key < _len; _key++) {\n          operations[_key] = arguments[_key];\n        }\n\n        return pipeFromArray(operations)(this);\n      }\n    }, {\n      key: \"toPromise\",\n      value: function toPromise(promiseCtor) {\n        var _this3 = this;\n\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n          var value;\n\n          _this3.subscribe(function (x) {\n            return value = x;\n          }, function (err) {\n            return reject(err);\n          }, function () {\n            return resolve(value);\n          });\n        });\n      }\n    }]);\n\n    return Observable;\n  }();\n\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n\n  return Observable;\n})();\n\nfunction getPromiseCtor(promiseCtor) {\n  var _a;\n\n  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\n\nfunction isObserver(value) {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber(value) {\n  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);\n} //# sourceMappingURL=Observable.js.map",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
