{
  "ast": null,
  "code": "import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n  return operate(function (source, subscriber) {\n    var innerSub;\n    var syncResub = false;\n    var completions$;\n    var isNotifierComplete = false;\n    var isMainComplete = false;\n\n    var checkComplete = function checkComplete() {\n      return isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n    };\n\n    var getCompletionSubject = function getCompletionSubject() {\n      if (!completions$) {\n        completions$ = new Subject();\n        notifier(completions$).subscribe(new OperatorSubscriber(subscriber, function () {\n          if (innerSub) {\n            subscribeForRepeatWhen();\n          } else {\n            syncResub = true;\n          }\n        }, function () {\n          isNotifierComplete = true;\n          checkComplete();\n        }));\n      }\n\n      return completions$;\n    };\n\n    var subscribeForRepeatWhen = function subscribeForRepeatWhen() {\n      isMainComplete = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n        isMainComplete = true;\n        !checkComplete() && getCompletionSubject().next();\n      }));\n\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRepeatWhen();\n      }\n    };\n\n    subscribeForRepeatWhen();\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/repeatWhen.js"
    ],
    "names": [
      "Subject",
      "operate",
      "OperatorSubscriber",
      "repeatWhen",
      "notifier",
      "source",
      "subscriber",
      "innerSub",
      "syncResub",
      "completions$",
      "isNotifierComplete",
      "isMainComplete",
      "checkComplete",
      "complete",
      "getCompletionSubject",
      "subscribe",
      "subscribeForRepeatWhen",
      "undefined",
      "next",
      "unsubscribe"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AACjC,SAAOH,OAAO,CAAC,UAACI,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAIC,QAAJ;AACA,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIC,YAAJ;AACA,QAAIC,kBAAkB,GAAG,KAAzB;AACA,QAAIC,cAAc,GAAG,KAArB;;AACA,QAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,aAAMD,cAAc,IAAID,kBAAlB,KAAyCJ,UAAU,CAACO,QAAX,IAAuB,IAAhE,CAAN;AAAA,KAAtB;;AACA,QAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/B,UAAI,CAACL,YAAL,EAAmB;AACfA,QAAAA,YAAY,GAAG,IAAIT,OAAJ,EAAf;AACAI,QAAAA,QAAQ,CAACK,YAAD,CAAR,CAAuBM,SAAvB,CAAiC,IAAIb,kBAAJ,CAAuBI,UAAvB,EAAmC,YAAM;AACtE,cAAIC,QAAJ,EAAc;AACVS,YAAAA,sBAAsB;AACzB,WAFD,MAGK;AACDR,YAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,SAPgC,EAO9B,YAAM;AACLE,UAAAA,kBAAkB,GAAG,IAArB;AACAE,UAAAA,aAAa;AAChB,SAVgC,CAAjC;AAWH;;AACD,aAAOH,YAAP;AACH,KAhBD;;AAiBA,QAAMO,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACjCL,MAAAA,cAAc,GAAG,KAAjB;AACAJ,MAAAA,QAAQ,GAAGF,MAAM,CAACU,SAAP,CAAiB,IAAIb,kBAAJ,CAAuBI,UAAvB,EAAmCW,SAAnC,EAA8C,YAAM;AAC5EN,QAAAA,cAAc,GAAG,IAAjB;AACA,SAACC,aAAa,EAAd,IAAoBE,oBAAoB,GAAGI,IAAvB,EAApB;AACH,OAH2B,CAAjB,CAAX;;AAIA,UAAIV,SAAJ,EAAe;AACXD,QAAAA,QAAQ,CAACY,WAAT;AACAZ,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,SAAS,GAAG,KAAZ;AACAQ,QAAAA,sBAAsB;AACzB;AACJ,KAZD;;AAaAA,IAAAA,sBAAsB;AACzB,GAtCa,CAAd;AAuCH",
    "sourcesContent": [
      "import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n    return operate((source, subscriber) => {\n        let innerSub;\n        let syncResub = false;\n        let completions$;\n        let isNotifierComplete = false;\n        let isMainComplete = false;\n        const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n        const getCompletionSubject = () => {\n            if (!completions$) {\n                completions$ = new Subject();\n                notifier(completions$).subscribe(new OperatorSubscriber(subscriber, () => {\n                    if (innerSub) {\n                        subscribeForRepeatWhen();\n                    }\n                    else {\n                        syncResub = true;\n                    }\n                }, () => {\n                    isNotifierComplete = true;\n                    checkComplete();\n                }));\n            }\n            return completions$;\n        };\n        const subscribeForRepeatWhen = () => {\n            isMainComplete = false;\n            innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, () => {\n                isMainComplete = true;\n                !checkComplete() && getCompletionSubject().next();\n            }));\n            if (syncResub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                syncResub = false;\n                subscribeForRepeatWhen();\n            }\n        };\n        subscribeForRepeatWhen();\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
