{
  "ast": null,
  "code": "import _createForOfIteratorHelper from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function takeLast(count) {\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var buffer = [];\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      buffer.push(value);\n      count < buffer.length && buffer.shift();\n    }, function () {\n      var _iterator = _createForOfIteratorHelper(buffer),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var value = _step.value;\n          subscriber.next(value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      subscriber.complete();\n    }, undefined, function () {\n      buffer = null;\n    }));\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/takeLast.js"
    ],
    "names": [
      "EMPTY",
      "operate",
      "OperatorSubscriber",
      "takeLast",
      "count",
      "source",
      "subscriber",
      "buffer",
      "subscribe",
      "value",
      "push",
      "length",
      "shift",
      "next",
      "complete",
      "undefined"
    ],
    "mappings": ";AAAA,SAASA,KAAT,QAAsB,qBAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC5B,SAAOA,KAAK,IAAI,CAAT,GACD;AAAA,WAAMJ,KAAN;AAAA,GADC,GAEDC,OAAO,CAAC,UAACI,MAAD,EAASC,UAAT,EAAwB;AAC9B,QAAIC,MAAM,GAAG,EAAb;AACAF,IAAAA,MAAM,CAACG,SAAP,CAAiB,IAAIN,kBAAJ,CAAuBI,UAAvB,EAAmC,UAACG,KAAD,EAAW;AAC3DF,MAAAA,MAAM,CAACG,IAAP,CAAYD,KAAZ;AACAL,MAAAA,KAAK,GAAGG,MAAM,CAACI,MAAf,IAAyBJ,MAAM,CAACK,KAAP,EAAzB;AACH,KAHgB,EAGd,YAAM;AAAA,iDACeL,MADf;AAAA;;AAAA;AACL,4DAA4B;AAAA,cAAjBE,KAAiB;AACxBH,UAAAA,UAAU,CAACO,IAAX,CAAgBJ,KAAhB;AACH;AAHI;AAAA;AAAA;AAAA;AAAA;;AAILH,MAAAA,UAAU,CAACQ,QAAX;AACH,KARgB,EAQdC,SARc,EAQH,YAAM;AAChBR,MAAAA,MAAM,GAAG,IAAT;AACH,KAVgB,CAAjB;AAWH,GAbQ,CAFb;AAgBH",
    "sourcesContent": [
      "import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function takeLast(count) {\n    return count <= 0\n        ? () => EMPTY\n        : operate((source, subscriber) => {\n            let buffer = [];\n            source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n                buffer.push(value);\n                count < buffer.length && buffer.shift();\n            }, () => {\n                for (const value of buffer) {\n                    subscriber.next(value);\n                }\n                subscriber.complete();\n            }, undefined, () => {\n                buffer = null;\n            }));\n        });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
