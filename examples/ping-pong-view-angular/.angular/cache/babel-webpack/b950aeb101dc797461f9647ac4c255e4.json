{
  "ast": null,
  "code": "import _regeneratorRuntime from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/regenerator/index.js\";\nimport { identity } from '../util/identity';\nimport { isScheduler } from '../util/isScheduler';\nimport { defer } from './defer';\nimport { scheduleIterable } from '../scheduled/scheduleIterable';\nexport function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {\n  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(gen);\n\n  var resultSelector;\n  var initialState;\n\n  if (arguments.length === 1) {\n    initialState = initialStateOrOptions.initialState;\n    condition = initialStateOrOptions.condition;\n    iterate = initialStateOrOptions.iterate;\n    var _initialStateOrOption = initialStateOrOptions.resultSelector;\n    resultSelector = _initialStateOrOption === void 0 ? identity : _initialStateOrOption;\n    scheduler = initialStateOrOptions.scheduler;\n  } else {\n    initialState = initialStateOrOptions;\n\n    if (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {\n      resultSelector = identity;\n      scheduler = resultSelectorOrScheduler;\n    } else {\n      resultSelector = resultSelectorOrScheduler;\n    }\n  }\n\n  function gen() {\n    var state;\n    return _regeneratorRuntime.wrap(function gen$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            state = initialState;\n\n          case 1:\n            if (!(!condition || condition(state))) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 4;\n            return resultSelector(state);\n\n          case 4:\n            state = iterate(state);\n            _context.next = 1;\n            break;\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _marked);\n  }\n\n  return defer(scheduler ? function () {\n    return scheduleIterable(gen(), scheduler);\n  } : gen);\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/observable/generate.js"
    ],
    "names": [
      "identity",
      "isScheduler",
      "defer",
      "scheduleIterable",
      "generate",
      "initialStateOrOptions",
      "condition",
      "iterate",
      "resultSelectorOrScheduler",
      "scheduler",
      "gen",
      "resultSelector",
      "initialState",
      "arguments",
      "length",
      "state"
    ],
    "mappings": ";AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,OAAO,SAASC,QAAT,CAAkBC,qBAAlB,EAAyCC,SAAzC,EAAoDC,OAApD,EAA6DC,yBAA7D,EAAwFC,SAAxF,EAAmG;AAAA,sDAsB5FC,GAtB4F;;AACtG,MAAIC,cAAJ;AACA,MAAIC,YAAJ;;AACA,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAEpBF,IAAAA,YAFoB,GAOpBP,qBAPoB,CAEpBO,YAFoB;AAGpBN,IAAAA,SAHoB,GAOpBD,qBAPoB,CAGpBC,SAHoB;AAIpBC,IAAAA,OAJoB,GAOpBF,qBAPoB,CAIpBE,OAJoB;AAAA,gCAOpBF,qBAPoB,CAKpBM,cALoB;AAKpBA,IAAAA,cALoB,sCAKHX,QALG;AAMpBS,IAAAA,SANoB,GAOpBJ,qBAPoB,CAMpBI,SANoB;AAQ3B,GARD,MASK;AACDG,IAAAA,YAAY,GAAGP,qBAAf;;AACA,QAAI,CAACG,yBAAD,IAA8BP,WAAW,CAACO,yBAAD,CAA7C,EAA0E;AACtEG,MAAAA,cAAc,GAAGX,QAAjB;AACAS,MAAAA,SAAS,GAAGD,yBAAZ;AACH,KAHD,MAIK;AACDG,MAAAA,cAAc,GAAGH,yBAAjB;AACH;AACJ;;AACD,WAAUE,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACaK,YAAAA,KADb,GACqBH,YADrB;;AAAA;AAAA,kBACmC,CAACN,SAAD,IAAcA,SAAS,CAACS,KAAD,CAD1D;AAAA;AAAA;AAAA;;AAAA;AAEQ,mBAAMJ,cAAc,CAACI,KAAD,CAApB;;AAFR;AACmEA,YAAAA,KAAK,GAAGR,OAAO,CAACQ,KAAD,CADlF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAOb,KAAK,CAAEO,SAAS,GAEf;AAAA,WAAMN,gBAAgB,CAACO,GAAG,EAAJ,EAAQD,SAAR,CAAtB;AAAA,GAFe,GAIfC,GAJI,CAAZ;AAKH",
    "sourcesContent": [
      "import { identity } from '../util/identity';\nimport { isScheduler } from '../util/isScheduler';\nimport { defer } from './defer';\nimport { scheduleIterable } from '../scheduled/scheduleIterable';\nexport function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {\n    let resultSelector;\n    let initialState;\n    if (arguments.length === 1) {\n        ({\n            initialState,\n            condition,\n            iterate,\n            resultSelector = identity,\n            scheduler,\n        } = initialStateOrOptions);\n    }\n    else {\n        initialState = initialStateOrOptions;\n        if (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {\n            resultSelector = identity;\n            scheduler = resultSelectorOrScheduler;\n        }\n        else {\n            resultSelector = resultSelectorOrScheduler;\n        }\n    }\n    function* gen() {\n        for (let state = initialState; !condition || condition(state); state = iterate(state)) {\n            yield resultSelector(state);\n        }\n    }\n    return defer((scheduler\n        ?\n            () => scheduleIterable(gen(), scheduler)\n        :\n            gen));\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
