{
  "ast": null,
  "code": "import _toConsumableArray from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nexport var Subscription = /*#__PURE__*/function () {\n  function Subscription(initialTeardown) {\n    _classCallCheck(this, Subscription);\n\n    this.initialTeardown = initialTeardown;\n    this.closed = false;\n    this._parentage = null;\n    this._teardowns = null;\n  }\n\n  _createClass(Subscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var errors;\n\n      if (!this.closed) {\n        this.closed = true;\n        var _parentage = this._parentage;\n\n        if (_parentage) {\n          this._parentage = null;\n\n          if (Array.isArray(_parentage)) {\n            var _iterator = _createForOfIteratorHelper(_parentage),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var parent = _step.value;\n                parent.remove(this);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          } else {\n            _parentage.remove(this);\n          }\n        }\n\n        var initialTeardown = this.initialTeardown;\n\n        if (isFunction(initialTeardown)) {\n          try {\n            initialTeardown();\n          } catch (e) {\n            errors = e instanceof UnsubscriptionError ? e.errors : [e];\n          }\n        }\n\n        var _teardowns = this._teardowns;\n\n        if (_teardowns) {\n          this._teardowns = null;\n\n          var _iterator2 = _createForOfIteratorHelper(_teardowns),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var teardown = _step2.value;\n\n              try {\n                execTeardown(teardown);\n              } catch (err) {\n                errors = errors !== null && errors !== void 0 ? errors : [];\n\n                if (err instanceof UnsubscriptionError) {\n                  errors = [].concat(_toConsumableArray(errors), _toConsumableArray(err.errors));\n                } else {\n                  errors.push(err);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n\n        if (errors) {\n          throw new UnsubscriptionError(errors);\n        }\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(teardown) {\n      var _a;\n\n      if (teardown && teardown !== this) {\n        if (this.closed) {\n          execTeardown(teardown);\n        } else {\n          if (teardown instanceof Subscription) {\n            if (teardown.closed || teardown._hasParent(this)) {\n              return;\n            }\n\n            teardown._addParent(this);\n          }\n\n          (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);\n        }\n      }\n    }\n  }, {\n    key: \"_hasParent\",\n    value: function _hasParent(parent) {\n      var _parentage = this._parentage;\n      return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n    }\n  }, {\n    key: \"_addParent\",\n    value: function _addParent(parent) {\n      var _parentage = this._parentage;\n      this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n    }\n  }, {\n    key: \"_removeParent\",\n    value: function _removeParent(parent) {\n      var _parentage = this._parentage;\n\n      if (_parentage === parent) {\n        this._parentage = null;\n      } else if (Array.isArray(_parentage)) {\n        arrRemove(_parentage, parent);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(teardown) {\n      var _teardowns = this._teardowns;\n      _teardowns && arrRemove(_teardowns, teardown);\n\n      if (teardown instanceof Subscription) {\n        teardown._removeParent(this);\n      }\n    }\n  }]);\n\n  return Subscription;\n}();\n\nSubscription.EMPTY = function () {\n  var empty = new Subscription();\n  empty.closed = true;\n  return empty;\n}();\n\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n  return value instanceof Subscription || value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);\n}\n\nfunction execTeardown(teardown) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n} //# sourceMappingURL=Subscription.js.map",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
