{
  "ast": null,
  "code": "import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var iterator;\n    executeSchedule(subscriber, scheduler, function () {\n      iterator = input[Symbol_iterator]();\n      executeSchedule(subscriber, scheduler, function () {\n        var value;\n        var done;\n\n        try {\n          var _iterator$next = iterator.next();\n\n          value = _iterator$next.value;\n          done = _iterator$next.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n        }\n      }, 0, true);\n    });\n    return function () {\n      return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    };\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js"
    ],
    "names": [
      "Observable",
      "iterator",
      "Symbol_iterator",
      "isFunction",
      "executeSchedule",
      "scheduleIterable",
      "input",
      "scheduler",
      "subscriber",
      "value",
      "done",
      "next",
      "err",
      "error",
      "complete",
      "return"
    ],
    "mappings": "AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,QAAQ,IAAIC,eAArB,QAA4C,oBAA5C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,SAAjC,EAA4C;AAC/C,SAAO,IAAIP,UAAJ,CAAe,UAACQ,UAAD,EAAgB;AAClC,QAAIP,QAAJ;AACAG,IAAAA,eAAe,CAACI,UAAD,EAAaD,SAAb,EAAwB,YAAM;AACzCN,MAAAA,QAAQ,GAAGK,KAAK,CAACJ,eAAD,CAAL,EAAX;AACAE,MAAAA,eAAe,CAACI,UAAD,EAAaD,SAAb,EAAwB,YAAM;AACzC,YAAIE,KAAJ;AACA,YAAIC,IAAJ;;AACA,YAAI;AAAA,+BACmBT,QAAQ,CAACU,IAAT,EADnB;;AACGF,UAAAA,KADH,kBACGA,KADH;AACUC,UAAAA,IADV,kBACUA,IADV;AAEH,SAFD,CAGA,OAAOE,GAAP,EAAY;AACRJ,UAAAA,UAAU,CAACK,KAAX,CAAiBD,GAAjB;AACA;AACH;;AACD,YAAIF,IAAJ,EAAU;AACNF,UAAAA,UAAU,CAACM,QAAX;AACH,SAFD,MAGK;AACDN,UAAAA,UAAU,CAACG,IAAX,CAAgBF,KAAhB;AACH;AACJ,OAhBc,EAgBZ,CAhBY,EAgBT,IAhBS,CAAf;AAiBH,KAnBc,CAAf;AAoBA,WAAO;AAAA,aAAMN,UAAU,CAACF,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACc,MAA9D,CAAV,IAAmFd,QAAQ,CAACc,MAAT,EAAzF;AAAA,KAAP;AACH,GAvBM,CAAP;AAwBH",
    "sourcesContent": [
      "import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable((subscriber) => {\n        let iterator;\n        executeSchedule(subscriber, scheduler, () => {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, () => {\n                let value;\n                let done;\n                try {\n                    ({ value, done } = iterator.next());\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return () => isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
