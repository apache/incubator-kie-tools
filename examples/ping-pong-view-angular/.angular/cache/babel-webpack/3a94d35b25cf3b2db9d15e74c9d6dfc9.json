{
  "ast": null,
  "code": "import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function buffer(closingNotifier) {\n  return operate(function (source, subscriber) {\n    var currentBuffer = [];\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return currentBuffer.push(value);\n    }, function () {\n      subscriber.next(currentBuffer);\n      subscriber.complete();\n    }));\n    closingNotifier.subscribe(new OperatorSubscriber(subscriber, function () {\n      var b = currentBuffer;\n      currentBuffer = [];\n      subscriber.next(b);\n    }, noop));\n    return function () {\n      currentBuffer = null;\n    };\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/buffer.js"
    ],
    "names": [
      "operate",
      "noop",
      "OperatorSubscriber",
      "buffer",
      "closingNotifier",
      "source",
      "subscriber",
      "currentBuffer",
      "subscribe",
      "value",
      "push",
      "next",
      "complete",
      "b"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,MAAT,CAAgBC,eAAhB,EAAiC;AACpC,SAAOJ,OAAO,CAAC,UAACK,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAIC,aAAa,GAAG,EAApB;AACAF,IAAAA,MAAM,CAACG,SAAP,CAAiB,IAAIN,kBAAJ,CAAuBI,UAAvB,EAAmC,UAACG,KAAD;AAAA,aAAWF,aAAa,CAACG,IAAd,CAAmBD,KAAnB,CAAX;AAAA,KAAnC,EAAyE,YAAM;AAC5FH,MAAAA,UAAU,CAACK,IAAX,CAAgBJ,aAAhB;AACAD,MAAAA,UAAU,CAACM,QAAX;AACH,KAHgB,CAAjB;AAIAR,IAAAA,eAAe,CAACI,SAAhB,CAA0B,IAAIN,kBAAJ,CAAuBI,UAAvB,EAAmC,YAAM;AAC/D,UAAMO,CAAC,GAAGN,aAAV;AACAA,MAAAA,aAAa,GAAG,EAAhB;AACAD,MAAAA,UAAU,CAACK,IAAX,CAAgBE,CAAhB;AACH,KAJyB,EAIvBZ,IAJuB,CAA1B;AAKA,WAAO,YAAM;AACTM,MAAAA,aAAa,GAAG,IAAhB;AACH,KAFD;AAGH,GAda,CAAd;AAeH",
    "sourcesContent": [
      "import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function buffer(closingNotifier) {\n    return operate((source, subscriber) => {\n        let currentBuffer = [];\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => currentBuffer.push(value), () => {\n            subscriber.next(currentBuffer);\n            subscriber.complete();\n        }));\n        closingNotifier.subscribe(new OperatorSubscriber(subscriber, () => {\n            const b = currentBuffer;\n            currentBuffer = [];\n            subscriber.next(b);\n        }, noop));\n        return () => {\n            currentBuffer = null;\n        };\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
