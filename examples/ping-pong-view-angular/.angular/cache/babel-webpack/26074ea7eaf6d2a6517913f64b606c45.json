{
  "ast": null,
  "code": "import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport var defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\nexport function throttle(durationSelector) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultThrottleConfig,\n      leading = _ref.leading,\n      trailing = _ref.trailing;\n\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var sendValue = null;\n    var throttled = null;\n    var isComplete = false;\n\n    var endThrottling = function endThrottling() {\n      throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();\n      throttled = null;\n\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n\n    var cleanupThrottling = function cleanupThrottling() {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n\n    var startThrottle = function startThrottle(value) {\n      return throttled = innerFrom(durationSelector(value)).subscribe(new OperatorSubscriber(subscriber, endThrottling, cleanupThrottling));\n    };\n\n    var send = function send() {\n      if (hasValue) {\n        hasValue = false;\n        var value = sendValue;\n        sendValue = null;\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      sendValue = value;\n      !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n    }, function () {\n      isComplete = true;\n      !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n    }));\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/throttle.js"
    ],
    "names": [
      "operate",
      "OperatorSubscriber",
      "innerFrom",
      "defaultThrottleConfig",
      "leading",
      "trailing",
      "throttle",
      "durationSelector",
      "source",
      "subscriber",
      "hasValue",
      "sendValue",
      "throttled",
      "isComplete",
      "endThrottling",
      "unsubscribe",
      "send",
      "complete",
      "cleanupThrottling",
      "startThrottle",
      "value",
      "subscribe",
      "next",
      "closed"
    ],
    "mappings": "AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAO,IAAMC,qBAAqB,GAAG;AACjCC,EAAAA,OAAO,EAAE,IADwB;AAEjCC,EAAAA,QAAQ,EAAE;AAFuB,CAA9B;AAIP,OAAO,SAASC,QAAT,CAAkBC,gBAAlB,EAAmF;AAAA,iFAAvBJ,qBAAuB;AAAA,MAA7CC,OAA6C,QAA7CA,OAA6C;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AACtF,SAAOL,OAAO,CAAC,UAACQ,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAIC,QAAQ,GAAG,KAAf;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,UAAU,GAAG,KAAjB;;AACA,QAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBF,MAAAA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACG,WAAV,EAAtD;AACAH,MAAAA,SAAS,GAAG,IAAZ;;AACA,UAAIP,QAAJ,EAAc;AACVW,QAAAA,IAAI;AACJH,QAAAA,UAAU,IAAIJ,UAAU,CAACQ,QAAX,EAAd;AACH;AACJ,KAPD;;AAQA,QAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5BN,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,UAAU,IAAIJ,UAAU,CAACQ,QAAX,EAAd;AACH,KAHD;;AAIA,QAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD;AAAA,aAAYR,SAAS,GAAGV,SAAS,CAACK,gBAAgB,CAACa,KAAD,CAAjB,CAAT,CAAmCC,SAAnC,CAA6C,IAAIpB,kBAAJ,CAAuBQ,UAAvB,EAAmCK,aAAnC,EAAkDI,iBAAlD,CAA7C,CAAxB;AAAA,KAAtB;;AACA,QAAMF,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,UAAIN,QAAJ,EAAc;AACVA,QAAAA,QAAQ,GAAG,KAAX;AACA,YAAMU,KAAK,GAAGT,SAAd;AACAA,QAAAA,SAAS,GAAG,IAAZ;AACAF,QAAAA,UAAU,CAACa,IAAX,CAAgBF,KAAhB;AACA,SAACP,UAAD,IAAeM,aAAa,CAACC,KAAD,CAA5B;AACH;AACJ,KARD;;AASAZ,IAAAA,MAAM,CAACa,SAAP,CAAiB,IAAIpB,kBAAJ,CAAuBQ,UAAvB,EAAmC,UAACW,KAAD,EAAW;AAC3DV,MAAAA,QAAQ,GAAG,IAAX;AACAC,MAAAA,SAAS,GAAGS,KAAZ;AACA,QAAER,SAAS,IAAI,CAACA,SAAS,CAACW,MAA1B,MAAsCnB,OAAO,GAAGY,IAAI,EAAP,GAAYG,aAAa,CAACC,KAAD,CAAtE;AACH,KAJgB,EAId,YAAM;AACLP,MAAAA,UAAU,GAAG,IAAb;AACA,QAAER,QAAQ,IAAIK,QAAZ,IAAwBE,SAAxB,IAAqC,CAACA,SAAS,CAACW,MAAlD,KAA6Dd,UAAU,CAACQ,QAAX,EAA7D;AACH,KAPgB,CAAjB;AAQH,GAnCa,CAAd;AAoCH",
    "sourcesContent": [
      "import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false,\n};\nexport function throttle(durationSelector, { leading, trailing } = defaultThrottleConfig) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let sendValue = null;\n        let throttled = null;\n        let isComplete = false;\n        const endThrottling = () => {\n            throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();\n            throttled = null;\n            if (trailing) {\n                send();\n                isComplete && subscriber.complete();\n            }\n        };\n        const cleanupThrottling = () => {\n            throttled = null;\n            isComplete && subscriber.complete();\n        };\n        const startThrottle = (value) => (throttled = innerFrom(durationSelector(value)).subscribe(new OperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\n        const send = () => {\n            if (hasValue) {\n                hasValue = false;\n                const value = sendValue;\n                sendValue = null;\n                subscriber.next(value);\n                !isComplete && startThrottle(value);\n            }\n        };\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            sendValue = value;\n            !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n        }, () => {\n            isComplete = true;\n            !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n        }));\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
