{
  "ast": null,
  "code": "import _toConsumableArray from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\nexport function withLatestFrom() {\n  for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n    inputs[_key] = arguments[_key];\n  }\n\n  var project = popResultSelector(inputs);\n  return operate(function (source, subscriber) {\n    var len = inputs.length;\n    var otherValues = new Array(len);\n    var hasValue = inputs.map(function () {\n      return false;\n    });\n    var ready = false;\n\n    var _loop = function _loop(i) {\n      innerFrom(inputs[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        otherValues[i] = value;\n\n        if (!ready && !hasValue[i]) {\n          hasValue[i] = true;\n          (ready = hasValue.every(identity)) && (hasValue = null);\n        }\n      }, noop));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop(i);\n    }\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      if (ready) {\n        var values = [value].concat(otherValues);\n        subscriber.next(project ? project.apply(void 0, _toConsumableArray(values)) : values);\n      }\n    }));\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/withLatestFrom.js"
    ],
    "names": [
      "operate",
      "OperatorSubscriber",
      "innerFrom",
      "identity",
      "noop",
      "popResultSelector",
      "withLatestFrom",
      "inputs",
      "project",
      "source",
      "subscriber",
      "len",
      "length",
      "otherValues",
      "Array",
      "hasValue",
      "map",
      "ready",
      "i",
      "subscribe",
      "value",
      "every",
      "values",
      "next"
    ],
    "mappings": ";AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,OAAO,SAASC,cAAT,GAAmC;AAAA,oCAARC,MAAQ;AAARA,IAAAA,MAAQ;AAAA;;AACtC,MAAMC,OAAO,GAAGH,iBAAiB,CAACE,MAAD,CAAjC;AACA,SAAOP,OAAO,CAAC,UAACS,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAMC,GAAG,GAAGJ,MAAM,CAACK,MAAnB;AACA,QAAMC,WAAW,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAApB;AACA,QAAII,QAAQ,GAAGR,MAAM,CAACS,GAAP,CAAW;AAAA,aAAM,KAAN;AAAA,KAAX,CAAf;AACA,QAAIC,KAAK,GAAG,KAAZ;;AAJmC,+BAK1BC,CAL0B;AAM/BhB,MAAAA,SAAS,CAACK,MAAM,CAACW,CAAD,CAAP,CAAT,CAAqBC,SAArB,CAA+B,IAAIlB,kBAAJ,CAAuBS,UAAvB,EAAmC,UAACU,KAAD,EAAW;AACzEP,QAAAA,WAAW,CAACK,CAAD,CAAX,GAAiBE,KAAjB;;AACA,YAAI,CAACH,KAAD,IAAU,CAACF,QAAQ,CAACG,CAAD,CAAvB,EAA4B;AACxBH,UAAAA,QAAQ,CAACG,CAAD,CAAR,GAAc,IAAd;AACA,WAACD,KAAK,GAAGF,QAAQ,CAACM,KAAT,CAAelB,QAAf,CAAT,MAAuCY,QAAQ,GAAG,IAAlD;AACH;AACJ,OAN8B,EAM5BX,IAN4B,CAA/B;AAN+B;;AAKnC,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,GAApB,EAAyBO,CAAC,EAA1B,EAA8B;AAAA,YAArBA,CAAqB;AAQ7B;;AACDT,IAAAA,MAAM,CAACU,SAAP,CAAiB,IAAIlB,kBAAJ,CAAuBS,UAAvB,EAAmC,UAACU,KAAD,EAAW;AAC3D,UAAIH,KAAJ,EAAW;AACP,YAAMK,MAAM,IAAIF,KAAJ,SAAcP,WAAd,CAAZ;AACAH,QAAAA,UAAU,CAACa,IAAX,CAAgBf,OAAO,GAAGA,OAAO,MAAP,4BAAWc,MAAX,EAAH,GAAwBA,MAA/C;AACH;AACJ,KALgB,CAAjB;AAMH,GApBa,CAAd;AAqBH",
    "sourcesContent": [
      "import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\nexport function withLatestFrom(...inputs) {\n    const project = popResultSelector(inputs);\n    return operate((source, subscriber) => {\n        const len = inputs.length;\n        const otherValues = new Array(len);\n        let hasValue = inputs.map(() => false);\n        let ready = false;\n        for (let i = 0; i < len; i++) {\n            innerFrom(inputs[i]).subscribe(new OperatorSubscriber(subscriber, (value) => {\n                otherValues[i] = value;\n                if (!ready && !hasValue[i]) {\n                    hasValue[i] = true;\n                    (ready = hasValue.every(identity)) && (hasValue = null);\n                }\n            }, noop));\n        }\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            if (ready) {\n                const values = [value, ...otherValues];\n                subscriber.next(project ? project(...values) : values);\n            }\n        }));\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
