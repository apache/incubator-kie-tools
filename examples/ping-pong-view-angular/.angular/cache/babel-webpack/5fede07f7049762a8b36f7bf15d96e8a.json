{
  "ast": null,
  "code": "import url from \"url\";\nimport getCurrentScriptSource from \"./getCurrentScriptSource.js\";\n\nfunction parseURL(resourceQuery) {\n  var options = {};\n\n  if (typeof resourceQuery === \"string\" && resourceQuery !== \"\") {\n    var searchParams = resourceQuery.substr(1).split(\"&\");\n\n    for (var i = 0; i < searchParams.length; i++) {\n      var pair = searchParams[i].split(\"=\");\n      options[pair[0]] = decodeURIComponent(pair[1]);\n    }\n  } else {\n    // Else, get the url from the <script> this file was called with.\n    var scriptSource = getCurrentScriptSource();\n\n    if (scriptSource) {\n      var scriptSourceURL;\n\n      try {\n        // The placeholder `baseURL` with `window.location.href`,\n        // is to allow parsing of path-relative or protocol-relative URLs,\n        // and will have no effect if `scriptSource` is a fully valid URL.\n        scriptSourceURL = new URL(scriptSource, self.location.href);\n      } catch (error) {// URL parsing failed, do nothing.\n        // We will still proceed to see if we can recover using `resourceQuery`\n      }\n\n      if (scriptSourceURL) {\n        options = scriptSourceURL;\n        options.fromCurrentScript = true;\n      }\n    } else {\n      options = url.parse(self.location.href, true, true);\n      options.fromCurrentScript = true;\n    }\n  }\n\n  return options;\n}\n\nexport default parseURL;",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/webpack-dev-server/client/utils/parseURL.js"
    ],
    "names": [
      "url",
      "getCurrentScriptSource",
      "parseURL",
      "resourceQuery",
      "options",
      "searchParams",
      "substr",
      "split",
      "i",
      "length",
      "pair",
      "decodeURIComponent",
      "scriptSource",
      "scriptSourceURL",
      "URL",
      "self",
      "location",
      "href",
      "error",
      "fromCurrentScript",
      "parse"
    ],
    "mappings": "AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,sBAAP,MAAmC,6BAAnC;;AAEA,SAASC,QAAT,CAAkBC,aAAlB,EAAiC;AAC/B,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAI,OAAOD,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,KAAK,EAA3D,EAA+D;AAC7D,QAAIE,YAAY,GAAGF,aAAa,CAACG,MAAd,CAAqB,CAArB,EAAwBC,KAAxB,CAA8B,GAA9B,CAAnB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,YAAY,CAACI,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,UAAIE,IAAI,GAAGL,YAAY,CAACG,CAAD,CAAZ,CAAgBD,KAAhB,CAAsB,GAAtB,CAAX;AACAH,MAAAA,OAAO,CAACM,IAAI,CAAC,CAAD,CAAL,CAAP,GAAmBC,kBAAkB,CAACD,IAAI,CAAC,CAAD,CAAL,CAArC;AACD;AACF,GAPD,MAOO;AACL;AACA,QAAIE,YAAY,GAAGX,sBAAsB,EAAzC;;AAEA,QAAIW,YAAJ,EAAkB;AAChB,UAAIC,eAAJ;;AAEA,UAAI;AACF;AACA;AACA;AACAA,QAAAA,eAAe,GAAG,IAAIC,GAAJ,CAAQF,YAAR,EAAsBG,IAAI,CAACC,QAAL,CAAcC,IAApC,CAAlB;AACD,OALD,CAKE,OAAOC,KAAP,EAAc,CAAC;AACf;AACD;;AAED,UAAIL,eAAJ,EAAqB;AACnBT,QAAAA,OAAO,GAAGS,eAAV;AACAT,QAAAA,OAAO,CAACe,iBAAR,GAA4B,IAA5B;AACD;AACF,KAhBD,MAgBO;AACLf,MAAAA,OAAO,GAAGJ,GAAG,CAACoB,KAAJ,CAAUL,IAAI,CAACC,QAAL,CAAcC,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,CAAV;AACAb,MAAAA,OAAO,CAACe,iBAAR,GAA4B,IAA5B;AACD;AACF;;AAED,SAAOf,OAAP;AACD;;AAED,eAAeF,QAAf",
    "sourcesContent": [
      "import url from \"url\";\nimport getCurrentScriptSource from \"./getCurrentScriptSource.js\";\n\nfunction parseURL(resourceQuery) {\n  var options = {};\n\n  if (typeof resourceQuery === \"string\" && resourceQuery !== \"\") {\n    var searchParams = resourceQuery.substr(1).split(\"&\");\n\n    for (var i = 0; i < searchParams.length; i++) {\n      var pair = searchParams[i].split(\"=\");\n      options[pair[0]] = decodeURIComponent(pair[1]);\n    }\n  } else {\n    // Else, get the url from the <script> this file was called with.\n    var scriptSource = getCurrentScriptSource();\n\n    if (scriptSource) {\n      var scriptSourceURL;\n\n      try {\n        // The placeholder `baseURL` with `window.location.href`,\n        // is to allow parsing of path-relative or protocol-relative URLs,\n        // and will have no effect if `scriptSource` is a fully valid URL.\n        scriptSourceURL = new URL(scriptSource, self.location.href);\n      } catch (error) {// URL parsing failed, do nothing.\n        // We will still proceed to see if we can recover using `resourceQuery`\n      }\n\n      if (scriptSourceURL) {\n        options = scriptSourceURL;\n        options.fromCurrentScript = true;\n      }\n    } else {\n      options = url.parse(self.location.href, true, true);\n      options.fromCurrentScript = true;\n    }\n  }\n\n  return options;\n}\n\nexport default parseURL;"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
