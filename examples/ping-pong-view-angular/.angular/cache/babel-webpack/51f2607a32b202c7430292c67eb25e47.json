{
  "ast": null,
  "code": "import { asyncScheduler } from '../scheduler/async';\nimport { isValidDate } from '../util/isDate';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport var TimeoutError = createErrorClass(function (_super) {\n  return function TimeoutErrorImpl() {\n    var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _super(this);\n\n    this.message = 'Timeout has occurred';\n    this.name = 'TimeoutError';\n    this.info = info;\n  };\n});\nexport function timeout(config, schedulerArg) {\n  var _ref = isValidDate(config) ? {\n    first: config\n  } : typeof config === 'number' ? {\n    each: config\n  } : config,\n      first = _ref.first,\n      each = _ref.each,\n      _ref$with = _ref.with,\n      _with = _ref$with === void 0 ? timeoutErrorFactory : _ref$with,\n      _ref$scheduler = _ref.scheduler,\n      scheduler = _ref$scheduler === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler : _ref$scheduler,\n      _ref$meta = _ref.meta,\n      meta = _ref$meta === void 0 ? null : _ref$meta;\n\n  if (first == null && each == null) {\n    throw new TypeError('No timeout provided.');\n  }\n\n  return operate(function (source, subscriber) {\n    var originalSourceSubscription;\n    var timerSubscription;\n    var lastValue = null;\n    var seen = 0;\n\n    var startTimer = function startTimer(delay) {\n      timerSubscription = executeSchedule(subscriber, scheduler, function () {\n        try {\n          originalSourceSubscription.unsubscribe();\n          innerFrom(_with({\n            meta: meta,\n            lastValue: lastValue,\n            seen: seen\n          })).subscribe(subscriber);\n        } catch (err) {\n          subscriber.error(err);\n        }\n      }, delay);\n    };\n\n    originalSourceSubscription = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n      seen++;\n      subscriber.next(lastValue = value);\n      each > 0 && startTimer(each);\n    }, undefined, undefined, function () {\n      if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {\n        timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n      }\n\n      lastValue = null;\n    }));\n    startTimer(first != null ? typeof first === 'number' ? first : +first - scheduler.now() : each);\n  });\n}\n\nfunction timeoutErrorFactory(info) {\n  throw new TimeoutError(info);\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/operators/timeout.js"
    ],
    "names": [
      "asyncScheduler",
      "isValidDate",
      "operate",
      "innerFrom",
      "createErrorClass",
      "OperatorSubscriber",
      "executeSchedule",
      "TimeoutError",
      "_super",
      "TimeoutErrorImpl",
      "info",
      "message",
      "name",
      "timeout",
      "config",
      "schedulerArg",
      "first",
      "each",
      "with",
      "_with",
      "timeoutErrorFactory",
      "scheduler",
      "meta",
      "TypeError",
      "source",
      "subscriber",
      "originalSourceSubscription",
      "timerSubscription",
      "lastValue",
      "seen",
      "startTimer",
      "delay",
      "unsubscribe",
      "subscribe",
      "err",
      "error",
      "value",
      "next",
      "undefined",
      "closed",
      "now"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import { asyncScheduler } from '../scheduler/async';\nimport { isValidDate } from '../util/isDate';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport const TimeoutError = createErrorClass((_super) => function TimeoutErrorImpl(info = null) {\n    _super(this);\n    this.message = 'Timeout has occurred';\n    this.name = 'TimeoutError';\n    this.info = info;\n});\nexport function timeout(config, schedulerArg) {\n    const { first, each, with: _with = timeoutErrorFactory, scheduler = schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler, meta = null } = (isValidDate(config)\n        ? { first: config }\n        : typeof config === 'number'\n            ? { each: config }\n            : config);\n    if (first == null && each == null) {\n        throw new TypeError('No timeout provided.');\n    }\n    return operate((source, subscriber) => {\n        let originalSourceSubscription;\n        let timerSubscription;\n        let lastValue = null;\n        let seen = 0;\n        const startTimer = (delay) => {\n            timerSubscription = executeSchedule(subscriber, scheduler, () => {\n                try {\n                    originalSourceSubscription.unsubscribe();\n                    innerFrom(_with({\n                        meta,\n                        lastValue,\n                        seen,\n                    })).subscribe(subscriber);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }, delay);\n        };\n        originalSourceSubscription = source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n            seen++;\n            subscriber.next((lastValue = value));\n            each > 0 && startTimer(each);\n        }, undefined, undefined, () => {\n            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {\n                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n            }\n            lastValue = null;\n        }));\n        startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);\n    });\n}\nfunction timeoutErrorFactory(info) {\n    throw new TimeoutError(info);\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
