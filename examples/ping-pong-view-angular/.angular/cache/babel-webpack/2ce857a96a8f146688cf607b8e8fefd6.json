{
  "ast": null,
  "code": "import _classCallCheck from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/koda/redhat/kogito-tooling/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { EMPTY } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { isFunction } from './util/isFunction';\nexport var NotificationKind = /*#__PURE__*/(function () {\n  (function (NotificationKind) {\n    NotificationKind[\"NEXT\"] = \"N\";\n    NotificationKind[\"ERROR\"] = \"E\";\n    NotificationKind[\"COMPLETE\"] = \"C\";\n  })(NotificationKind || (NotificationKind = {}));\n\n  return NotificationKind;\n})();\nexport var Notification = /*#__PURE__*/function () {\n  function Notification(kind, value, error) {\n    _classCallCheck(this, Notification);\n\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n\n  _createClass(Notification, [{\n    key: \"observe\",\n    value: function observe(observer) {\n      return observeNotification(this, observer);\n    }\n  }, {\n    key: \"do\",\n    value: function _do(nextHandler, errorHandler, completeHandler) {\n      var kind = this.kind,\n          value = this.value,\n          error = this.error;\n      return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();\n    }\n  }, {\n    key: \"accept\",\n    value: function accept(nextOrObserver, error, complete) {\n      var _a;\n\n      return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);\n    }\n  }, {\n    key: \"toObservable\",\n    value: function toObservable() {\n      var kind = this.kind,\n          value = this.value,\n          error = this.error;\n      var result = kind === 'N' ? of(value) : kind === 'E' ? throwError(function () {\n        return error;\n      }) : kind === 'C' ? EMPTY : 0;\n\n      if (!result) {\n        throw new TypeError(\"Unexpected notification kind \".concat(kind));\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"createNext\",\n    value: function createNext(value) {\n      return new Notification('N', value);\n    }\n  }, {\n    key: \"createError\",\n    value: function createError(err) {\n      return new Notification('E', undefined, err);\n    }\n  }, {\n    key: \"createComplete\",\n    value: function createComplete() {\n      return Notification.completeNotification;\n    }\n  }]);\n\n  return Notification;\n}();\nNotification.completeNotification = new Notification('C');\nexport function observeNotification(notification, observer) {\n  var _a, _b, _c;\n\n  var kind = notification.kind,\n      value = notification.value,\n      error = notification.error;\n\n  if (typeof kind !== 'string') {\n    throw new TypeError('Invalid notification, missing \"kind\"');\n  }\n\n  kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);\n} //# sourceMappingURL=Notification.js.map",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
