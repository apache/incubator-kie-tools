{
  "ast": null,
  "code": "import { EmptyError } from './util/EmptyError';\nexport function lastValueFrom(source, config) {\n  var hasConfig = typeof config === 'object';\n  return new Promise(function (resolve, reject) {\n    var _hasValue = false;\n\n    var _value;\n\n    source.subscribe({\n      next: function next(value) {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: function complete() {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      }\n    });\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/lastValueFrom.js"
    ],
    "names": [
      "EmptyError",
      "lastValueFrom",
      "source",
      "config",
      "hasConfig",
      "Promise",
      "resolve",
      "reject",
      "_hasValue",
      "_value",
      "subscribe",
      "next",
      "value",
      "error",
      "complete",
      "defaultValue"
    ],
    "mappings": "AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;AAC1C,MAAMC,SAAS,GAAG,OAAOD,MAAP,KAAkB,QAApC;AACA,SAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAIC,SAAS,GAAG,KAAhB;;AACA,QAAIC,MAAJ;;AACAP,IAAAA,MAAM,CAACQ,SAAP,CAAiB;AACbC,MAAAA,IAAI,EAAE,cAACC,KAAD,EAAW;AACbH,QAAAA,MAAM,GAAGG,KAAT;AACAJ,QAAAA,SAAS,GAAG,IAAZ;AACH,OAJY;AAKbK,MAAAA,KAAK,EAAEN,MALM;AAMbO,MAAAA,QAAQ,EAAE,oBAAM;AACZ,YAAIN,SAAJ,EAAe;AACXF,UAAAA,OAAO,CAACG,MAAD,CAAP;AACH,SAFD,MAGK,IAAIL,SAAJ,EAAe;AAChBE,UAAAA,OAAO,CAACH,MAAM,CAACY,YAAR,CAAP;AACH,SAFI,MAGA;AACDR,UAAAA,MAAM,CAAC,IAAIP,UAAJ,EAAD,CAAN;AACH;AACJ;AAhBY,KAAjB;AAkBH,GArBM,CAAP;AAsBH",
    "sourcesContent": [
      "import { EmptyError } from './util/EmptyError';\nexport function lastValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        let _hasValue = false;\n        let _value;\n        source.subscribe({\n            next: (value) => {\n                _value = value;\n                _hasValue = true;\n            },\n            error: reject,\n            complete: () => {\n                if (_hasValue) {\n                    resolve(_value);\n                }\n                else if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n    });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
