{
  "ast": null,
  "code": "import { Observable } from '../Observable';\nimport { EMPTY } from './empty';\nexport function range(start, count, scheduler) {\n  if (count == null) {\n    count = start;\n    start = 0;\n  }\n\n  if (count <= 0) {\n    return EMPTY;\n  }\n\n  var end = count + start;\n  return new Observable(scheduler ? function (subscriber) {\n    var n = start;\n    return scheduler.schedule(function () {\n      if (n < end) {\n        subscriber.next(n++);\n        this.schedule();\n      } else {\n        subscriber.complete();\n      }\n    });\n  } : function (subscriber) {\n    var n = start;\n\n    while (n < end && !subscriber.closed) {\n      subscriber.next(n++);\n    }\n\n    subscriber.complete();\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "/home/koda/redhat/kogito-tooling/examples/ping-pong-view-angular/node_modules/rxjs/dist/esm/internal/observable/range.js"
    ],
    "names": [
      "Observable",
      "EMPTY",
      "range",
      "start",
      "count",
      "scheduler",
      "end",
      "subscriber",
      "n",
      "schedule",
      "next",
      "complete",
      "closed"
    ],
    "mappings": "AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAO,SAASC,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,SAA7B,EAAwC;AAC3C,MAAID,KAAK,IAAI,IAAb,EAAmB;AACfA,IAAAA,KAAK,GAAGD,KAAR;AACAA,IAAAA,KAAK,GAAG,CAAR;AACH;;AACD,MAAIC,KAAK,IAAI,CAAb,EAAgB;AACZ,WAAOH,KAAP;AACH;;AACD,MAAMK,GAAG,GAAGF,KAAK,GAAGD,KAApB;AACA,SAAO,IAAIH,UAAJ,CAAeK,SAAS,GAEvB,UAACE,UAAD,EAAgB;AACZ,QAAIC,CAAC,GAAGL,KAAR;AACA,WAAOE,SAAS,CAACI,QAAV,CAAmB,YAAY;AAClC,UAAID,CAAC,GAAGF,GAAR,EAAa;AACTC,QAAAA,UAAU,CAACG,IAAX,CAAgBF,CAAC,EAAjB;AACA,aAAKC,QAAL;AACH,OAHD,MAIK;AACDF,QAAAA,UAAU,CAACI,QAAX;AACH;AACJ,KARM,CAAP;AASH,GAbsB,GAevB,UAACJ,UAAD,EAAgB;AACZ,QAAIC,CAAC,GAAGL,KAAR;;AACA,WAAOK,CAAC,GAAGF,GAAJ,IAAW,CAACC,UAAU,CAACK,MAA9B,EAAsC;AAClCL,MAAAA,UAAU,CAACG,IAAX,CAAgBF,CAAC,EAAjB;AACH;;AACDD,IAAAA,UAAU,CAACI,QAAX;AACH,GArBF,CAAP;AAsBH",
    "sourcesContent": [
      "import { Observable } from '../Observable';\nimport { EMPTY } from './empty';\nexport function range(start, count, scheduler) {\n    if (count == null) {\n        count = start;\n        start = 0;\n    }\n    if (count <= 0) {\n        return EMPTY;\n    }\n    const end = count + start;\n    return new Observable(scheduler\n        ?\n            (subscriber) => {\n                let n = start;\n                return scheduler.schedule(function () {\n                    if (n < end) {\n                        subscriber.next(n++);\n                        this.schedule();\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                });\n            }\n        :\n            (subscriber) => {\n                let n = start;\n                while (n < end && !subscriber.closed) {\n                    subscriber.next(n++);\n                }\n                subscriber.complete();\n            });\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
