###############
# Development #
###############

# Swagger Dev UI configuration.
# More at https://quarkus.io/guides/openapi-swaggerui
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.dev-ui.cors.enabled=false
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.http.test-port=0
quarkus.swagger-ui.always-include=true
quarkus.kogito.data-index.graphql.ui.always-include=true




############
# Services #
############

# TODO: Include Data Audit?
# TODO: How to explain what those are and what they're using for?
kogito.service.url=http://0.0.0.0:8080
kogito.jobs-service.url=http://0.0.0.0:8080
kogito.data-index.url=http://0.0.0.0:8080




###############
# Persistence #
###############

# Apache KIE provides a separate Flyway subsystem that allows its internal tables to be created and migrated
# without interfering with your application's Flyway, if you're using it.
#
# This property enables to run automatically when the application starts, but if you want more control
# over when, how, and who executes changes to your database, disable it and run the DDL scripts manually.
kie.flyway.enabled=true

# TODO: How to explain this? What's the difference between JDBC and JPA in this case?
kogito.persistence.type=jdbc

# Default (production) DS
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=kogito-user
quarkus.datasource.password=kogito-pass
quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://0.0.0.0:5432/kogito}
quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL:postgresql://0.0.0.0:5432/kogito}

# Development  DS
%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.username=kogito
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:default;NON_KEYWORDS=VALUE,KEY




############
# Security #
############

# Keeping it disables for simplicity.
quarkus.oidc.enabled=false 
kogito.auth.enabled=false
%dev.jbpm.devui.users.jdoe.groups=admin,HR,IT




####################
# Containerization #
####################

# Profile to pack this example into a container image.
# To use it run a Maven build with the `container` profile (-Pcontainer)
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=${project.version}
%container.quarkus.container-image.name=process-compact-architecture-service
