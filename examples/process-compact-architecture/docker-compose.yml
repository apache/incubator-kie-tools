#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

services:
  postgres:
    container_name: process-compact-architecture-postgres
    image: postgres:16.8-alpine3.21
    profiles: ["development", "example", "container"]
    ports:
      - "5432:5432"
    volumes:
      - ./docker-compose/sql:/docker-entrypoint-initdb.d:Z
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      timeout: 45s
      interval: 10s
      retries: 50
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  pgadmin:
    container_name: process-compact-architecture-pgadmin
    image: dpage/pgadmin4:9.1
    profiles: ["development", "example", "container"]
    ports:
      - 8055:80
    depends_on:
      - postgres
    volumes:
      - ./docker-compose/pgadmin/servers.json:/pgadmin4/servers.json
      - ./docker-compose/pgadmin/pgpass:/pgadmin4/pgpass
    entrypoint: >
      /bin/sh -c "
      cp -f /pgadmin4/pgpass /var/lib/pgadmin/;
      chmod 600 /var/lib/pgadmin/pgpass;
      /entrypoint.sh
      "
    environment:
      PGADMIN_DEFAULT_EMAIL: user@kie.org
      PGADMIN_DEFAULT_PASSWORD: pass
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      GUNICORN_ACCESS_LOGFILE: "/dev/null"

  process-compact-architecture:
    container_name: process-compact-architecture
    image: dev.local/apache/process-compact-architecture:${PROJECT_VERSION}
    profiles: ["example", "container"]
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgres:5432/kie"
      QUARKUS_DATASOURCE_REACTIVE_URL: "postgresql://postgres:5432/kie"
      QUARKUS_DATASOURCE_USERNAME: kie-user
      QUARKUS_DATASOURCE_PASSWORD: kie-pass
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      KOGITO_JOBS_SERVICE_URL: http://127.0.0.1:8080
      KOGITO_SERVICE_URL: http://127.0.0.1:8080
      KOGITO_DATAINDEX_HTTP_URL: http://127.0.0.1:8080
    extra_hosts:
      - "127.0.0.1:host-gateway"

  management-console:
    container_name: process-compact-architecture-management-console
    image: ${MANAGEMENT_CONSOLE_IMAGE}
    profiles: ["container"]
    ports:
      - 8280:8080
    depends_on:
      process-compact-architecture:
        condition: service_started
