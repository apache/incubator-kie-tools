#https://quarkus.io/guides/openapi-swaggerui
quarkus.http.port=8081
quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.dev-ui.cors.enabled=false
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.swagger-ui.always-include=true
quarkus.kogito.data-index.graphql.ui.always-include=true
quarkus.http.test-port=0

# Services
kogito.service.url=http://localhost:${quarkus.http.port}
kogito.jobs-service.url=http://localhost:${quarkus.http.port}
kogito.data-index.url=http://localhost:${quarkus.http.port}

# run create tables scripts
kie.flyway.enabled=true
kogito.persistence.type=jdbc

# Default application datasource properties
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=kie-user-1
quarkus.datasource.password=kie-pass-1
quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://localhost:5432/kie1}
quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL:postgresql://localhost:5432/kie1}
# Development application datasource properties
%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.username=kie1
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:default;NON_KEYWORDS=VALUE,KEY

# profile to pack this example into a container, to use it execute activate the maven container profile, -Pcontainer
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=kie
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=main
%container.quarkus.container-image.name=process-security-kie-service-1

%dev.jbpm.devui.users.jdoe.groups=admin,HR,IT

# Enabling OIDC
quarkus.oidc.enabled=true
quarkus.oidc.auth-server-url=http://127.0.0.1:8180/realms/kie
quarkus.oidc.discovery-enabled=true
quarkus.oidc.tenant-enabled=true
quarkus.oidc.client-id=kie-management-console
# quarkus-oidc-proxy can't handle different clients (confidential and public)
# so we're using the same client on both applications for now.
# quarkus.oidc.client-id=kie-app
# quarkus.oidc.credentials.secret=secret
quarkus.oidc.application-type=service
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated
quarkus.http.auth.permission.public.paths=/q/*,/docs/*
quarkus.http.auth.permission.public.policy=permit

# Quarkus OIDC Proxy
quarkus.oidc-proxy.external-client-id=kie-management-console

kogito.security.auth.enabled=true
kogito.security.auth.impersonation.allowed-for-roles=managers